// Generated by Haxe 4.2.2
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""));
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
}
EReg.__name__ = "EReg";
Object.assign(EReg.prototype, {
	__class__: EReg
});
Math.__name__ = "Math";
class Globals {
}
Globals.__name__ = "Globals";
class HxOverrides {
	static cca(s,index) {
		let x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static remove(a,obj) {
		let i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = "HxOverrides";
class MainNode {
	constructor() {
		haxe_Log.trace("MainNode",{ fileName : "src/MainNode.hx", lineNumber : 18, className : "MainNode", methodName : "new"});
		this.init();
	}
	init() {
		this.sketchSVG();
	}
	sketchSVG() {
		let sketchWidth = 793.70079;
		let sketchHeight = 1122.5197;
		let settings = new Settings(Math.round(sketchWidth),Math.round(sketchHeight),"svg");
		settings.set_isAnimation(false);
		settings.set_padding(0);
		settings.set_isScaled(true);
		settings.set_sizeType("mm");
		settings.set_viewBox([0,0,sketchWidth,sketchHeight]);
		let sketch = SketcherSVG.create(settings).setup();
		let bg = sketch.makeBackground("white");
		let _g = 0;
		while(_g < 10) {
			let i = _g++;
			let circle = sketch.makeCircle(sketcher_util_MathUtil.random(Globals.w),sketcher_util_MathUtil.random(Globals.h),sketcher_util_MathUtil.clamp(sketcher_util_MathUtil.random(200),50,200));
			let color = sketcher_util_ColorUtil.niceColor100[sketcher_util_MathUtil.randomInt(sketcher_util_ColorUtil.niceColor100.length - 1)];
			circle.setFill(color[0]);
		}
		haxe_Log.trace(sketch.update(),{ fileName : "src/MainNode.hx", lineNumber : 50, className : "MainNode", methodName : "sketchSVG"});
		this.writeFile("export","test_node.svg",sketch.update());
	}
	writeFile(path,filename,content) {
		if(!sys_FileSystem.exists(path)) {
			sys_FileSystem.createDirectory(path);
		}
		js_node_Fs.writeFileSync(path + ("/" + filename),content);
		haxe_Log.trace("written file: " + path + "/" + filename,{ fileName : "src/MainNode.hx", lineNumber : 67, className : "MainNode", methodName : "writeFile"});
	}
	static main() {
		let app = new MainNode();
	}
}
MainNode.__name__ = "MainNode";
Object.assign(MainNode.prototype, {
	__class__: MainNode
});
class Settings {
	constructor(width,height,type) {
		if(type == null) {
			type = "svg";
		}
		this.isAnimation = true;
		this.isAutostart = false;
		this.isScaled = false;
		this.margin = 0;
		this.padding = 0;
		this.type = "svg";
		this.set_width(width);
		this.set_height(height);
		this.set_type(type.toLowerCase());
	}
	get_width() {
		return this.width;
	}
	set_width(value) {
		return this.width = value;
	}
	get_height() {
		return this.height;
	}
	set_height(value) {
		return this.height = value;
	}
	get_type() {
		return this.type;
	}
	set_type(value) {
		return this.type = value;
	}
	get_padding() {
		return this.padding;
	}
	set_padding(value) {
		return this.padding = value;
	}
	get_isScaled() {
		return this.isScaled;
	}
	set_isScaled(value) {
		return this.isScaled = value;
	}
	get_element() {
		return this.element;
	}
	set_element(value) {
		return this.element = value;
	}
	get_elementID() {
		return this.elementID;
	}
	set_elementID(value) {
		return this.elementID = value;
	}
	get_margin() {
		return this.margin;
	}
	set_margin(value) {
		return this.margin = value;
	}
	get_isAutostart() {
		return this.isAutostart;
	}
	set_isAutostart(value) {
		return this.isAutostart = value;
	}
	get_sizeType() {
		return this.sizeType;
	}
	set_sizeType(value) {
		return this.sizeType = value;
	}
	get_isAnimation() {
		return this.isAnimation;
	}
	set_isAnimation(value) {
		return this.isAnimation = value;
	}
	get_viewBox() {
		return this.viewBox;
	}
	set_viewBox(value) {
		if(value.length != 4) {
			$global.console.warn("Expect 4 float values: \"0 0 300 400\"");
		}
		return this.viewBox = value;
	}
}
Settings.__name__ = "Settings";
Object.assign(Settings.prototype, {
	__class__: Settings
});
class Sketcher {
	constructor(settings) {
		this.WRAPPER_ID = "sketcher_wrapper";
		this.SVG_ID = "sketcher_svg";
		this.WEBGL_ID = "sketcher_canvas_webgl";
		this.CANVAS_ID = "sketcher_canvas";
		this.baseArray = [];
		this.settings = settings;
		Globals.w = settings.get_width();
		Globals.h = settings.get_height();
		let u = new Date().getTime();
		if("" + u == Sketcher.UNIQ_ID) {
			Sketcher.UNIQ_ID = "" + u + "_1";
		} else {
			Sketcher.UNIQ_ID = "" + u;
		}
		Sketcher.SVG_UNIQ_ID = "" + this.WRAPPER_ID + "_" + this.SVG_ID + "_" + Sketcher.UNIQ_ID;
		if(settings.get_elementID() != null) {
			this.WRAPPER_ID = settings.get_elementID();
		}
		if(settings.get_isScaled() == true) {
			if(window.document.getElementById("" + settings.get_elementID() + "-style") == null) {
				let node = window.document.createElement("style");
				node.id = "" + settings.get_elementID() + "-style";
				node.innerHTML = "\n\t\t\t\t<!-- no padding -->\n\t\t\t\t.sketcher-wrapper{width: 100%;height: 100%; max-width: 100vh;padding: 0;margin: 0 auto;display: flex;align-items: center;justify-content: center;}\n\t\t\t\tsvg {width: 100%; height: 100%; background-color:#ffffff; }\n\t\t\t\tcanvas{width: 100%; background-color:#ffffff; }\n\t\t\t\t";
				window.document.body.appendChild(node);
			}
		}
		if(settings.get_padding() != null && settings.get_padding() >= 0) {
			if(window.document.getElementById("" + settings.get_elementID() + "-style") == null) {
				let node = window.document.createElement("style");
				node.id = "" + settings.get_elementID() + "-style";
				node.innerHTML = "\n\t\t\t\t<!-- with padding -->\n\t\t\t\t.sketcher-wrapper{width: 100%;height: 100%; max-width: 100vh;padding: 0;margin: 0 auto;display: flex;align-items: center;justify-content: center;}\n\t\t\t\tsvg {padding: " + settings.get_padding() + "px; width: 100%;  height: 100%; background-color:#ffffff; }\n\t\t\t\tcanvas {padding: " + settings.get_padding() + "px; width: 100%; background-color:#ffffff; }\n\t\t\t\t";
				window.document.body.appendChild(node);
			}
		}
	}
	appendTo(element) {
		if(element == null) {
			return this;
		}
		this.element = element;
		switch(this.settings.get_type()) {
		case "canvas":
			this.canvas = window.document.createElement("canvas");
			this.canvas.width = this.settings.get_width();
			this.canvas.height = this.settings.get_height();
			this.canvas.id = this.CANVAS_ID;
			Sketcher.ctx = this.canvas.getContext("2d",null);
			element.appendChild(this.canvas);
			break;
		case "svg":
			let svgW = "" + this.settings.get_width();
			let svgH = "" + this.settings.get_height();
			let svgViewBox = "0 0 " + this.settings.get_width() + " " + this.settings.get_height();
			if(this.settings.get_sizeType() != null) {
				svgW = "" + Math.round(sketcher_util_MathUtil.px2mm(this.settings.get_width())) + this.settings.get_sizeType();
				svgH = "" + Math.round(sketcher_util_MathUtil.px2mm(this.settings.get_height())) + this.settings.get_sizeType();
			}
			if(this.settings.get_viewBox() != null) {
				svgViewBox = "" + this.settings.get_viewBox()[0] + " " + this.settings.get_viewBox()[1] + " " + this.settings.get_viewBox()[2] + " " + this.settings.get_viewBox()[3];
			}
			let _xml = "<?xml version=\"1.0\" standalone=\"no\"?><svg width=\"" + svgW + "\" height=\"" + svgH + "\" viewBox=\"" + svgViewBox + "\" version=\"1.1\" id=\"" + Sketcher.SVG_UNIQ_ID + "\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"></svg>";
			element.innerHTML = _xml;
			this.svgEl = element;
			break;
		case "webgl":
			this.canvas = window.document.createElement("canvas");
			this.canvas.width = this.settings.get_width();
			this.canvas.height = this.settings.get_height();
			this.canvas.id = this.WEBGL_ID;
			Sketcher.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,null);
			element.appendChild(this.canvas);
			break;
		default:
			haxe_Log.trace("case '" + this.settings.get_type().toLowerCase() + "': trace ('" + this.settings.get_type().toLowerCase() + "');",{ fileName : "src/Sketcher.hx", lineNumber : 171, className : "Sketcher", methodName : "appendTo"});
		}
		return this;
	}
	makeBackground(color) {
		let shape = new sketcher_draw_Background(color);
		this.baseArray.unshift(shape);
		return shape;
	}
	makeText(str,x,y) {
		let shape = new sketcher_draw_Text(str,x,y);
		this.baseArray.push(shape);
		return shape;
	}
	makeCircle(x,y,radius) {
		let shape = new sketcher_draw_Circle(x,y,radius);
		this.baseArray.push(shape);
		return shape;
	}
	makeRectangle(x,y,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		let shape = new sketcher_draw_Rectangle(x,y,width,height,isCenter);
		this.baseArray.push(shape);
		return shape;
	}
	makeRectangleInt(x,y,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		let shape = new sketcher_draw_Rectangle(x,y,width,height);
		this.baseArray.push(shape);
		return shape;
	}
	makeButton(x,y,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		let shape = new sketcher_draw_Button(x,y,width,height,isCenter);
		this.baseArray.push(shape);
		return shape;
	}
	makeRoundedRectangle(x,y,width,height,radius,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		if(!isCenter) {
			x = Math.round(width / 2);
			y = Math.round(height / 2);
		}
		let shape = new sketcher_draw_Rectangle(x,y,width,height);
		shape.set_radius(radius);
		this.baseArray.push(shape);
		return shape;
	}
	makeLine(x1,y1,x2,y2) {
		let shape = new sketcher_draw_Line(x1,y1,x2,y2);
		this.baseArray.push(shape);
		return shape;
	}
	makeLinePoint(p1,p2) {
		let shape = new sketcher_draw_Line(p1.x,p1.y,p2.x,p2.y);
		this.baseArray.push(shape);
		return shape;
	}
	makeEllipse(x,y,rx,ry) {
		let shape = new sketcher_draw_Ellipse(x,y,rx,ry);
		this.baseArray.push(shape);
		return shape;
	}
	makePolygon(sides) {
		let shape = new sketcher_draw_Polygon(sides);
		this.baseArray.push(shape);
		return shape;
	}
	makePolygonPoint(sides) {
		let _sides = [];
		let _g = 0;
		while(_g < sides.length) {
			let i = sides[_g];
			++_g;
			_sides.push(i.x);
			_sides.push(i.y);
		}
		let shape = new sketcher_draw_Polygon(_sides);
		shape.set_arrPoint(sides);
		this.baseArray.push(shape);
		return shape;
	}
	makePath(x,y) {
		let shape = new sketcher_draw_Path(x,y);
		this.baseArray.push(shape);
		return shape;
	}
	makePolyLine(sides) {
		let shape = new sketcher_draw_PolyLine(sides);
		this.baseArray.push(shape);
		return shape;
	}
	makePolyLinePoint(sides) {
		let _sides = [];
		let _g = 0;
		while(_g < sides.length) {
			let i = sides[_g];
			++_g;
			_sides.push(i.x);
			_sides.push(i.y);
		}
		let shape = new sketcher_draw_PolyLine(_sides);
		this.baseArray.push(shape);
		return shape;
	}
	makeGradient(color0,color1,isLinear) {
		if(isLinear == null) {
			isLinear = true;
		}
		let shape = new sketcher_draw_Gradient(color0,color1,isLinear);
		this.baseArray.push(shape);
		return shape;
	}
	makeImage(x,y,href,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = false;
		}
		let shape = new sketcher_draw_Image(x,y,href,width,height,isCenter);
		this.baseArray.push(shape);
		return shape;
	}
	makeImageFromImage(x,y,img,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = false;
		}
		let shape = new sketcher_draw_Image(x,y,"",width,height,isCenter);
		shape.set_image(img);
		this.baseArray.push(shape);
		return shape;
	}
	makeGroup(array) {
		let shape = new sketcher_draw_Group(array);
		let _g = 0;
		let _g1 = array.length;
		while(_g < _g1) {
			let j = _g++;
			let _base = array[j];
			let _g1 = 0;
			let _g2 = this.baseArray.length;
			while(_g1 < _g2) {
				let i = _g1++;
				let base = this.baseArray[i];
				if(base == _base) {
					this.baseArray[i] = null;
				}
			}
		}
		this.baseArray.push(shape);
		return shape;
	}
	makeMask(array) {
		let shape = new sketcher_draw_Mask(array);
		let _g = 0;
		let _g1 = array.length;
		while(_g < _g1) {
			let j = _g++;
			let _base = array[j];
			let _g1 = 0;
			let _g2 = this.baseArray.length;
			while(_g1 < _g2) {
				let i = _g1++;
				let base = this.baseArray[i];
				if(base == _base) {
					this.baseArray[i] = null;
				}
			}
		}
		this.baseArray.push(shape);
		return shape;
	}
	makeMarker(array) {
		let shape = new sketcher_draw_Marker(array);
		let _g = 0;
		let _g1 = array.length;
		while(_g < _g1) {
			let j = _g++;
			let _base = array[j];
			let _g1 = 0;
			let _g2 = this.baseArray.length;
			while(_g1 < _g2) {
				let i = _g1++;
				let base = this.baseArray[i];
				if(base == _base) {
					this.baseArray[i] = null;
				}
			}
		}
		this.baseArray.push(shape);
		return shape;
	}
	makeMirror(dir) {
		let shape = new sketcher_draw_Mirror(dir);
		if(this.settings.get_type().toLowerCase() == "svg") {
			shape.baseArray = this.baseArray;
		}
		this.baseArray.push(shape);
		return shape;
	}
	makeX(x,y,color) {
		if(color == null) {
			color = "red";
		}
		let cx = Math.round(x);
		let cy = Math.round(y);
		let r = 5;
		let polyline = new sketcher_draw_PolyLine([cx,cy,cx - r,cy,cx,cy,cx + r,cy,cx,cy,cx,cy - r,cx,cy,cx,cy + r,cx,cy]);
		polyline.set_id("registration_marker_" + polyline.get_count());
		polyline.set_desc("Registration Marker\nx: " + cx + ", y: " + cy);
		polyline.set_strokeColor(color);
		polyline.set_strokeWeight(1);
		polyline.set_fillColor(color);
		polyline.set_lineCap("butt");
		polyline.set_lineJoin("miter");
		this.baseArray.push(polyline);
		return polyline;
	}
	makeXCross(x,y,size) {
		let cx = x;
		let cy = y;
		let r = size;
		let polyline = new sketcher_draw_PolyLine([cx,cy,cx - r,cy,cx,cy,cx + r,cy,cx,cy,cx,cy - r,cx,cy,cx,cy + r,cx,cy]);
		polyline.set_id("xcross_" + polyline.get_count());
		polyline.set_desc("xcross\nx: " + cx + ", y: " + cy + ", size:" + size);
		polyline.set_lineCap("butt");
		polyline.set_lineJoin("bevel");
		this.baseArray.push(polyline);
		return polyline;
	}
	clear() {
		this.baseArray = [];
		if(this.settings.get_type().toLowerCase() == "svg") {
			if(this.getSVGElement() != null) {
				this.getSVGElement().innerHTML = "";
			} else {
				this.element.innerHTML = "";
			}
		}
		if(this.settings.get_type().toLowerCase() == "canvas") {
			Sketcher.ctx.clearRect(0,0,this.settings.get_width(),this.settings.get_height());
		}
	}
	getBaseArray() {
		return this.baseArray;
	}
	getSVG() {
		let div = window.document.getElementById(this.WRAPPER_ID);
		return div.innerHTML;
	}
	getSVGElement() {
		let svg = window.document.getElementById("" + Sketcher.SVG_UNIQ_ID);
		return svg;
	}
	update() {
		if(this.element == null) {
			return;
		}
		switch(this.settings.get_type()) {
		case "canvas":
			let _g = 0;
			let _g1 = this.baseArray.length;
			while(_g < _g1) {
				let i = _g++;
				let base = this.baseArray[i];
				if(base == null) {
					continue;
				}
				base.ctx(Sketcher.ctx);
			}
			this.baseArray = [];
			break;
		case "svg":
			let svgW = "" + this.settings.get_width();
			let svgH = "" + this.settings.get_height();
			let svgViewBox = "0 0 " + this.settings.get_width() + " " + this.settings.get_height();
			if(this.settings.get_sizeType() != null) {
				svgW += "" + this.settings.get_sizeType();
				svgH += "" + this.settings.get_sizeType();
			}
			if(this.settings.get_viewBox() != null) {
				svgViewBox = "" + this.settings.get_viewBox()[0] + " " + this.settings.get_viewBox()[1] + " " + this.settings.get_viewBox()[2] + " " + this.settings.get_viewBox()[3];
			}
			let _xml = "<?xml version=\"1.0\" standalone=\"no\"?><svg width=\"" + svgW + "\" height=\"" + svgH + "\" viewBox=\"" + svgViewBox + "\" version=\"1.1\" id=\"" + Sketcher.SVG_UNIQ_ID + "\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\">";
			let svgInnerHtml = "";
			let content = "";
			let defs = "";
			let _g2 = 0;
			let _g3 = this.baseArray.length;
			while(_g2 < _g3) {
				let i = _g2++;
				let base = this.baseArray[i];
				if(base == null) {
					continue;
				}
				let draw = base.svg(this.settings);
				switch(base.type) {
				case "gradient":case "marker":case "mask":
					defs += draw;
					break;
				default:
					content += draw;
				}
			}
			_xml += "<defs>" + defs + "</defs>";
			_xml += content + "</svg>";
			svgInnerHtml += "<defs>" + defs + "</defs>";
			svgInnerHtml += content + "</svg>";
			this.svg = _xml;
			if(this.getSVGElement() != null) {
				this.getSVGElement().innerHTML = svgInnerHtml;
			} else {
				this.element.innerHTML = _xml;
			}
			break;
		case "webgl":
			haxe_Log.trace("webgl",{ fileName : "src/Sketcher.hx", lineNumber : 761, className : "Sketcher", methodName : "update"});
			let _g4 = 0;
			let _g5 = this.baseArray.length;
			while(_g4 < _g5) {
				let i = _g4++;
				let base = this.baseArray[i];
				if(base == null) {
					continue;
				}
				base.gl(Sketcher.gl);
			}
			this.baseArray = [];
			break;
		default:
			haxe_Log.trace("case '" + this.settings.get_type() + "': trace ('" + this.settings.get_type() + "');",{ fileName : "src/Sketcher.hx", lineNumber : 772, className : "Sketcher", methodName : "update"});
		}
	}
	static create(settings) {
		let sketcher = new Sketcher(settings);
		sketcher.baseArray = [];
		return sketcher;
	}
}
Sketcher.__name__ = "Sketcher";
Object.assign(Sketcher.prototype, {
	__class__: Sketcher
});
class SketcherCore {
	constructor() {
		if(SketcherCore._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.baseArray = [];
	}
	makeBackground(color) {
		let shape = new sketcher_draw_Background(color);
		this.baseArray.unshift(shape);
		return shape;
	}
	makeText(str,x,y) {
		let shape = new sketcher_draw_Text(str,x,y);
		this.baseArray.push(shape);
		return shape;
	}
	makeCircle(x,y,radius) {
		let shape = new sketcher_draw_Circle(x,y,radius);
		this.baseArray.push(shape);
		return shape;
	}
	makeRectangle(x,y,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		let shape = new sketcher_draw_Rectangle(x,y,width,height,isCenter);
		this.baseArray.push(shape);
		return shape;
	}
	makeRectangleInt(x,y,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		let shape = new sketcher_draw_Rectangle(x,y,width,height);
		this.baseArray.push(shape);
		return shape;
	}
	makeButton(x,y,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		let shape = new sketcher_draw_Button(x,y,width,height,isCenter);
		this.baseArray.push(shape);
		return shape;
	}
	makeRoundedRectangle(x,y,width,height,radius,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		if(!isCenter) {
			x = Math.round(width / 2);
			y = Math.round(height / 2);
		}
		let shape = new sketcher_draw_Rectangle(x,y,width,height);
		shape.set_radius(radius);
		this.baseArray.push(shape);
		return shape;
	}
	makeLine(x1,y1,x2,y2) {
		let shape = new sketcher_draw_Line(x1,y1,x2,y2);
		this.baseArray.push(shape);
		return shape;
	}
	makeLinePoint(p1,p2) {
		let shape = new sketcher_draw_Line(p1.x,p1.y,p2.x,p2.y);
		this.baseArray.push(shape);
		return shape;
	}
	makeEllipse(x,y,rx,ry) {
		let shape = new sketcher_draw_Ellipse(x,y,rx,ry);
		this.baseArray.push(shape);
		return shape;
	}
	makePolygon(sides) {
		let shape = new sketcher_draw_Polygon(sides);
		this.baseArray.push(shape);
		return shape;
	}
	makePolygonPoint(sides) {
		let _sides = [];
		let _g = 0;
		while(_g < sides.length) {
			let i = sides[_g];
			++_g;
			_sides.push(i.x);
			_sides.push(i.y);
		}
		let shape = new sketcher_draw_Polygon(_sides);
		shape.set_arrPoint(sides);
		this.baseArray.push(shape);
		return shape;
	}
	makePath(x,y) {
		let shape = new sketcher_draw_Path(x,y);
		this.baseArray.push(shape);
		return shape;
	}
	makePolyLine(sides) {
		let shape = new sketcher_draw_PolyLine(sides);
		this.baseArray.push(shape);
		return shape;
	}
	makePolyLinePoint(sides) {
		let _sides = [];
		let _g = 0;
		while(_g < sides.length) {
			let i = sides[_g];
			++_g;
			_sides.push(i.x);
			_sides.push(i.y);
		}
		let shape = new sketcher_draw_PolyLine(_sides);
		this.baseArray.push(shape);
		return shape;
	}
	makeGradient(color0,color1,isLinear) {
		if(isLinear == null) {
			isLinear = true;
		}
		let shape = new sketcher_draw_Gradient(color0,color1,isLinear);
		this.baseArray.push(shape);
		return shape;
	}
	makeImage(x,y,href,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = false;
		}
		let shape = new sketcher_draw_Image(x,y,href,width,height,isCenter);
		this.baseArray.push(shape);
		return shape;
	}
	makeImageFromImage(x,y,img,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = false;
		}
		let shape = new sketcher_draw_Image(x,y,"",width,height,isCenter);
		shape.set_image(img);
		this.baseArray.push(shape);
		return shape;
	}
	makeGroup(array) {
		let shape = new sketcher_draw_Group(array);
		let _g = 0;
		let _g1 = array.length;
		while(_g < _g1) {
			let j = _g++;
			let _base = array[j];
			let _g1 = 0;
			let _g2 = this.baseArray.length;
			while(_g1 < _g2) {
				let i = _g1++;
				let base = this.baseArray[i];
				if(base == _base) {
					this.baseArray[i] = null;
				}
			}
		}
		this.baseArray.push(shape);
		return shape;
	}
	makeMask(array) {
		let shape = new sketcher_draw_Mask(array);
		let _g = 0;
		let _g1 = array.length;
		while(_g < _g1) {
			let j = _g++;
			let _base = array[j];
			let _g1 = 0;
			let _g2 = this.baseArray.length;
			while(_g1 < _g2) {
				let i = _g1++;
				let base = this.baseArray[i];
				if(base == _base) {
					this.baseArray[i] = null;
				}
			}
		}
		this.baseArray.push(shape);
		return shape;
	}
	makeMarker(array) {
		let shape = new sketcher_draw_Marker(array);
		let _g = 0;
		let _g1 = array.length;
		while(_g < _g1) {
			let j = _g++;
			let _base = array[j];
			let _g1 = 0;
			let _g2 = this.baseArray.length;
			while(_g1 < _g2) {
				let i = _g1++;
				let base = this.baseArray[i];
				if(base == _base) {
					this.baseArray[i] = null;
				}
			}
		}
		this.baseArray.push(shape);
		return shape;
	}
	makeMirror(dir) {
		let shape = new sketcher_draw_Mirror(dir);
		if(this.settings.get_type().toLowerCase() == "svg") {
			shape.baseArray = this.baseArray;
		}
		this.baseArray.push(shape);
		return shape;
	}
	makeX(x,y,color) {
		if(color == null) {
			color = "red";
		}
		let cx = Math.round(x);
		let cy = Math.round(y);
		let r = 5;
		let polyline = new sketcher_draw_PolyLine([cx,cy,cx - r,cy,cx,cy,cx + r,cy,cx,cy,cx,cy - r,cx,cy,cx,cy + r,cx,cy]);
		polyline.set_id("registration_marker_" + polyline.get_count());
		polyline.set_desc("Registration Marker\nx: " + cx + ", y: " + cy);
		polyline.set_strokeColor(color);
		polyline.set_strokeWeight(1);
		polyline.set_fillColor(color);
		polyline.set_lineCap("butt");
		polyline.set_lineJoin("miter");
		this.baseArray.push(polyline);
		return polyline;
	}
	makeXCross(x,y,size) {
		let cx = x;
		let cy = y;
		let r = size;
		let polyline = new sketcher_draw_PolyLine([cx,cy,cx - r,cy,cx,cy,cx + r,cy,cx,cy,cx,cy - r,cx,cy,cx,cy + r,cx,cy]);
		polyline.set_id("xcross_" + polyline.get_count());
		polyline.set_desc("xcross\nx: " + cx + ", y: " + cy + ", size:" + size);
		polyline.set_lineCap("butt");
		polyline.set_lineJoin("bevel");
		this.baseArray.push(polyline);
		return polyline;
	}
	getBaseArray() {
		return this.baseArray;
	}
}
SketcherCore.__name__ = "SketcherCore";
Object.assign(SketcherCore.prototype, {
	__class__: SketcherCore
});
class SketcherSVG extends SketcherCore {
	constructor(settings) {
		SketcherCore._hx_skip_constructor = true;
		super();
		SketcherCore._hx_skip_constructor = false;
		this._hx_constructor(settings);
	}
	_hx_constructor(settings) {
		this.WRAPPER_ID = "sketcher_wrapper";
		this.SVG_ID = "sketcher_svg";
		this.WEBGL_ID = "sketcher_canvas_webgl";
		this.CANVAS_ID = "sketcher_canvas";
		super._hx_constructor();
		this.settings = settings;
		Globals.w = settings.get_width();
		Globals.h = settings.get_height();
		Globals.w2 = settings.get_width() / 2;
		Globals.h2 = settings.get_height() / 2;
		let u = new Date().getTime();
		if("" + u == SketcherSVG.UNIQ_ID) {
			SketcherSVG.UNIQ_ID = "" + u + "_1";
		} else {
			SketcherSVG.UNIQ_ID = "" + u;
		}
		SketcherSVG.SVG_UNIQ_ID = "" + this.WRAPPER_ID + "_" + this.SVG_ID + "_" + SketcherSVG.UNIQ_ID;
	}
	setup() {
		let svgW = "" + this.settings.get_width();
		let svgH = "" + this.settings.get_height();
		let svgViewBox = "0 0 " + this.settings.get_width() + " " + this.settings.get_height();
		if(this.settings.get_sizeType() != null) {
			svgW = "" + Math.round(sketcher_util_MathUtil.px2mm(this.settings.get_width())) + this.settings.get_sizeType();
			svgH = "" + Math.round(sketcher_util_MathUtil.px2mm(this.settings.get_height())) + this.settings.get_sizeType();
		}
		if(this.settings.get_viewBox() != null) {
			svgViewBox = "" + this.settings.get_viewBox()[0] + " " + this.settings.get_viewBox()[1] + " " + this.settings.get_viewBox()[2] + " " + this.settings.get_viewBox()[3];
		}
		let _xml = "<?xml version=\"1.0\" standalone=\"no\"?><svg width=\"" + svgW + "\" height=\"" + svgH + "\" viewBox=\"" + svgViewBox + "\" version=\"1.1\" id=\"" + SketcherSVG.SVG_UNIQ_ID + "\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"></svg>";
		return this;
	}
	update() {
		let svgW = "" + this.settings.get_width();
		let svgH = "" + this.settings.get_height();
		let svgViewBox = "0 0 " + this.settings.get_width() + " " + this.settings.get_height();
		if(this.settings.get_sizeType() != null) {
			svgW += "" + this.settings.get_sizeType();
			svgH += "" + this.settings.get_sizeType();
		}
		if(this.settings.get_viewBox() != null) {
			svgViewBox = "" + this.settings.get_viewBox()[0] + " " + this.settings.get_viewBox()[1] + " " + this.settings.get_viewBox()[2] + " " + this.settings.get_viewBox()[3];
		}
		let _xml = "<?xml version=\"1.0\" standalone=\"no\"?><svg width=\"" + svgW + "\" height=\"" + svgH + "\" viewBox=\"" + svgViewBox + "\" version=\"1.1\" id=\"" + SketcherSVG.SVG_UNIQ_ID + "\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\">";
		let svgInnerHtml = "";
		let content = "";
		let defs = "";
		let _g = 0;
		let _g1 = this.baseArray.length;
		while(_g < _g1) {
			let i = _g++;
			let base = this.baseArray[i];
			if(base == null) {
				continue;
			}
			let draw = base.svg(this.settings);
			switch(base.type) {
			case "gradient":case "marker":case "mask":
				defs += draw;
				break;
			default:
				content += draw;
			}
		}
		_xml += "<defs>" + defs + "</defs>";
		_xml += content + "</svg>";
		svgInnerHtml += "<defs>" + defs + "</defs>";
		svgInnerHtml += content + "</svg>";
		let svg = _xml;
		return svg;
	}
	static create(settings) {
		let sketcher = new SketcherSVG(settings);
		sketcher.baseArray = [];
		return sketcher;
	}
}
SketcherSVG.__name__ = "SketcherSVG";
SketcherSVG.__super__ = SketcherCore;
Object.assign(SketcherSVG.prototype, {
	__class__: SketcherSVG
});
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
	static parseInt(x) {
		if(x != null) {
			let _g = 0;
			let _g1 = x.length;
			while(_g < _g1) {
				let i = _g++;
				let c = x.charCodeAt(i);
				if(c <= 8 || c >= 14 && c != 32 && c != 45) {
					let nc = x.charCodeAt(i + 1);
					let v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
					if(isNaN(v)) {
						return null;
					} else {
						return v;
					}
				}
			}
		}
		return null;
	}
}
Std.__name__ = "Std";
class StringBuf {
	constructor() {
		this.b = "";
	}
}
StringBuf.__name__ = "StringBuf";
Object.assign(StringBuf.prototype, {
	__class__: StringBuf
});
class StringTools {
	static htmlEscape(s,quotes) {
		let buf_b = "";
		let _g_offset = 0;
		let _g_s = s;
		while(_g_offset < _g_s.length) {
			let s = _g_s;
			let index = _g_offset++;
			let c = s.charCodeAt(index);
			if(c >= 55296 && c <= 56319) {
				c = c - 55232 << 10 | s.charCodeAt(index + 1) & 1023;
			}
			let c1 = c;
			if(c1 >= 65536) {
				++_g_offset;
			}
			let code = c1;
			switch(code) {
			case 34:
				if(quotes) {
					buf_b += "&quot;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 38:
				buf_b += "&amp;";
				break;
			case 39:
				if(quotes) {
					buf_b += "&#039;";
				} else {
					buf_b += String.fromCodePoint(code);
				}
				break;
			case 60:
				buf_b += "&lt;";
				break;
			case 62:
				buf_b += "&gt;";
				break;
			default:
				buf_b += String.fromCodePoint(code);
			}
		}
		return buf_b;
	}
	static isSpace(s,pos) {
		let c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		let l = s.length;
		let r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
	static replace(s,sub,by) {
		return s.split(sub).join(by);
	}
	static hex(n,digits) {
		let s = "";
		let hexChars = "0123456789ABCDEF";
		while(true) {
			s = hexChars.charAt(n & 15) + s;
			n >>>= 4;
			if(!(n > 0)) {
				break;
			}
		}
		if(digits != null) {
			while(s.length < digits) s = "0" + s;
		}
		return s;
	}
}
StringTools.__name__ = "StringTools";
class XmlType {
	static toString(this1) {
		switch(this1) {
		case 0:
			return "Element";
		case 1:
			return "PCData";
		case 2:
			return "CData";
		case 3:
			return "Comment";
		case 4:
			return "DocType";
		case 5:
			return "ProcessingInstruction";
		case 6:
			return "Document";
		}
	}
}
class Xml {
	constructor(nodeType) {
		this.nodeType = nodeType;
		this.children = [];
		this.attributeMap = new haxe_ds_StringMap();
	}
	get(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return this.attributeMap.h[att];
	}
	set(att,value) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		this.attributeMap.h[att] = value;
	}
	exists(att) {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return Object.prototype.hasOwnProperty.call(this.attributeMap.h,att);
	}
	attributes() {
		if(this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.attributeMap.h);
	}
	addChild(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	removeChild(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (this.nodeType == null ? "null" : XmlType.toString(this.nodeType)));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	toString() {
		return haxe_xml_Printer.print(this);
	}
	static parse(str) {
		return haxe_xml_Parser.parse(str);
	}
	static createElement(name) {
		let xml = new Xml(Xml.Element);
		if(xml.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element but found " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeName = name;
		return xml;
	}
	static createPCData(data) {
		let xml = new Xml(Xml.PCData);
		if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeValue = data;
		return xml;
	}
	static createCData(data) {
		let xml = new Xml(Xml.CData);
		if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeValue = data;
		return xml;
	}
	static createComment(data) {
		let xml = new Xml(Xml.Comment);
		if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeValue = data;
		return xml;
	}
	static createDocType(data) {
		let xml = new Xml(Xml.DocType);
		if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeValue = data;
		return xml;
	}
	static createProcessingInstruction(data) {
		let xml = new Xml(Xml.ProcessingInstruction);
		if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, unexpected " + (xml.nodeType == null ? "null" : XmlType.toString(xml.nodeType)));
		}
		xml.nodeValue = data;
		return xml;
	}
	static createDocument() {
		return new Xml(Xml.Document);
	}
}
Xml.__name__ = "Xml";
Object.assign(Xml.prototype, {
	__class__: Xml
});
class haxe_IMap {
}
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	unwrap() {
		return this.__nativeException;
	}
	get_native() {
		return this.__nativeException;
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			return e;
		}
	}
}
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
});
class haxe_Log {
	static formatOutput(v,infos) {
		let str = Std.string(v);
		if(infos == null) {
			return str;
		}
		let pstr = infos.fileName + ":" + infos.lineNumber;
		if(infos.customParams != null) {
			let _g = 0;
			let _g1 = infos.customParams;
			while(_g < _g1.length) {
				let v = _g1[_g];
				++_g;
				str += ", " + Std.string(v);
			}
		}
		return pstr + ": " + str;
	}
	static trace(v,infos) {
		let str = haxe_Log.formatOutput(v,infos);
		if(typeof(console) != "undefined" && console.log != null) {
			console.log(str);
		}
	}
}
haxe_Log.__name__ = "haxe.Log";
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
	unwrap() {
		return this.value;
	}
}
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
});
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
}
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
});
class haxe_ds__$StringMap_StringMapKeyIterator {
	constructor(h) {
		this.h = h;
		this.keys = Object.keys(h);
		this.length = this.keys.length;
		this.current = 0;
	}
	hasNext() {
		return this.current < this.length;
	}
	next() {
		return this.keys[this.current++];
	}
}
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
Object.assign(haxe_ds__$StringMap_StringMapKeyIterator.prototype, {
	__class__: haxe_ds__$StringMap_StringMapKeyIterator
});
class haxe_io_Bytes {
	constructor(data) {
		this.length = data.byteLength;
		this.b = new Uint8Array(data);
		this.b.bufferValue = data;
		data.hxBytes = this;
		data.bytes = this.b;
	}
}
haxe_io_Bytes.__name__ = "haxe.io.Bytes";
Object.assign(haxe_io_Bytes.prototype, {
	__class__: haxe_io_Bytes
});
class haxe_io_Eof {
	constructor() {
	}
	toString() {
		return "Eof";
	}
}
haxe_io_Eof.__name__ = "haxe.io.Eof";
Object.assign(haxe_io_Eof.prototype, {
	__class__: haxe_io_Eof
});
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__:true,__constructs__:null
	,Blocked: {_hx_name:"Blocked",_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_name:"Overflow",_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_name:"OutsideBounds",_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_._hx_name="Custom",$_.__params__ = ["e"],$_)
};
haxe_io_Error.__constructs__ = [haxe_io_Error.Blocked,haxe_io_Error.Overflow,haxe_io_Error.OutsideBounds,haxe_io_Error.Custom];
class haxe_io_Input {
}
haxe_io_Input.__name__ = "haxe.io.Input";
class haxe_io_Output {
}
haxe_io_Output.__name__ = "haxe.io.Output";
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
});
class haxe_xml_XmlParserException {
	constructor(message,xml,position) {
		this.xml = xml;
		this.message = message;
		this.position = position;
		this.lineNumber = 1;
		this.positionAtLine = 0;
		let _g = 0;
		let _g1 = position;
		while(_g < _g1) {
			let i = _g++;
			let c = xml.charCodeAt(i);
			if(c == 10) {
				this.lineNumber++;
				this.positionAtLine = 0;
			} else if(c != 13) {
				this.positionAtLine++;
			}
		}
	}
	toString() {
		let c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
}
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
Object.assign(haxe_xml_XmlParserException.prototype, {
	__class__: haxe_xml_XmlParserException
});
class haxe_xml_Parser {
	static parse(str,strict) {
		if(strict == null) {
			strict = false;
		}
		let doc = Xml.createDocument();
		haxe_xml_Parser.doParse(str,strict,0,doc);
		return doc;
	}
	static doParse(str,strict,p,parent) {
		if(p == null) {
			p = 0;
		}
		let xml = null;
		let state = 1;
		let next = 1;
		let aname = null;
		let start = 0;
		let nsubs = 0;
		let nbrackets = 0;
		let buf = new StringBuf();
		let escapeNext = 1;
		let attrValQuote = -1;
		while(p < str.length) {
			let c = str.charCodeAt(p);
			switch(state) {
			case 0:
				switch(c) {
				case 9:case 10:case 13:case 32:
					break;
				default:
					state = next;
					continue;
				}
				break;
			case 1:
				if(c == 60) {
					state = 0;
					next = 2;
				} else {
					start = p;
					state = 13;
					continue;
				}
				break;
			case 2:
				switch(c) {
				case 33:
					if(str.charCodeAt(p + 1) == 91) {
						p += 2;
						if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
							throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
						}
						p += 5;
						state = 17;
						start = p + 1;
					} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
						if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
							throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
						}
						p += 8;
						state = 16;
						start = p + 1;
					} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected <!--",str,p));
					} else {
						p += 2;
						state = 15;
						start = p + 1;
					}
					break;
				case 47:
					if(parent == null) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
					}
					start = p + 1;
					state = 0;
					next = 10;
					break;
				case 63:
					state = 14;
					start = p;
					break;
				default:
					state = 3;
					start = p;
					continue;
				}
				break;
			case 3:
				if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
					if(p == start) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
					}
					xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
					parent.addChild(xml);
					++nsubs;
					state = 0;
					next = 4;
					continue;
				}
				break;
			case 4:
				switch(c) {
				case 47:
					state = 11;
					break;
				case 62:
					state = 9;
					break;
				default:
					state = 5;
					start = p;
					continue;
				}
				break;
			case 5:
				if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
					if(start == p) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected attribute name",str,p));
					}
					let tmp = HxOverrides.substr(str,start,p - start);
					aname = tmp;
					if(xml.exists(aname)) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
					}
					state = 0;
					next = 6;
					continue;
				}
				break;
			case 6:
				if(c == 61) {
					state = 0;
					next = 7;
				} else {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected =",str,p));
				}
				break;
			case 7:
				switch(c) {
				case 34:case 39:
					buf = new StringBuf();
					state = 8;
					start = p + 1;
					attrValQuote = c;
					break;
				default:
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected \"",str,p));
				}
				break;
			case 8:
				switch(c) {
				case 38:
					let len = p - start;
					buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
					state = 18;
					escapeNext = 8;
					start = p + 1;
					break;
				case 60:case 62:
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
					} else if(c == attrValQuote) {
						let len = p - start;
						buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
						let val = buf.b;
						buf = new StringBuf();
						xml.set(aname,val);
						state = 0;
						next = 4;
					}
					break;
				default:
					if(c == attrValQuote) {
						let len = p - start;
						buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
						let val = buf.b;
						buf = new StringBuf();
						xml.set(aname,val);
						state = 0;
						next = 4;
					}
				}
				break;
			case 9:
				p = haxe_xml_Parser.doParse(str,strict,p,xml);
				start = p;
				state = 1;
				break;
			case 10:
				if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
					if(start == p) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected node name",str,p));
					}
					let v = HxOverrides.substr(str,start,p - start);
					if(parent == null || parent.nodeType != 0) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
					}
					if(parent.nodeType != Xml.Element) {
						throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
					}
					if(v != parent.nodeName) {
						if(parent.nodeType != Xml.Element) {
							throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
						}
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
					}
					state = 0;
					next = 12;
					continue;
				}
				break;
			case 11:
				if(c == 62) {
					state = 1;
				} else {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
				}
				break;
			case 12:
				if(c == 62) {
					if(nsubs == 0) {
						parent.addChild(Xml.createPCData(""));
					}
					return p;
				} else {
					throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Expected >",str,p));
				}
				break;
			case 13:
				if(c == 60) {
					let len = p - start;
					buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
					let child = Xml.createPCData(buf.b);
					buf = new StringBuf();
					parent.addChild(child);
					++nsubs;
					state = 0;
					next = 2;
				} else if(c == 38) {
					let len = p - start;
					buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
					state = 18;
					escapeNext = 13;
					start = p + 1;
				}
				break;
			case 14:
				if(c == 63 && str.charCodeAt(p + 1) == 62) {
					++p;
					let str1 = HxOverrides.substr(str,start + 1,p - start - 2);
					parent.addChild(Xml.createProcessingInstruction(str1));
					++nsubs;
					state = 1;
				}
				break;
			case 15:
				if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
					parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
					++nsubs;
					p += 2;
					state = 1;
				}
				break;
			case 16:
				if(c == 91) {
					++nbrackets;
				} else if(c == 93) {
					--nbrackets;
				} else if(c == 62 && nbrackets == 0) {
					parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
					++nsubs;
					state = 1;
				}
				break;
			case 17:
				if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
					let child = Xml.createCData(HxOverrides.substr(str,start,p - start));
					parent.addChild(child);
					++nsubs;
					p += 2;
					state = 1;
				}
				break;
			case 18:
				if(c == 59) {
					let s = HxOverrides.substr(str,start,p - start);
					if(s.charCodeAt(0) == 35) {
						let c = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
						buf.b += String.fromCodePoint(c);
					} else if(!Object.prototype.hasOwnProperty.call(haxe_xml_Parser.escapes.h,s)) {
						if(strict) {
							throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						buf.b += Std.string(haxe_xml_Parser.escapes.h[s]);
					}
					start = p + 1;
					state = escapeNext;
				} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
					if(strict) {
						throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
					}
					buf.b += String.fromCodePoint(38);
					let len = p - start;
					buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
					--p;
					start = p + 1;
					state = escapeNext;
				}
				break;
			}
			++p;
		}
		if(state == 1) {
			start = p;
			state = 13;
		}
		if(state == 13) {
			if(parent.nodeType == 0) {
				if(parent.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (parent.nodeType == null ? "null" : XmlType.toString(parent.nodeType)));
				}
				throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
			}
			if(p != start || nsubs == 0) {
				let len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				parent.addChild(Xml.createPCData(buf.b));
				++nsubs;
			}
			return p;
		}
		if(!strict && state == 18 && escapeNext == 13) {
			buf.b += String.fromCodePoint(38);
			let len = p - start;
			buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
			return p;
		}
		throw haxe_Exception.thrown(new haxe_xml_XmlParserException("Unexpected end",str,p));
	}
}
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
class haxe_xml_Printer {
	constructor(pretty) {
		this.output = new StringBuf();
		this.pretty = pretty;
	}
	writeNode(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeName);
			let attribute = value.attributes();
			while(attribute.hasNext()) {
				let attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				let input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				let _g_current = 0;
				let _g_array = value.children;
				while(_g_current < _g_array.length) {
					let child = _g_array[_g_current++];
					this.writeNode(child,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, expected Element but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			let nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				let input = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			let commentContent = value.nodeValue;
			let _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			let input = StringTools.trim(commentContent);
			this.output.b += Std.string(input);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, unexpected " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
			}
			let _g_current = 0;
			let _g_array = value.children;
			while(_g_current < _g_array.length) {
				let child = _g_array[_g_current++];
				this.writeNode(child,tabs);
			}
			break;
		}
	}
	hasChildren(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw haxe_Exception.thrown("Bad node type, expected Element or Document but found " + (value.nodeType == null ? "null" : XmlType.toString(value.nodeType)));
		}
		let _g_current = 0;
		let _g_array = value.children;
		while(_g_current < _g_array.length) {
			let child = _g_array[_g_current++];
			switch(child.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child.nodeType == Xml.Document || child.nodeType == Xml.Element) {
					throw haxe_Exception.thrown("Bad node type, unexpected " + (child.nodeType == null ? "null" : XmlType.toString(child.nodeType)));
				}
				if(StringTools.ltrim(child.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	static print(xml,pretty) {
		if(pretty == null) {
			pretty = false;
		}
		let printer = new haxe_xml_Printer(pretty);
		printer.writeNode(xml,"");
		return printer.output.b;
	}
}
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
Object.assign(haxe_xml_Printer.prototype, {
	__class__: haxe_xml_Printer
});
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let con = e.__constructs__[o._hx_index];
				let n = con._hx_name;
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		if(cc == null) {
			return false;
		}
		if(cc == cl) {
			return true;
		}
		let intf = cc.__interfaces__;
		if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
			let _g = 0;
			let _g1 = intf.length;
			while(_g < _g1) {
				let i = _g++;
				let i1 = intf[i];
				if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
					return true;
				}
			}
		}
		return js_Boot.__interfLoop(cc.__super__,cl);
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __cast(o,t) {
		if(o == null || js_Boot.__instanceof(o,t)) {
			return o;
		} else {
			throw haxe_Exception.thrown("Cannot cast " + Std.string(o) + " to " + Std.string(t));
		}
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = "js.Boot";
class js_html__$CanvasElement_CanvasUtil {
	static getContextWebGL(canvas,attribs) {
		let name = "webgl";
		let ctx = canvas.getContext(name,attribs);
		if(ctx != null) {
			return ctx;
		}
		let name1 = "experimental-webgl";
		let ctx1 = canvas.getContext(name1,attribs);
		if(ctx1 != null) {
			return ctx1;
		}
		return null;
	}
}
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
var js_node_Fs = require("fs");
class js_node_KeyValue {
	static get_key(this1) {
		return this1[0];
	}
	static get_value(this1) {
		return this1[1];
	}
}
var js_node_Path = require("path");
var js_node_buffer_Buffer = require("buffer").Buffer;
class js_node_stream_WritableNewOptionsAdapter {
	static from(options) {
		if(!Object.prototype.hasOwnProperty.call(options,"final")) {
			Object.defineProperty(options,"final",{ get : function() {
				return options.final_;
			}});
		}
		return options;
	}
}
class js_node_url_URLSearchParamsEntry {
	static _new(name,value) {
		let this1 = [name,value];
		return this1;
	}
	static get_name(this1) {
		return this1[0];
	}
	static get_value(this1) {
		return this1[1];
	}
}
class sketcher_AST {
}
sketcher_AST.__name__ = "sketcher.AST";
class sketcher_draw_AST {
}
sketcher_draw_AST.__name__ = "sketcher.draw.AST";
class sketcher_draw_Base {
	constructor(name) {
		if(sketcher_draw_Base._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(name);
	}
	_hx_constructor(name) {
		this.transArr = [];
		this.dash = [];
		this.xml = Xml.createElement(name);
		sketcher_draw_Base.COUNT++;
		this.set_id(this.get_id());
	}
	setID(id) {
		this.set_id(id);
	}
	setMask(id) {
		this.xml.set("mask","url(#" + id + ")");
		this.set_maskID(id);
	}
	setMarkerEnd(id) {
		this.xml.set("marker-end","url(#" + id + ")");
		this.set_markerID(id);
	}
	setMarkerStart(id) {
		this.xml.set("marker-start","url(#" + id + ")");
		this.set_markerID(id);
	}
	setMarker(id,pos) {
		if(pos == null) {
			pos = "end";
		}
		let tmp = pos != "end" || pos != "start";
		this.xml.set("marker-" + pos,"url(#" + id + ")");
		this.set_markerID(id);
	}
	setPosition(x,y) {
		this.set_move({ x : x, y : y});
		if(y == null) {
			this.set_move({ x : x, y : 0});
		}
		let str = "translate(" + x;
		if(y != null) {
			str += "," + y;
		}
		str += ")";
		this.transArr.push(str);
	}
	setMove(x,y) {
		this.setPosition(x,y);
	}
	setPlusPosition(x,y) {
		this.setPosition(x,y);
	}
	setRotate(degree,rx,ry) {
		this.rotate = degree;
		this.set_rx(rx);
		this.set_ry(ry);
		let str = "rotate(" + degree;
		if(rx != null) {
			str += "," + rx;
		}
		if(ry != null) {
			str += "," + ry;
		}
		str += ")";
		this.transArr.push(str);
	}
	setScale(x,y) {
		let str = "scale(" + x;
		if(y != null) {
			str += "," + y;
		}
		str += ")";
		this.transArr.push(str);
	}
	getTransform() {
		let str = "";
		let _g = 0;
		let _g1 = this.transArr.length;
		while(_g < _g1) {
			let i = _g++;
			str += this.transArr[i] + " ";
		}
		return str;
	}
	setStroke(color,weight,opacity) {
		if(opacity == null) {
			opacity = 1;
		}
		if(weight == null) {
			weight = 1;
		}
		this.set_strokeColor(color);
		this.set_strokeWeight(weight);
		this.set_strokeOpacity(opacity);
		return this;
	}
	noStroke() {
		this.set_lineWeight(0);
		this.set_strokeColor("transparant");
		this.set_strokeOpacity(0);
		return this;
	}
	setFill(color,opacity) {
		if(opacity == null) {
			opacity = 1;
		}
		this.set_fillColor(color);
		this.set_fillOpacity(opacity);
		return this;
	}
	noFill() {
		this.set_fillOpacity(0);
		this.set_fillColor("transparant");
		return this;
	}
	setShadow(color,blur,offsetx,offsety) {
		if(offsety == null) {
			offsety = 0;
		}
		if(offsetx == null) {
			offsetx = 0;
		}
		if(blur == null) {
			blur = 0;
		}
		this.set_shadowColor(color);
		this.set_shadowBlur(blur);
		this.set_shadowOffsetX(offsetx);
		this.set_shadowOffsetY(offsety);
	}
	setLineEnds(linecap,linejoin) {
		if(linejoin == null) {
			linejoin = "round";
		}
		if(linecap == null) {
			linecap = "round";
		}
		this.set_lineCap(linecap);
		this.set_lineJoin(linejoin);
		return this;
	}
	setClass(className) {
		this.set_className(className);
		return this;
	}
	clone() {
		haxe_Log.trace("WIP",{ fileName : "src/sketcher/draw/Base.hx", lineNumber : 284, className : "sketcher.draw.Base", methodName : "clone"});
		return js_Boot.__cast(JSON.parse(JSON.stringify(this)) , sketcher_draw_Base);
	}
	convertID(id) {
		return StringTools.replace(id.toLowerCase()," ","_");
	}
	useDefaultsCanvas() {
		if(this.get_lineWeight() == null) {
			this.set_lineWeight(0);
		}
		if(this.get_fillColor() == null) {
			this.set_fillColor("#000000");
		}
		if(this.get_strokeColor() == null) {
			this.set_strokeColor("#000000");
			this.set_strokeOpacity(0);
		}
		if(this.get_fillOpacity() == null) {
			this.set_fillOpacity(1);
		}
		if(this.get_strokeOpacity() == null) {
			this.set_strokeOpacity(1);
		}
		if(this.get_lineCap() == null) {
			this.set_lineCap("butt");
		}
		if(this.get_lineJoin() == null) {
			this.set_lineJoin("miter");
		}
	}
	get_maskID() {
		return this.maskID;
	}
	set_maskID(value) {
		return this.maskID = value;
	}
	get_markerID() {
		return this.markerID;
	}
	set_markerID(value) {
		return this.markerID = value;
	}
	get_id() {
		if(this.id == null) {
			this.set_id(this.getName() + "_" + sketcher_draw_Base.COUNT);
			sketcher_draw_Base.COUNT++;
		}
		return this.id;
	}
	set_id(value) {
		value = this.convertID(value);
		if(this.xml != null) {
			this.xml.set("id",value == null ? "null" : "" + value);
			this.xml.set("data-count",Std.string(sketcher_draw_Base.COUNT));
		}
		return this.id = value;
	}
	get_fill() {
		return this.fill;
	}
	set_fill(value) {
		this.xml.set("fill",value == null ? "null" : "" + value);
		return this.fill = value;
	}
	get_fillColor() {
		return this.get_fill();
	}
	set_fillColor(value) {
		return this.set_fill(value);
	}
	get_fillGradientColor() {
		return this.get_fill();
	}
	set_fillGradientColor(value) {
		value = this.convertID(value);
		return this.set_fill("url(#" + value + ")");
	}
	get_stroke() {
		return this.stroke;
	}
	set_stroke(value) {
		this.xml.set("stroke",value == null ? "null" : "" + value);
		return this.stroke = value;
	}
	get_strokeColor() {
		return this.get_stroke();
	}
	set_strokeColor(value) {
		return this.set_stroke(value);
	}
	get_lineWeight() {
		return this.lineWeight;
	}
	set_lineWeight(value) {
		this.xml.set("stroke-width",value == null ? "null" : "" + value);
		return this.lineWeight = value;
	}
	get_strokeWeight() {
		return this.get_lineWeight();
	}
	set_strokeWeight(value) {
		return this.set_lineWeight(value);
	}
	get_opacity() {
		return this.opacity;
	}
	set_opacity(value) {
		let v = sketcher_util_MathUtil.clamp(value,0,1);
		this.set_fillOpacity(v);
		this.set_strokeOpacity(v);
		return this.opacity = v;
	}
	get_strokeOpacity() {
		return this.strokeOpacity;
	}
	set_strokeOpacity(value) {
		let v = sketcher_util_MathUtil.clamp(value,0,1);
		this.xml.set("stroke-opacity",v == null ? "null" : "" + v);
		return this.strokeOpacity = v;
	}
	get_fillOpacity() {
		return this.fillOpacity;
	}
	set_fillOpacity(value) {
		let v = sketcher_util_MathUtil.clamp(value,0,1);
		this.xml.set("fill-opacity",v == null ? "null" : "" + v);
		return this.fillOpacity = v;
	}
	get_y() {
		return this.y;
	}
	set_y(value) {
		return this.y = value;
	}
	get_x() {
		return this.x;
	}
	set_x(value) {
		return this.x = value;
	}
	get_rotate() {
		return this.rotate;
	}
	set_rotate(value) {
		return this.rotate = value;
	}
	get_rx() {
		return this.rx;
	}
	set_rx(value) {
		return this.rx = value;
	}
	get_ry() {
		return this.ry;
	}
	set_ry(value) {
		return this.ry = value;
	}
	get_move() {
		return this.move;
	}
	set_move(value) {
		return this.move = value;
	}
	get_transform() {
		return this.transform;
	}
	set_transform(value) {
		return this.transform = value;
	}
	get_dash() {
		return this.dash;
	}
	set_dash(value) {
		let str = "";
		let _g = 0;
		let _g1 = value.length;
		while(_g < _g1) {
			let i = _g++;
			str += value[i];
			if(i != value.length - 1) {
				str += ",";
			}
		}
		this.xml.set("stroke-dasharray",str);
		return this.dash = value;
	}
	get_desc() {
		return this.desc;
	}
	set_desc(value) {
		return this.desc = value;
	}
	get_lineCap() {
		return this.lineCap;
	}
	set_lineCap(value) {
		this.xml.set("stroke-linecap",Std.string(value));
		return this.lineCap = value;
	}
	get_lineJoin() {
		return this.lineJoin;
	}
	set_lineJoin(value) {
		this.xml.set("stroke-linejoin",Std.string(value));
		return this.lineJoin = value;
	}
	get_shadowColor() {
		return this.shadowColor;
	}
	set_shadowColor(value) {
		return this.shadowColor = value;
	}
	get_shadowBlur() {
		return this.shadowBlur;
	}
	set_shadowBlur(value) {
		return this.shadowBlur = value;
	}
	get_shadowOffsetX() {
		return this.shadowOffsetX;
	}
	set_shadowOffsetX(value) {
		return this.shadowOffsetX = value;
	}
	get_shadowOffsetY() {
		return this.shadowOffsetY;
	}
	set_shadowOffsetY(value) {
		return this.shadowOffsetY = value;
	}
	get_isVisible() {
		return this.isVisible;
	}
	set_isVisible(value) {
		let _opacity = 0;
		if(value) {
			_opacity = 1;
		}
		this.set_fillOpacity(_opacity);
		this.set_strokeOpacity(_opacity);
		return this.isVisible = value;
	}
	get_count() {
		return sketcher_draw_Base.COUNT;
	}
	get_className() {
		return this.className;
	}
	set_className(value) {
		this.xml.set("class",value == null ? "null" : "" + value);
		return this.className = value;
	}
	getName() {
		let c = js_Boot.getClass(this);
		let name = c.__name__;
		return "" + name;
	}
	toObject() {
		let c = js_Boot.getClass(this);
		let name = c.__name__;
		return JSON.parse(JSON.stringify(this));
	}
	toString() {
		let c = js_Boot.getClass(this);
		let name = c.__name__;
		return "" + name + ": " + Std.string(JSON.parse(JSON.stringify(this)));
	}
	toSvg() {
		throw haxe_Exception.thrown("Not implemented yet");
	}
}
sketcher_draw_Base.__name__ = "sketcher.draw.Base";
Object.assign(sketcher_draw_Base.prototype, {
	__class__: sketcher_draw_Base
});
class sketcher_draw_IBase {
}
sketcher_draw_IBase.__name__ = "sketcher.draw.IBase";
sketcher_draw_IBase.__isInterface__ = true;
Object.assign(sketcher_draw_IBase.prototype, {
	__class__: sketcher_draw_IBase
});
class sketcher_draw_Background extends sketcher_draw_Base {
	constructor(color) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(color);
	}
	_hx_constructor(color) {
		this.type = "background";
		super._hx_constructor("rect");
		this.set_fillColor(color);
		this.set_id("background-layer");
	}
	svg(settings) {
		this.xml.set("x","0");
		this.xml.set("y","0");
		this.xml.set("width",Std.string(Globals.w));
		this.xml.set("height",Std.string(Globals.h));
		return haxe_xml_Printer.print(this.xml);
	}
	ctx(ctx) {
		this.useDefaultsCanvas();
		let value = this.get_fillColor();
		let _r = 0;
		let _g = 0;
		let _b = 0;
		let _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		let _fillColor_r = _r;
		let _fillColor_g = _g;
		let _fillColor_b = _b;
		let _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		ctx.beginPath();
		ctx.rect(0,0,Globals.w,Globals.h);
		ctx.fill();
		ctx.closePath();
	}
	gl(gl) {
		if(!sketcher_draw_Background.ISWARN) {
			$global.console.warn("webgl is not implemented yet");
			sketcher_draw_Background.ISWARN = true;
		}
		let c = "#ff3333";
		let value = c;
		let _r = 0;
		let _g = 0;
		let _b = 0;
		let _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		let rgba_r = _r;
		let rgba_g = _g;
		let rgba_b = _b;
		let rgba_a = _a;
		gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);
		gl.clearColor(rgba_r / 255,rgba_g / 255,rgba_b / 255,rgba_a);
		gl.clear(16384);
	}
}
sketcher_draw_Background.__name__ = "sketcher.draw.Background";
sketcher_draw_Background.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Background.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_Background.prototype, {
	__class__: sketcher_draw_Background
});
class sketcher_draw_Button extends sketcher_draw_Base {
	constructor(x,y,width,height,isCenter) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(x,y,width,height,isCenter);
	}
	_hx_constructor(x,y,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		this.type = "rectangle";
		this.set_x(x);
		this.set_y(y);
		this.set_width(width);
		this.set_height(height);
		this.cx = this.get_x() - this.get_width() / 2;
		this.cy = this.get_y() - this.get_height() / 2;
		this.isCenter = isCenter;
		if(!isCenter) {
			this.cx = this.get_x();
			this.cy = this.get_y();
		}
		this.point_top_left = { x : this.cx, y : this.cy};
		this.point_top_right = { x : this.cx + this.get_width(), y : this.cy};
		this.point_bottom_left = { x : this.cx, y : this.cy + this.get_height()};
		this.point_bottom_right = { x : this.cx + this.get_width(), y : this.cy + this.get_height()};
		super._hx_constructor("rect");
	}
	svg(settings) {
		this.xml.set("x",Std.string(this.cx));
		this.xml.set("y",Std.string(this.cy));
		this.xml.set("width",Std.string(this.get_width()));
		this.xml.set("height",Std.string(this.get_height()));
		if(this.get_radius() != null) {
			this.xml.set("rx",Std.string(this.get_radius()));
			this.xml.set("ry",Std.string(this.get_radius()));
		}
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	useCanvasShadow(ctx) {
		if(this.get_shadowColor() != null) {
			ctx.shadowColor = this.get_shadowColor();
			ctx.shadowBlur = this.get_shadowBlur();
			ctx.shadowOffsetX = this.get_shadowOffsetX();
			ctx.shadowOffsetY = this.get_shadowOffsetY();
		}
	}
	ctx(ctx) {
		this.rect = Sketcher.ctx.canvas.getBoundingClientRect();
		this.scale = this.rect.width / Globals.w;
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		let value = this.get_fillColor();
		let _r = 0;
		let _g = 0;
		let _b = 0;
		let _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		let _fillColor_r = _r;
		let _fillColor_g = _g;
		let _fillColor_b = _b;
		let _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		let value1 = this.get_strokeColor();
		let _r1 = 0;
		let _g1 = 0;
		let _b1 = 0;
		let _a1 = 1;
		value1 = StringTools.replace(value1," ","");
		if(value1.indexOf("rgba") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgba(",""),")","");
			let arr = value1.split(",");
			_r1 = arr[0];
			_g1 = arr[1];
			_b1 = arr[2];
			_a1 = arr[3];
		} else if(value1.indexOf("rgb") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgb(",""),")","");
			let arr = value1.split(",");
			_r1 = arr[0];
			_g1 = arr[1];
			_b1 = arr[2];
		} else if(value1.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value1,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r1 = rgb_r;
			_g1 = rgb_g;
			_b1 = rgb_b;
		}
		let _strokeColor_r = _r1;
		let _strokeColor_g = _g1;
		let _strokeColor_b = _b1;
		let _strokeColor_a = _a1;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		if(this.get_rotate() != null && this.get_move() == null) {
			ctx.save();
			ctx.translate(this.get_x(),this.get_y());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			ctx.arc(0,0,10,0,2 * Math.PI);
			ctx.rect(-(this.get_width() / 2),-(this.get_height() / 2),this.get_width(),this.get_height());
			ctx.restore();
		}
		if(this.get_move() != null && this.get_rotate() == null) {
			ctx.save();
			ctx.translate(this.cx,this.cy);
			ctx.translate(this.get_move().x,this.get_move().y);
			ctx.rect(0,0,this.get_width(),this.get_height());
			ctx.restore();
		}
		if(this.get_rotate() == null && this.get_move() == null) {
			this.buildCanvasShape(ctx);
		}
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
		let _gthis = this;
		Sketcher.ctx.canvas.addEventListener("mousedown",function(e) {
			Globals.mouseX = e.clientX - _gthis.rect.left;
			Globals.mouseY = e.clientY - _gthis.rect.top;
			if(_gthis.isMouseOver()) {
				haxe_Log.trace("click",{ fileName : "src/sketcher/draw/Button.hx", lineNumber : 210, className : "sketcher.draw.Button", methodName : "ctx"});
			}
			return Globals.isMouseDown = true;
		});
		Sketcher.ctx.canvas.addEventListener("mousemove",function(e) {
			Globals.mouseX = e.clientX - _gthis.rect.left;
			Globals.mouseY = e.clientY - _gthis.rect.top;
			if(_gthis.isMouseOver()) {
				return Sketcher.ctx.canvas.style.cursor = "pointer";
			} else {
				return Sketcher.ctx.canvas.style.cursor = "default";
			}
		});
		window.addEventListener("mouseup",function(e) {
			if(Globals.isMouseDown == true) {
				Globals.isMouseDown = false;
			}
		});
	}
	isMouseOver() {
		if(Globals.mouseX >= this.point_top_left.x * this.scale && Globals.mouseX <= this.point_bottom_right.x * this.scale && Globals.mouseY >= this.point_top_left.y * this.scale && Globals.mouseY <= this.point_bottom_right.y * this.scale) {
			return true;
		} else {
			return false;
		}
	}
	buildCanvasShape(ctx) {
		if(this.get_radius() == null) {
			ctx.rect(this.cx,this.cy,this.get_width(),this.get_height());
		} else {
			let radius_tl = this.get_radius();
			let radius_tr = this.get_radius();
			let radius_br = this.get_radius();
			let radius_bl = this.get_radius();
			ctx.moveTo(this.cx + radius_tl,this.cy);
			ctx.lineTo(this.cx + this.get_width() - radius_tr,this.cy);
			ctx.quadraticCurveTo(this.cx + this.get_width(),this.cy,this.cx + this.get_width(),this.cy + radius_tr);
			ctx.lineTo(this.cx + this.get_width(),this.cy + this.get_height() - radius_br);
			ctx.quadraticCurveTo(this.cx + this.get_width(),this.cy + this.get_height(),this.cx + this.get_width() - radius_br,this.cy + this.get_height());
			ctx.lineTo(this.cx + radius_bl,this.cy + this.get_height());
			ctx.quadraticCurveTo(this.cx,this.cy + this.get_height(),this.cx,this.cy + this.get_height() - radius_bl);
			ctx.lineTo(this.cx,this.cy + radius_tl);
			ctx.quadraticCurveTo(this.cx,this.cy,this.cx + radius_tl,this.cy);
			ctx.closePath();
		}
	}
	gl(gl) {
	}
	get_radius() {
		return this.radius;
	}
	set_radius(value) {
		return this.radius = value;
	}
	get_width() {
		return this.width;
	}
	set_width(value) {
		return this.width = value;
	}
	get_height() {
		return this.height;
	}
	set_height(value) {
		return this.height = value;
	}
}
sketcher_draw_Button.__name__ = "sketcher.draw.Button";
sketcher_draw_Button.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Button.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_Button.prototype, {
	__class__: sketcher_draw_Button
});
class sketcher_draw_Circle extends sketcher_draw_Base {
	constructor(x,y,radius) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(x,y,radius);
	}
	_hx_constructor(x,y,radius) {
		this.type = "circle";
		this.set_x(x);
		this.set_y(y);
		this.cx = x;
		this.cy = y;
		this.set_radius(radius);
		this.point_top_left = { x : this.cx - this.get_radius(), y : this.cy - this.get_radius()};
		this.point_top_right = { x : this.cx + this.get_radius(), y : this.cy - this.get_radius()};
		this.point_bottom_left = { x : this.cx - this.get_radius(), y : this.cy + this.get_radius()};
		this.point_bottom_right = { x : this.cx + this.get_radius(), y : this.cy + this.get_radius()};
		super._hx_constructor("circle");
	}
	svg(settings) {
		this.xml.set("cx",Std.string(this.get_x()));
		this.xml.set("cy",Std.string(this.get_y()));
		this.xml.set("r",Std.string(this.get_radius()));
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		if(this.get_lineWeight() != null) {
			this.xml.set("stroke-width",Std.string(this.get_lineWeight()));
		}
		return haxe_xml_Printer.print(this.xml);
	}
	ctx(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		let value = this.get_fillColor();
		let _r = 0;
		let _g = 0;
		let _b = 0;
		let _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		let _fillColor_r = _r;
		let _fillColor_g = _g;
		let _fillColor_b = _b;
		let _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		let value1 = this.get_strokeColor();
		let _r1 = 0;
		let _g1 = 0;
		let _b1 = 0;
		let _a1 = 1;
		value1 = StringTools.replace(value1," ","");
		if(value1.indexOf("rgba") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgba(",""),")","");
			let arr = value1.split(",");
			_r1 = arr[0];
			_g1 = arr[1];
			_b1 = arr[2];
			_a1 = arr[3];
		} else if(value1.indexOf("rgb") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgb(",""),")","");
			let arr = value1.split(",");
			_r1 = arr[0];
			_g1 = arr[1];
			_b1 = arr[2];
		} else if(value1.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value1,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r1 = rgb_r;
			_g1 = rgb_g;
			_b1 = rgb_b;
		}
		let _strokeColor_r = _r1;
		let _strokeColor_g = _g1;
		let _strokeColor_b = _b1;
		let _strokeColor_a = _a1;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		if(this.get_rotate() != null) {
			ctx.save();
			ctx.translate(this.get_x(),this.get_y());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			if(this.get_move() != null) {
				ctx.translate(this.get_move().x,this.get_move().y);
			}
			ctx.arc(0,0,this.get_radius(),0,2 * Math.PI);
			ctx.restore();
		}
		if(this.get_rotate() == null) {
			ctx.arc(this.get_x(),this.get_y(),this.get_radius(),0,2 * Math.PI);
		}
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
		let tmp = this.get_rotate() != null;
	}
	gl(gl) {
	}
	debug() {
		haxe_Log.trace("" + this.toString(),{ fileName : "src/sketcher/draw/Circle.hx", lineNumber : 115, className : "sketcher.draw.Circle", methodName : "debug"});
	}
	get_radius() {
		return this.radius;
	}
	set_radius(value) {
		return this.radius = value;
	}
}
sketcher_draw_Circle.__name__ = "sketcher.draw.Circle";
sketcher_draw_Circle.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Circle.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_Circle.prototype, {
	__class__: sketcher_draw_Circle
});
class sketcher_draw_Ellipse extends sketcher_draw_Base {
	constructor(x,y,rx,ry) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(x,y,rx,ry);
	}
	_hx_constructor(x,y,rx,ry) {
		this.type = "Ellipse";
		this.set_x(x);
		this.set_y(y);
		this.set_rrx(rx);
		this.set_rry(ry);
		super._hx_constructor("ellipse");
	}
	svg(settings) {
		this.xml.set("cx",Std.string(this.get_x()));
		this.xml.set("cy",Std.string(this.get_y()));
		this.xml.set("rx",Std.string(this.get_rrx()));
		this.xml.set("ry",Std.string(this.get_rry()));
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	ctx(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		let value = this.get_fillColor();
		let _r = 0;
		let _g = 0;
		let _b = 0;
		let _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		let _fillColor_r = _r;
		let _fillColor_g = _g;
		let _fillColor_b = _b;
		let _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		let value1 = this.get_strokeColor();
		let _r1 = 0;
		let _g1 = 0;
		let _b1 = 0;
		let _a1 = 1;
		value1 = StringTools.replace(value1," ","");
		if(value1.indexOf("rgba") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgba(",""),")","");
			let arr = value1.split(",");
			_r1 = arr[0];
			_g1 = arr[1];
			_b1 = arr[2];
			_a1 = arr[3];
		} else if(value1.indexOf("rgb") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgb(",""),")","");
			let arr = value1.split(",");
			_r1 = arr[0];
			_g1 = arr[1];
			_b1 = arr[2];
		} else if(value1.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value1,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r1 = rgb_r;
			_g1 = rgb_g;
			_b1 = rgb_b;
		}
		let _strokeColor_r = _r1;
		let _strokeColor_g = _g1;
		let _strokeColor_b = _b1;
		let _strokeColor_a = _a1;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		ctx.ellipse(this.get_x(),this.get_y(),this.get_rrx(),this.get_rry(),sketcher_util_MathUtil.radians(this.get_rotate()),0,2 * Math.PI);
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	gl(gl) {
	}
	get_rry() {
		return this.rry;
	}
	set_rry(value) {
		return this.rry = value;
	}
	get_rrx() {
		return this.rrx;
	}
	set_rrx(value) {
		return this.rrx = value;
	}
}
sketcher_draw_Ellipse.__name__ = "sketcher.draw.Ellipse";
sketcher_draw_Ellipse.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Ellipse.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_Ellipse.prototype, {
	__class__: sketcher_draw_Ellipse
});
class sketcher_draw_Gradient extends sketcher_draw_Base {
	constructor(color0,color1,isLinear) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(color0,color1,isLinear);
	}
	_hx_constructor(color0,color1,isLinear) {
		if(isLinear == null) {
			isLinear = true;
		}
		this.dir = sketcher_draw_GradientDir.LeftRight;
		this.type = "gradient";
		this.color0 = color0;
		this.color1 = color1;
		super._hx_constructor("linearGradient");
	}
	svg(settings) {
		let stop0 = Xml.createElement("stop");
		stop0.set("offset","0%");
		stop0.set("stop-color","" + this.color0);
		let stop1 = Xml.createElement("stop");
		stop1.set("offset","100%");
		stop1.set("stop-color","" + this.color1);
		this.xml.addChild(stop0);
		this.xml.addChild(stop1);
		return haxe_xml_Printer.print(this.xml);
	}
	ctx(ctx) {
		let w = ctx.canvas.width;
		let h = ctx.canvas.height;
		let grd;
		switch(this.dir._hx_index) {
		case 0:case 1:
			grd = ctx.createLinearGradient(0,0,w,0);
			break;
		case 2:case 3:
			grd = ctx.createLinearGradient(h,0,0,0);
			break;
		case 4:case 5:
			grd = ctx.createLinearGradient(0,0,0,h);
			break;
		case 6:case 7:
			grd = ctx.createLinearGradient(0,w,0,0);
			break;
		case 8:case 9:
			grd = ctx.createLinearGradient(0,0,w,h);
			break;
		case 10:case 11:
			grd = ctx.createLinearGradient(0,h,w,0);
			break;
		case 12:case 13:
			grd = ctx.createLinearGradient(h,w,0,0);
			break;
		case 14:case 15:
			grd = ctx.createLinearGradient(h,0,0,h);
			break;
		}
		grd.addColorStop(0,"" + this.color0);
		grd.addColorStop(1,"" + this.color1);
		this.canvasGradient = grd;
		this.gradientObj = { id : this.get_id(), canvasGradient : this.canvasGradient};
		ctx.fillStyle = grd;
		ctx.fillRect(0,0,w,h);
	}
	gl(gl) {
	}
	setGradientDirection(dir) {
		this.dir = dir;
	}
}
sketcher_draw_Gradient.__name__ = "sketcher.draw.Gradient";
sketcher_draw_Gradient.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Gradient.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_Gradient.prototype, {
	__class__: sketcher_draw_Gradient
});
var sketcher_draw_GradientDir = $hxEnums["sketcher.draw.GradientDir"] = { __ename__:true,__constructs__:null
	,LeftRight: {_hx_name:"LeftRight",_hx_index:0,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,LR: {_hx_name:"LR",_hx_index:1,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RightLeft: {_hx_name:"RightLeft",_hx_index:2,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RL: {_hx_name:"RL",_hx_index:3,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TopBottom: {_hx_name:"TopBottom",_hx_index:4,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TB: {_hx_name:"TB",_hx_index:5,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BottomTop: {_hx_name:"BottomTop",_hx_index:6,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BT: {_hx_name:"BT",_hx_index:7,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,LeftTopRightBottom: {_hx_name:"LeftTopRightBottom",_hx_index:8,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TopLeftBottomRight: {_hx_name:"TopLeftBottomRight",_hx_index:9,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,LeftBottomTopRight: {_hx_name:"LeftBottomTopRight",_hx_index:10,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BottomLeftRightTop: {_hx_name:"BottomLeftRightTop",_hx_index:11,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RightBottomLeftTop: {_hx_name:"RightBottomLeftTop",_hx_index:12,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,BottomRightTopLeft: {_hx_name:"BottomRightTopLeft",_hx_index:13,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,TopRightLeftBottom: {_hx_name:"TopRightLeftBottom",_hx_index:14,__enum__:"sketcher.draw.GradientDir",toString:$estr}
	,RightTopBottomLeft: {_hx_name:"RightTopBottomLeft",_hx_index:15,__enum__:"sketcher.draw.GradientDir",toString:$estr}
};
sketcher_draw_GradientDir.__constructs__ = [sketcher_draw_GradientDir.LeftRight,sketcher_draw_GradientDir.LR,sketcher_draw_GradientDir.RightLeft,sketcher_draw_GradientDir.RL,sketcher_draw_GradientDir.TopBottom,sketcher_draw_GradientDir.TB,sketcher_draw_GradientDir.BottomTop,sketcher_draw_GradientDir.BT,sketcher_draw_GradientDir.LeftTopRightBottom,sketcher_draw_GradientDir.TopLeftBottomRight,sketcher_draw_GradientDir.LeftBottomTopRight,sketcher_draw_GradientDir.BottomLeftRightTop,sketcher_draw_GradientDir.RightBottomLeftTop,sketcher_draw_GradientDir.BottomRightTopLeft,sketcher_draw_GradientDir.TopRightLeftBottom,sketcher_draw_GradientDir.RightTopBottomLeft];
class sketcher_draw_Group extends sketcher_draw_Base {
	constructor(arr) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(arr);
	}
	_hx_constructor(arr) {
		this.isGroupHidden = false;
		this.isOpacityOverride = false;
		this.type = "group";
		this.set_arr(arr);
		super._hx_constructor("g");
	}
	svg(settings) {
		if(this.get_x() > 0 && this.get_y() > 0) {
			this.transArr.push("translate(" + this.get_x() + ", " + this.get_y() + ")");
		}
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		if(this.isOpacityOverride) {
			this.xml.set("opacity-override","true");
		}
		if(this.isGroupHidden) {
			this.xml.set("style","display:none");
		}
		this.xml.set("inkscape:groupmode","layer");
		this.xml.set("inkscape:label","" + this.get_id() + " Layer");
		let comment = Xml.createComment("Group: " + this.get_id());
		this.xml.addChild(comment);
		this.xml.addChild(Xml.parse("<desc>" + this.get_id() + "</desc>"));
		let _g = 0;
		let _g1 = this.get_arr().length;
		while(_g < _g1) {
			let i = _g++;
			let base = this.get_arr()[i];
			this.xml.addChild(Xml.parse(base.svg(null)));
		}
		return haxe_xml_Printer.print(this.xml);
	}
	ctx(ctx) {
		if(!sketcher_draw_Group.ISWARN) {
			$global.console.groupCollapsed("Group (" + this.get_id() + ") info canvas");
			$global.console.info("the following work\n- strokeOpacity\n- fillOpacity\n- fillColor\n- strokeColor\n- strokeWeight\n- rotate");
			$global.console.warn("doesn't work\n- move");
			$global.console.groupEnd();
			sketcher_draw_Group.ISWARN = true;
		}
		let _g = 0;
		let _g1 = this.get_arr().length;
		while(_g < _g1) {
			let i = _g++;
			let base = this.get_arr()[i];
			if(base == null) {
				continue;
			}
			if(this.get_fillOpacity() != null && (js_Boot.__cast(base , sketcher_draw_Base)).get_fillOpacity() == null) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_fillOpacity(this.get_fillOpacity());
			}
			if(this.get_strokeOpacity() != null && (js_Boot.__cast(base , sketcher_draw_Base)).get_strokeOpacity() == null) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_strokeOpacity(this.get_strokeOpacity());
			}
			if(this.get_fillColor() != null && (js_Boot.__cast(base , sketcher_draw_Base)).get_fillColor() == null) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_fillColor(this.get_fillColor());
			}
			if(this.get_strokeColor() != null && (js_Boot.__cast(base , sketcher_draw_Base)).get_strokeColor() == null) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_strokeColor(this.get_strokeColor());
			}
			if(this.get_strokeWeight() != null) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_strokeWeight(this.get_strokeWeight());
			}
			if(this.isOpacityOverride) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_strokeOpacity(this.get_strokeOpacity());
				(js_Boot.__cast(base , sketcher_draw_Base)).set_fillOpacity(this.get_fillOpacity());
			}
		}
		let newCanvas = window.document.createElement("canvas");
		newCanvas.width = ctx.canvas.width;
		newCanvas.height = ctx.canvas.height;
		let newCtx = newCanvas.getContext("2d",null);
		let _g2 = 0;
		let _g3 = this.get_arr().length;
		while(_g2 < _g3) {
			let i = _g2++;
			let base = this.get_arr()[i];
			if(base == null) {
				continue;
			}
			base.ctx(newCtx);
		}
		if(this.get_rotate() != null) {
			ctx.save();
			ctx.translate(this.get_rx(),this.get_ry());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			ctx.drawImage(newCanvas,-this.get_rx(),-this.get_ry());
			ctx.restore();
		} else {
			ctx.drawImage(newCanvas,0,0);
		}
	}
	gl(gl) {
	}
	hide(isHidden) {
		if(isHidden == null) {
			isHidden = true;
		}
		this.isGroupHidden = isHidden;
	}
	test() {
		haxe_Log.trace("test if casting works",{ fileName : "src/sketcher/draw/Group.hx", lineNumber : 161, className : "sketcher.draw.Group", methodName : "test"});
	}
	getHeight() {
		let _g = 0;
		let _g1 = this.get_arr().length;
		while(_g < _g1) {
			let i = _g++;
			let group = this.get_arr()[i];
			let _g1 = 0;
			let _g2 = (js_Boot.__cast(group , sketcher_draw_Group)).get_arr().length;
			while(_g1 < _g2) {
				let j = _g1++;
				let sh = (js_Boot.__cast(group , sketcher_draw_Group)).get_arr()[j];
				let tmp = sh.type == "rectangle";
			}
		}
		return "WIP group.getHeight()";
	}
	get_arr() {
		return this.arr;
	}
	set_arr(value) {
		return this.arr = value;
	}
}
sketcher_draw_Group.__name__ = "sketcher.draw.Group";
sketcher_draw_Group.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Group.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_Group.prototype, {
	__class__: sketcher_draw_Group
});
class sketcher_draw_Image extends sketcher_draw_Base {
	constructor(x,y,href,width,height,isCenter) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(x,y,href,width,height,isCenter);
	}
	_hx_constructor(x,y,href,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = false;
		}
		this.type = "image";
		this.set_x(x);
		this.set_y(y);
		this.set_href(href);
		this.set_width(width);
		this.set_height(height);
		this.set_isCenter(isCenter);
		super._hx_constructor("image");
	}
	svg(settings) {
		if(this.get_isCenter()) {
			this.set_x(this.get_x() - this.get_width() / 2);
			this.set_y(this.get_y() - this.get_height() / 2);
		}
		this.xml.set("x",Std.string(this.get_x()));
		this.xml.set("y",Std.string(this.get_y()));
		if(this.get_href() != "") {
			this.xml.set("href",Std.string(this.get_href()));
		} else {
			this.xml.set("href",Std.string(this.get_image().src));
		}
		this.xml.set("width",Std.string(this.get_width()));
		this.xml.set("height",Std.string(this.get_height()));
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	ctx(ctx) {
		this.useDefaultsCanvas();
		ctx.imageSmoothingEnabled = true;
		ctx.imageSmoothingQuality = "high";
		let img = new Image();
		let _gthis = this;
		img.onload = function() {
			_gthis.canvasImage(ctx,img);
		};
		img.onerror = function(e) {
			$global.console.warn(e);
		};
		if(this.get_href() == "") {
			img = this.get_image();
			this.canvasImage(ctx,img);
		} else {
			img.src = this.get_href();
		}
	}
	canvasImage(ctx,img) {
		let ratio = img.height / img.width;
		if(this.get_rotate() != null) {
			ctx.save();
			ctx.translate(this.get_x(),this.get_y());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			if(this.get_move() != null) {
				ctx.translate(this.get_move().x,this.get_move().y);
			}
			if(this.get_isCenter()) {
				ctx.drawImage(img,-(this.get_width() * 0),-(this.get_height() * ratio),this.get_width(),this.get_height() * ratio);
			} else {
				ctx.drawImage(img,0,0,this.get_width(),this.get_height() * ratio);
			}
			ctx.restore();
		}
		if(this.get_rotate() == null) {
			if(this.get_isCenter()) {
				this.set_x(this.get_x() - this.get_width() / 2);
				this.set_y(this.get_y() - this.get_height() * ratio / 2);
				ctx.drawImage(img,this.get_x(),this.get_y(),this.get_width(),this.get_height() * ratio);
			} else {
				ctx.drawImage(img,this.get_x(),this.get_y(),this.get_width(),this.get_height() * ratio);
			}
		}
	}
	gl(gl) {
	}
	get_href() {
		return this.href;
	}
	set_href(value) {
		return this.href = value;
	}
	get_width() {
		return this.width;
	}
	set_width(value) {
		return this.width = value;
	}
	get_height() {
		return this.height;
	}
	set_height(value) {
		return this.height = value;
	}
	get_isCenter() {
		return this.isCenter;
	}
	set_isCenter(value) {
		return this.isCenter = value;
	}
	get_image() {
		return this.image;
	}
	set_image(value) {
		return this.image = value;
	}
	get_preserveAspectRatio() {
		return this.preserveAspectRatio;
	}
	set_preserveAspectRatio(value) {
		return this.preserveAspectRatio = value;
	}
}
sketcher_draw_Image.__name__ = "sketcher.draw.Image";
sketcher_draw_Image.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Image.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_Image.prototype, {
	__class__: sketcher_draw_Image
});
class sketcher_draw_Line extends sketcher_draw_Base {
	constructor(x,y,x2,y2) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(x,y,x2,y2);
	}
	_hx_constructor(x,y,x2,y2) {
		this.type = "Line";
		this.set_x(x);
		this.set_y(y);
		this.set_x2(x2);
		this.set_y2(y2);
		super._hx_constructor("line");
	}
	svg(settings) {
		this.xml.set("x1",Std.string(this.get_x()));
		this.xml.set("y1",Std.string(this.get_y()));
		this.xml.set("x2",Std.string(this.get_x2()));
		this.xml.set("y2",Std.string(this.get_y2()));
		if(this.get_stroke() != null) {
			this.xml.set("stroke",this.get_stroke());
		}
		if(this.get_lineWeight() != null) {
			this.xml.set("stroke-width",Std.string(this.get_lineWeight()));
		}
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	ctx(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		let value = this.get_fillColor();
		let _r = 0;
		let _g = 0;
		let _b = 0;
		let _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		let _fillColor_r = _r;
		let _fillColor_g = _g;
		let _fillColor_b = _b;
		let _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		let value1 = this.get_strokeColor();
		let _r1 = 0;
		let _g1 = 0;
		let _b1 = 0;
		let _a1 = 1;
		value1 = StringTools.replace(value1," ","");
		if(value1.indexOf("rgba") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgba(",""),")","");
			let arr = value1.split(",");
			_r1 = arr[0];
			_g1 = arr[1];
			_b1 = arr[2];
			_a1 = arr[3];
		} else if(value1.indexOf("rgb") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgb(",""),")","");
			let arr = value1.split(",");
			_r1 = arr[0];
			_g1 = arr[1];
			_b1 = arr[2];
		} else if(value1.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value1,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r1 = rgb_r;
			_g1 = rgb_g;
			_b1 = rgb_b;
		}
		let _strokeColor_r = _r1;
		let _strokeColor_g = _g1;
		let _strokeColor_b = _b1;
		let _strokeColor_a = _a1;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		ctx.moveTo(this.get_x(),this.get_y());
		ctx.lineTo(this.get_x2(),this.get_y2());
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	gl(gl) {
	}
	get_x2() {
		return this.x2;
	}
	set_x2(value) {
		return this.x2 = value;
	}
	get_y2() {
		return this.y2;
	}
	set_y2(value) {
		return this.y2 = value;
	}
}
sketcher_draw_Line.__name__ = "sketcher.draw.Line";
sketcher_draw_Line.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Line.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_Line.prototype, {
	__class__: sketcher_draw_Line
});
class sketcher_draw_Marker extends sketcher_draw_Base {
	constructor(arr) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(arr);
	}
	_hx_constructor(arr) {
		this.refY = 0;
		this.refX = 0;
		this.height = 10;
		this.width = 10;
		this.type = "marker";
		this.set_arr(arr);
		super._hx_constructor("marker");
	}
	svg(settings) {
		this.xml.set("markerWidth","" + this.get_width());
		this.xml.set("markerHeight","" + this.get_height());
		this.xml.set("refX","" + this.get_refX());
		this.xml.set("refY","" + this.get_refY());
		this.xml.set("orient","auto");
		let comment = Xml.createComment("Marker: " + this.get_id());
		this.xml.addChild(comment);
		let _g = 0;
		let _g1 = this.get_arr().length;
		while(_g < _g1) {
			let i = _g++;
			let base = this.get_arr()[i];
			this.xml.addChild(Xml.parse(base.svg(null)));
		}
		return haxe_xml_Printer.print(this.xml);
	}
	ctx(ctx) {
		if(!sketcher_draw_Marker.ISWARN) {
			$global.console.warn("Marker doens't work for canvas");
			sketcher_draw_Marker.ISWARN = true;
		}
	}
	gl(gl) {
	}
	get_arr() {
		return this.arr;
	}
	set_arr(value) {
		return this.arr = value;
	}
	get_width() {
		return this.width;
	}
	set_width(value) {
		return this.width = value;
	}
	get_height() {
		return this.height;
	}
	set_height(value) {
		return this.height = value;
	}
	get_refX() {
		return this.refX;
	}
	set_refX(value) {
		return this.refX = value;
	}
	get_refY() {
		return this.refY;
	}
	set_refY(value) {
		return this.refY = value;
	}
}
sketcher_draw_Marker.__name__ = "sketcher.draw.Marker";
sketcher_draw_Marker.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Marker.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_Marker.prototype, {
	__class__: sketcher_draw_Marker
});
class sketcher_draw_Mask extends sketcher_draw_Base {
	constructor(arr) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(arr);
	}
	_hx_constructor(arr) {
		this.type = "mask";
		this.set_arr(arr);
		super._hx_constructor("mask");
	}
	svg(settings) {
		this.xml.set("x","0");
		this.xml.set("y","0");
		this.xml.set("width",Std.string(Globals.w));
		this.xml.set("height",Std.string(Globals.h));
		let comment = Xml.createComment("Mask: " + this.get_id());
		this.xml.addChild(comment);
		let _g = 0;
		let _g1 = this.get_arr().length;
		while(_g < _g1) {
			let i = _g++;
			let base = this.get_arr()[i];
			(js_Boot.__cast(base , sketcher_draw_Base)).noStroke().setFill("#FFFFFF");
			this.xml.addChild(Xml.parse(base.svg(null)));
		}
		return haxe_xml_Printer.print(this.xml);
	}
	ctx(ctx) {
		if(!sketcher_draw_Mask.ISWARN) {
			$global.console.warn("Mask doens't work the same as svg, use with care");
			sketcher_draw_Mask.ISWARN = true;
		}
		ctx.save();
		let _g = 0;
		let _g1 = this.get_arr().length;
		while(_g < _g1) {
			let i = _g++;
			let base = this.get_arr()[i];
			if(base == null) {
				continue;
			}
			$global.console.info(this.get_id() + " --> " + base.type);
			base.ctx(ctx);
		}
		ctx.clip();
		ctx.restore();
	}
	gl(gl) {
	}
	get_arr() {
		return this.arr;
	}
	set_arr(value) {
		return this.arr = value;
	}
}
sketcher_draw_Mask.__name__ = "sketcher.draw.Mask";
sketcher_draw_Mask.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Mask.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_Mask.prototype, {
	__class__: sketcher_draw_Mask
});
class sketcher_draw_Mirror extends sketcher_draw_Base {
	constructor(dir) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(dir);
	}
	_hx_constructor(dir) {
		this.baseArray = [];
		this.type = "mirror";
		if(dir == null) {
			dir = "right";
		}
		this.dir = dir;
		super._hx_constructor("mirror");
	}
	svg(settings) {
		if(!sketcher_draw_Mirror.ISWARN) {
			$global.console.warn("Mirror doens't work the same as canvas, use with care");
			sketcher_draw_Mirror.ISWARN = true;
		}
		let _g = 0;
		let _g1 = this.baseArray.length;
		while(_g < _g1) {
			let i = _g++;
			let _baseArray = this.baseArray[i];
		}
		return haxe_xml_Printer.print(this.xml);
	}
	ctx(ctx) {
		if(!sketcher_draw_Mirror.ISWARN) {
			$global.console.warn("Mirror works only for the right part of the sketch");
			sketcher_draw_Mirror.ISWARN = true;
		}
		let _y = 0;
		let _y2 = Globals.h / 2;
		let _x = 0;
		let _x2 = Globals.w / 2;
		let _w = Globals.w / 2;
		let _h = Globals.h / 2;
		ctx.save();
		ctx.translate(_x2,_y);
		ctx.scale(-1,1);
		ctx.clearRect(0,0,Globals.w,Globals.h);
		ctx.drawImage(ctx.canvas,_x2,_y,Globals.w,Globals.h,0,0,Globals.w,Globals.h);
		ctx.restore();
	}
	gl(gl) {
	}
}
sketcher_draw_Mirror.__name__ = "sketcher.draw.Mirror";
sketcher_draw_Mirror.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Mirror.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_Mirror.prototype, {
	__class__: sketcher_draw_Mirror
});
class sketcher_draw_Path extends sketcher_draw_Base {
	constructor(x,y) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(x,y);
	}
	_hx_constructor(x,y) {
		this.type = "Path";
		this.dArray = [];
		this.moveTo(x,y);
		super._hx_constructor("path");
	}
	svg(settings) {
		let str = "";
		let _g = 0;
		let _g1 = this.dArray;
		while(_g < _g1.length) {
			let i = _g1[_g];
			++_g;
			str += i;
		}
		this.xml.set("d",str);
		return haxe_xml_Printer.print(this.xml);
	}
	ctx(ctx) {
		ctx.beginPath();
		ctx.fill();
		ctx.stroke();
	}
	gl(gl) {
	}
	window(x,y,width,height,x2,y2,width2,height2) {
		this.dArray = [];
		this.set_id("passe-partout " + this.get_count());
		this.dArray.push("M" + x + "," + y);
		this.dArray.push("V" + (y + height));
		this.dArray.push("H" + (x + width));
		this.dArray.push("V" + y);
		this.dArray.push("Z");
		this.dArray.push("M" + (x2 + width2) + "," + (y2 + height2));
		this.dArray.push("H" + x2);
		this.dArray.push("V" + y2);
		this.dArray.push("H" + (x2 + width2));
		this.dArray.push("Z");
	}
	moveTo(x,y) {
		this.dArray.push("M" + x + ", " + y + " ");
	}
	lineTo(x,y) {
		this.dArray.push("L" + x + ", " + y + " ");
	}
	horizontalLineTo(x) {
		this.dArray.push("H" + x + " ");
	}
	verticalLineTo(y) {
		this.dArray.push("V" + y + " ");
	}
	curveto(x1,y1,x2,y2,x,y) {
		this.dArray.push("C" + x1 + ", " + y1 + " " + x2 + ", " + y2 + " " + x + ", " + y + " ");
	}
	closepath() {
		this.dArray.push("Z ");
	}
}
sketcher_draw_Path.__name__ = "sketcher.draw.Path";
sketcher_draw_Path.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Path.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_Path.prototype, {
	__class__: sketcher_draw_Path
});
class sketcher_draw_PolyLine extends sketcher_draw_Base {
	constructor(arr) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(arr);
	}
	_hx_constructor(arr) {
		this.type = "PolyLine";
		this.set_arr(arr);
		super._hx_constructor("polyline");
	}
	svg(settings) {
		if(this.get_desc() != "") {
			this.xml.addChild(Xml.parse("<desc>" + this.get_desc() + "</desc>"));
		}
		let str = "";
		let _g = 0;
		let _g1 = this.get_arr().length;
		while(_g < _g1) {
			let i = _g++;
			let value = this.get_arr()[i];
			str += "" + value + " ";
		}
		this.xml.set("points",str);
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	ctx(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		if(this.get_lineJoin() != null) {
			ctx.lineJoin = this.get_lineJoin();
		}
		ctx.lineWidth = this.get_lineWeight();
		let value = this.get_fillColor();
		let _r = 0;
		let _g = 0;
		let _b = 0;
		let _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		let _fillColor_r = _r;
		let _fillColor_g = _g;
		let _fillColor_b = _b;
		let _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		let value1 = this.get_strokeColor();
		let _r1 = 0;
		let _g1 = 0;
		let _b1 = 0;
		let _a1 = 1;
		value1 = StringTools.replace(value1," ","");
		if(value1.indexOf("rgba") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgba(",""),")","");
			let arr = value1.split(",");
			_r1 = arr[0];
			_g1 = arr[1];
			_b1 = arr[2];
			_a1 = arr[3];
		} else if(value1.indexOf("rgb") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgb(",""),")","");
			let arr = value1.split(",");
			_r1 = arr[0];
			_g1 = arr[1];
			_b1 = arr[2];
		} else if(value1.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value1,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r1 = rgb_r;
			_g1 = rgb_g;
			_b1 = rgb_b;
		}
		let _strokeColor_r = _r1;
		let _strokeColor_g = _g1;
		let _strokeColor_b = _b1;
		let _strokeColor_a = _a1;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		let _pointArray = this.convertArr();
		let _g2 = 0;
		let _g3 = _pointArray.length;
		while(_g2 < _g3) {
			let i = _g2++;
			let p = _pointArray[i];
			if(i == 0) {
				ctx.moveTo(p.x,p.y);
			} else {
				ctx.lineTo(p.x,p.y);
			}
		}
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	gl(gl) {
	}
	convertArr() {
		let _pointArray = [];
		let _g = 0;
		let _g1 = this.get_arr().length;
		while(_g < _g1) {
			let i = _g++;
			if(i % 2 == 0) {
				let x = this.get_arr()[i];
				let y = this.get_arr()[i + 1];
				_pointArray.push({ x : x, y : y});
			}
		}
		return _pointArray;
	}
	get_arr() {
		return this.arr;
	}
	set_arr(value) {
		return this.arr = value;
	}
}
sketcher_draw_PolyLine.__name__ = "sketcher.draw.PolyLine";
sketcher_draw_PolyLine.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_PolyLine.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_PolyLine.prototype, {
	__class__: sketcher_draw_PolyLine
});
class sketcher_draw_Polygon extends sketcher_draw_Base {
	constructor(arr) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(arr);
	}
	_hx_constructor(arr) {
		this.height = null;
		this.width = null;
		this.type = "Polygon";
		this.set_arr(arr);
		this.calculateSize();
		super._hx_constructor("polygon");
	}
	calculateSize() {
		if(this.get_arrPoint() == null) {
			this.set_arrPoint(this.convertArr());
		}
		let lt = { x : null, y : null};
		let rt = { x : null, y : null};
		let lb = { x : null, y : null};
		let rb = { x : null, y : null};
		let _g = 0;
		let _g1 = this.get_arrPoint().length;
		while(_g < _g1) {
			let i = _g++;
			let p = this.get_arrPoint()[i];
			if(lt.x == null) {
				lt = { x : p.x, y : p.y};
			}
			if(rt.x == null) {
				rt = { x : p.x, y : p.y};
			}
			if(lb.x == null) {
				lb = { x : p.x, y : p.y};
			}
			if(rb.x == null) {
				rb = { x : p.x, y : p.y};
			}
			if(p.x <= lt.x) {
				lt.x = p.x;
			}
			if(p.y <= lt.y) {
				lt.y = p.y;
			}
			if(p.x >= rt.x) {
				rt.x = p.x;
			}
			if(p.y <= rt.y) {
				rt.y = p.y;
			}
			if(p.x <= lb.x) {
				lb.x = p.x;
			}
			if(p.y >= lb.y) {
				lb.y = p.y;
			}
			if(p.x >= rb.x) {
				rb.x = p.x;
			}
			if(p.y >= rb.y) {
				rb.y = p.y;
			}
		}
		this.set_x(lt.x);
		this.set_y(lt.y);
		this.width = rt.x - lt.x;
		this.height = rb.y - rt.y;
		this.cx = lt.x + this.width / 2;
		this.cy = lt.y + this.height / 2;
		this.point_top_left = lt;
		this.point_top_right = rt;
		this.point_bottom_left = lb;
		this.point_bottom_right = rb;
	}
	svg(settings) {
		this.calculateSize();
		let str = "";
		let _g = 0;
		let _g1 = this.get_arr().length;
		while(_g < _g1) {
			let i = _g++;
			let value = this.get_arr()[i];
			str += "" + value + " ";
		}
		this.xml.set("points",str);
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	ctx(ctx) {
		if(!sketcher_draw_Polygon.ISWARN) {
			$global.console.groupCollapsed("Polygon (" + this.get_id() + ") info canvas");
			$global.console.warn("doesn't work\n- move\n- rotate (for weird shapes, works for sides)\n- lineJoin");
			$global.console.groupEnd();
			sketcher_draw_Polygon.ISWARN = true;
		}
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		let value = this.get_fillColor();
		let _r = 0;
		let _g = 0;
		let _b = 0;
		let _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		let _fillColor_r = _r;
		let _fillColor_g = _g;
		let _fillColor_b = _b;
		let _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		let value1 = this.get_strokeColor();
		let _r1 = 0;
		let _g1 = 0;
		let _b1 = 0;
		let _a1 = 1;
		value1 = StringTools.replace(value1," ","");
		if(value1.indexOf("rgba") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgba(",""),")","");
			let arr = value1.split(",");
			_r1 = arr[0];
			_g1 = arr[1];
			_b1 = arr[2];
			_a1 = arr[3];
		} else if(value1.indexOf("rgb") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgb(",""),")","");
			let arr = value1.split(",");
			_r1 = arr[0];
			_g1 = arr[1];
			_b1 = arr[2];
		} else if(value1.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value1,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r1 = rgb_r;
			_g1 = rgb_g;
			_b1 = rgb_b;
		}
		let _strokeColor_r = _r1;
		let _strokeColor_g = _g1;
		let _strokeColor_b = _b1;
		let _strokeColor_a = _a1;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		let _pointArray = this.convertArr();
		if(this.get_rotate() != null) {
			ctx.save();
			ctx.translate(this.get_rx(),this.get_ry());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			let _g = 0;
			let _g1 = _pointArray.length;
			while(_g < _g1) {
				let i = _g++;
				let p = _pointArray[i];
				if(i == 0) {
					ctx.moveTo(p.x - this.get_rx(),p.y - this.get_ry());
				} else {
					ctx.lineTo(p.x - this.get_rx(),p.y - this.get_ry());
				}
			}
			ctx.restore();
		} else {
			let _g = 0;
			let _g1 = _pointArray.length;
			while(_g < _g1) {
				let i = _g++;
				let p = _pointArray[i];
				if(i == 0) {
					ctx.moveTo(p.x,p.y);
				} else {
					ctx.lineTo(p.x,p.y);
				}
			}
		}
		ctx.closePath();
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	gl(gl) {
	}
	convertArr() {
		let _pointArray = [];
		let _g = 0;
		let _g1 = this.get_arr().length;
		while(_g < _g1) {
			let i = _g++;
			if(i % 2 == 0) {
				let x = this.get_arr()[i];
				let y = this.get_arr()[i + 1];
				_pointArray.push({ x : x, y : y});
			}
		}
		return _pointArray;
	}
	getPoint(id) {
		if(id * 2 > this.get_arr().length) {
			haxe_Log.trace("not in this length",{ fileName : "src/sketcher/draw/Polygon.hx", lineNumber : 230, className : "sketcher.draw.Polygon", methodName : "getPoint"});
		}
		let p = { x : this.get_arr()[id * 2], y : this.get_arr()[id * 2 + 1]};
		return p;
	}
	sides(x,y,sides,size,rotateDegree) {
		this.set_arr([]);
		this.set_rx(x);
		this.set_ry(y);
		if(rotateDegree == null) {
			rotateDegree = 0;
		} else {
			rotateDegree = sketcher_util_MathUtil.radians(rotateDegree);
		}
		let _g = 0;
		let _g1 = sides;
		while(_g < _g1) {
			let i = _g++;
			let _x = x + size * Math.cos(rotateDegree + i * (2 * Math.PI) / sides);
			let _y = y + size * Math.sin(rotateDegree + i * (2 * Math.PI) / sides);
			this.get_arr().push(_x);
			this.get_arr().push(_y);
		}
	}
	get_arr() {
		return this.arr;
	}
	set_arr(value) {
		return this.arr = value;
	}
	get_arrPoint() {
		return this.arrPoint;
	}
	set_arrPoint(value) {
		return this.arrPoint = value;
	}
}
sketcher_draw_Polygon.__name__ = "sketcher.draw.Polygon";
sketcher_draw_Polygon.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Polygon.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_Polygon.prototype, {
	__class__: sketcher_draw_Polygon
});
class sketcher_draw_Rectangle extends sketcher_draw_Base {
	constructor(x,y,width,height,isCenter) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(x,y,width,height,isCenter);
	}
	_hx_constructor(x,y,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		this.type = "rectangle";
		this.set_x(x);
		this.set_y(y);
		this.set_width(width);
		this.set_height(height);
		this.cx = this.get_x() - this.get_width() / 2;
		this.cy = this.get_y() - this.get_height() / 2;
		this.isCenter = isCenter;
		if(!isCenter) {
			this.cx = this.get_x();
			this.cy = this.get_y();
		}
		this.point_top_left = { x : this.cx, y : this.cy};
		this.point_top_right = { x : this.cx + this.get_width(), y : this.cy};
		this.point_bottom_left = { x : this.cx, y : this.cy + this.get_height()};
		this.point_bottom_right = { x : this.cx + this.get_width(), y : this.cy + this.get_height()};
		super._hx_constructor("rect");
	}
	svg(settings) {
		this.xml.set("x",Std.string(this.cx));
		this.xml.set("y",Std.string(this.cy));
		this.xml.set("width",Std.string(this.get_width()));
		this.xml.set("height",Std.string(this.get_height()));
		if(this.get_radius() != null) {
			this.xml.set("rx",Std.string(this.get_radius()));
			this.xml.set("ry",Std.string(this.get_radius()));
		}
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	useCanvasShadow(ctx) {
		if(this.get_shadowColor() != null) {
			ctx.shadowColor = this.get_shadowColor();
			ctx.shadowBlur = this.get_shadowBlur();
			ctx.shadowOffsetX = this.get_shadowOffsetX();
			ctx.shadowOffsetY = this.get_shadowOffsetY();
		}
	}
	ctx(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		let value = this.get_fillColor();
		let _r = 0;
		let _g = 0;
		let _b = 0;
		let _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		let _fillColor_r = _r;
		let _fillColor_g = _g;
		let _fillColor_b = _b;
		let _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		let value1 = this.get_strokeColor();
		let _r1 = 0;
		let _g1 = 0;
		let _b1 = 0;
		let _a1 = 1;
		value1 = StringTools.replace(value1," ","");
		if(value1.indexOf("rgba") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgba(",""),")","");
			let arr = value1.split(",");
			_r1 = arr[0];
			_g1 = arr[1];
			_b1 = arr[2];
			_a1 = arr[3];
		} else if(value1.indexOf("rgb") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgb(",""),")","");
			let arr = value1.split(",");
			_r1 = arr[0];
			_g1 = arr[1];
			_b1 = arr[2];
		} else if(value1.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value1,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r1 = rgb_r;
			_g1 = rgb_g;
			_b1 = rgb_b;
		}
		let _strokeColor_r = _r1;
		let _strokeColor_g = _g1;
		let _strokeColor_b = _b1;
		let _strokeColor_a = _a1;
		ctx.strokeStyle = sketcher_util_ColorUtil.getColour(_strokeColor_r,_strokeColor_g,_strokeColor_b,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		if(this.get_rotate() != null && this.get_move() == null) {
			ctx.save();
			ctx.translate(this.get_x(),this.get_y());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			ctx.rect(-(this.get_width() / 2),-(this.get_height() / 2),this.get_width(),this.get_height());
			ctx.restore();
		}
		if(this.get_move() != null && this.get_rotate() == null) {
			ctx.save();
			ctx.translate(this.cx,this.cy);
			ctx.translate(this.get_move().x,this.get_move().y);
			ctx.rect(0,0,this.get_width(),this.get_height());
			ctx.restore();
		}
		if(this.get_rotate() == null && this.get_move() == null) {
			this.buildCanvasShape(ctx);
		}
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	buildCanvasShape(ctx) {
		if(this.get_radius() == null) {
			ctx.rect(this.cx,this.cy,this.get_width(),this.get_height());
		} else {
			let radius_tl = this.get_radius();
			let radius_tr = this.get_radius();
			let radius_br = this.get_radius();
			let radius_bl = this.get_radius();
			ctx.moveTo(this.cx + radius_tl,this.cy);
			ctx.lineTo(this.cx + this.get_width() - radius_tr,this.cy);
			ctx.quadraticCurveTo(this.cx + this.get_width(),this.cy,this.cx + this.get_width(),this.cy + radius_tr);
			ctx.lineTo(this.cx + this.get_width(),this.cy + this.get_height() - radius_br);
			ctx.quadraticCurveTo(this.cx + this.get_width(),this.cy + this.get_height(),this.cx + this.get_width() - radius_br,this.cy + this.get_height());
			ctx.lineTo(this.cx + radius_bl,this.cy + this.get_height());
			ctx.quadraticCurveTo(this.cx,this.cy + this.get_height(),this.cx,this.cy + this.get_height() - radius_bl);
			ctx.lineTo(this.cx,this.cy + radius_tl);
			ctx.quadraticCurveTo(this.cx,this.cy,this.cx + radius_tl,this.cy);
			ctx.closePath();
		}
	}
	gl(gl) {
		if(!sketcher_draw_Rectangle.ISWARN) {
			$global.console.warn("webgl is not implemented yet");
			sketcher_draw_Rectangle.ISWARN = true;
		}
		let c = "#ff3333";
		let value = c;
		let _r = 0;
		let _g = 0;
		let _b = 0;
		let _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		let rgba_r = _r;
		let rgba_g = _g;
		let rgba_b = _b;
		let rgba_a = _a;
		gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);
		gl.clearColor(rgba_r / 255,rgba_g / 255,rgba_b / 255,rgba_a);
		gl.clear(16384);
	}
	get_radius() {
		return this.radius;
	}
	set_radius(value) {
		return this.radius = value;
	}
	get_width() {
		return this.width;
	}
	set_width(value) {
		return this.width = value;
	}
	get_height() {
		return this.height;
	}
	set_height(value) {
		return this.height = value;
	}
}
sketcher_draw_Rectangle.__name__ = "sketcher.draw.Rectangle";
sketcher_draw_Rectangle.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Rectangle.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_Rectangle.prototype, {
	__class__: sketcher_draw_Rectangle
});
class sketcher_draw_Text extends sketcher_draw_Base {
	constructor(str,x,y) {
		sketcher_draw_Base._hx_skip_constructor = true;
		super();
		sketcher_draw_Base._hx_skip_constructor = false;
		this._hx_constructor(str,x,y);
	}
	_hx_constructor(str,x,y) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		this.width = -1;
		this.lineHeight = 0;
		this.fitWidth = 0;
		this.type = "Text";
		this.set_str(str);
		this.set_x(x);
		this.set_y(y);
		super._hx_constructor("text");
	}
	align(value) {
		this.set_textAlign(value);
	}
	baseline(value) {
		this.set_textBaseline(value);
	}
	getWidth() {
		if(!sketcher_draw_Text.ISWARN) {
			$global.console.warn("Get Width of text doens't work for svg currenlty");
			sketcher_draw_Text.ISWARN = true;
		}
		let ctx = Sketcher.ctx;
		let _css = "";
		let _font = StringTools.ltrim("" + _css + " " + this.get_fontSizePx() + "px " + this.get_fontFamily());
		ctx.font = _font;
		return ctx.measureText(this.get_str()).width;
	}
	svg(settings) {
		let comment = Xml.createComment("" + StringTools.replace(this.get_str(),"--","__"));
		let content = Xml.parse(this.get_str());
		this.xml.addChild(comment);
		this.xml.addChild(content);
		this.xml.set("x",Std.string(this.get_x()));
		this.xml.set("y",Std.string(this.get_y()));
		if(this.get_textAlign() != null) {
			this.xml.set("text-anchor",this.convertTextAlign("svg"));
		}
		if(this.get_textBaseline() != null) {
			this.xml.set("dominant-baseline",this.convertTextBaseline("svg"));
		}
		if(this.get_style() != null) {
			let className = StringTools.replace(StringTools.replace(this.get_str()," ",""),"\n","").toLowerCase();
			this.xml.set("class","fontstyle_" + className);
			let style = window.document.createElement("style");
			style.innerHTML = ".fontstyle_" + className + " {" + this.get_style() + "}";
			window.document.body.appendChild(style);
		}
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	ctx(ctx) {
		this.useDefaultsCanvas();
		ctx.save();
		let value = this.get_fillColor();
		let _r = 0;
		let _g = 0;
		let _b = 0;
		let _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		let _fillColor_r = _r;
		let _fillColor_g = _g;
		let _fillColor_b = _b;
		let _fillColor_a = _a;
		ctx.fillStyle = sketcher_util_ColorUtil.getColour(_fillColor_r,_fillColor_g,_fillColor_b,this.get_fillOpacity());
		if(this.get_fontFamily() == null) {
			this.set_fontFamily("Arial");
		}
		if(this.get_fontSize() == null) {
			this.set_fontSize("16px");
		}
		if(this.get_fontSizePx() != null) {
			this.set_fontSize("" + this.get_fontSizePx());
		}
		let _css = "";
		let _font = StringTools.ltrim("" + _css + " " + Std.parseInt(this.get_fontSize()) + "px " + this.get_fontFamily());
		ctx.font = _font;
		if(this.get_textAlign() != null) {
			ctx.textAlign = this.convertTextAlign("canvas");
		}
		if(this.get_textBaseline() != null) {
			ctx.textBaseline = this.convertTextBaseline("canvas");
		}
		let lines = [];
		let lineheight = this.get_lineHeight() != 0 ? this.get_lineHeight() : ctx.measureText("M").width * 1.7;
		if(this.get_fitWidth() != 0) {
			let words = this.get_str().split(" ");
			$global.console.log("doesnt work yet");
			let count = 0;
			let sentance = "";
			while(ctx.measureText(sentance).width <= this.get_fitWidth()) {
				sentance += words[count] + " ";
				++count;
			}
			lines.push(sentance);
			haxe_Log.trace(sentance,{ fileName : "src/sketcher/draw/Text.hx", lineNumber : 235, className : "sketcher.draw.Text", methodName : "ctx"});
		} else {
			lines = this.get_str().split("\n");
		}
		let _g1 = 0;
		let _g2 = lines.length;
		while(_g1 < _g2) {
			let i = _g1++;
			let line = lines[i];
			ctx.fillText(line,this.get_x(),this.get_y() + i * lineheight);
		}
		ctx.restore();
	}
	gl(gl) {
	}
	convertTextAlign(type) {
		let svg = "";
		let canvas = "";
		if(this.get_textAlign() == null) {
			this.set_textAlign(sketcher_draw_TextAlignType.Default);
		}
		switch(this.get_textAlign()._hx_index) {
		case 0:
			canvas = "center";
			svg = "middle";
			break;
		case 1:
			canvas = "left";
			svg = "start";
			break;
		case 2:
			canvas = "right";
			svg = "end";
			break;
		case 3:
			canvas = "start";
			svg = "start";
			break;
		}
		if(type == "svg") {
			return svg;
		} else {
			return canvas;
		}
	}
	convertTextBaseline(type) {
		let str = "";
		let svg = "";
		let canvas = "";
		if(this.get_textBaseline() == null) {
			this.set_textBaseline(sketcher_draw_TextBaselineType.Default);
		}
		switch(this.get_textBaseline()._hx_index) {
		case 0:
			canvas = "hanging";
			svg = "hanging";
			break;
		case 1:
			canvas = "bottom";
			svg = "ideographic";
			break;
		case 2:
			canvas = "middle";
			svg = "middle";
			break;
		case 3:
			canvas = "alphabetic";
			svg = "auto";
			break;
		}
		if(type == "svg") {
			return svg;
		} else {
			return canvas;
		}
	}
	get_fontSize() {
		return this.fontSize;
	}
	set_fontSize(value) {
		this.xml.set("font-size",value);
		return this.fontSize = value;
	}
	get_fontSizePx() {
		return this.fontSizePx;
	}
	set_fontSizePx(value) {
		this.xml.set("font-size","" + value + "px");
		return this.fontSizePx = value;
	}
	get_fontFamily() {
		return this.fontFamily;
	}
	set_fontFamily(value) {
		if(value.indexOf("+") != -1) {
			value = StringTools.replace(value,"+"," ");
		}
		if(value.indexOf(":") != -1) {
			value = value.split(":")[0];
		}
		this.xml.set("font-family",value);
		return this.fontFamily = value;
	}
	get_fontWeight() {
		return this.fontWeight;
	}
	set_fontWeight(value) {
		this.xml.set("font-weight",value);
		return this.fontWeight = value;
	}
	get_textAlign() {
		return this.textAlign;
	}
	set_textAlign(value) {
		return this.textAlign = value;
	}
	get_textBaseline() {
		return this.textBaseline;
	}
	set_textBaseline(value) {
		return this.textBaseline = value;
	}
	get_str() {
		return this.str;
	}
	set_str(value) {
		return this.str = value;
	}
	get_fitWidth() {
		return this.fitWidth;
	}
	set_fitWidth(value) {
		return this.fitWidth = value;
	}
	get_lineHeight() {
		return this.lineHeight;
	}
	set_lineHeight(value) {
		return this.lineHeight = value;
	}
	get_style() {
		return this.style;
	}
	set_style(value) {
		return this.style = value;
	}
	get_width() {
		this.getWidth();
		return this.width;
	}
}
sketcher_draw_Text.__name__ = "sketcher.draw.Text";
sketcher_draw_Text.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Text.__super__ = sketcher_draw_Base;
Object.assign(sketcher_draw_Text.prototype, {
	__class__: sketcher_draw_Text
});
var sketcher_draw_TextAlignType = $hxEnums["sketcher.draw.TextAlignType"] = { __ename__:true,__constructs__:null
	,Center: {_hx_name:"Center",_hx_index:0,__enum__:"sketcher.draw.TextAlignType",toString:$estr}
	,Left: {_hx_name:"Left",_hx_index:1,__enum__:"sketcher.draw.TextAlignType",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:2,__enum__:"sketcher.draw.TextAlignType",toString:$estr}
	,Default: {_hx_name:"Default",_hx_index:3,__enum__:"sketcher.draw.TextAlignType",toString:$estr}
};
sketcher_draw_TextAlignType.__constructs__ = [sketcher_draw_TextAlignType.Center,sketcher_draw_TextAlignType.Left,sketcher_draw_TextAlignType.Right,sketcher_draw_TextAlignType.Default];
var sketcher_draw_TextBaselineType = $hxEnums["sketcher.draw.TextBaselineType"] = { __ename__:true,__constructs__:null
	,Top: {_hx_name:"Top",_hx_index:0,__enum__:"sketcher.draw.TextBaselineType",toString:$estr}
	,Bottom: {_hx_name:"Bottom",_hx_index:1,__enum__:"sketcher.draw.TextBaselineType",toString:$estr}
	,Middle: {_hx_name:"Middle",_hx_index:2,__enum__:"sketcher.draw.TextBaselineType",toString:$estr}
	,Default: {_hx_name:"Default",_hx_index:3,__enum__:"sketcher.draw.TextBaselineType",toString:$estr}
};
sketcher_draw_TextBaselineType.__constructs__ = [sketcher_draw_TextBaselineType.Top,sketcher_draw_TextBaselineType.Bottom,sketcher_draw_TextBaselineType.Middle,sketcher_draw_TextBaselineType.Default];
class sketcher_export_FileExport {
	toString() {
		return "[FileExport]";
	}
	static downloadWebGLImage(domElement,isJpg,fileName) {
		if(fileName == null) {
			fileName = "test";
		}
		if(isJpg == null) {
			isJpg = false;
		}
		let imgData;
		let ext = isJpg ? "jpg" : "png";
		try {
			let strDownloadMime = "image/octet-stream";
			let strMime = "image/jpeg";
			imgData = domElement.toDataURL(strMime);
			$global.console.log(imgData);
			sketcher_export_FileExport.saveFile(StringTools.replace(imgData,strMime,strDownloadMime),fileName + ("." + ext));
		} catch( _g ) {
			$global.console.log("Browser does not support taking screenshot of 3d context");
			return;
		}
	}
	static svg2Canvas(svg,isJpg,filename,isTransparant) {
		if(isTransparant == null) {
			isTransparant = false;
		}
		if(isJpg == null) {
			isJpg = true;
		}
		let svgW = Std.parseInt(svg.getAttribute("width"));
		let svgH = Std.parseInt(svg.getAttribute("height"));
		let canvas = window.document.createElement("canvas");
		let ctx = canvas.getContext("2d",null);
		canvas.width = svgW;
		canvas.height = svgH;
		let image = new Image();
		image.onload = function() {
			if(isJpg) {
				ctx.fillStyle = "white";
				ctx.fillRect(0,0,canvas.width,canvas.height);
			}
			ctx.drawImage(image,0,0,svgW,svgH);
			sketcher_export_FileExport.downloadImageBg(ctx,isJpg,filename,isTransparant);
		};
		image.onerror = function(e) {
			$global.console.warn(e);
		};
		let tmp = window.btoa(svg.outerHTML);
		image.src = "data:image/svg+xml;base64," + tmp;
	}
	static saveFile(strData,fileName) {
		let link = window.document.createElement("a");
		window.document.body.appendChild(link);
		link.href = strData;
		link.download = fileName;
		link.click();
		window.document.body.removeChild(link);
	}
	static downloadImage(ctx,isJpg,fileName) {
		if(isJpg == null) {
			isJpg = false;
		}
		if(fileName == null) {
			let hash = $global.location.hash;
			hash = StringTools.replace(hash,"#","").toLowerCase();
			if(hash == "") {
				hash = "image";
			}
			fileName = "" + hash + "-" + new Date().getTime();
		}
		let link = window.document.createElement("a");
		link.href = ctx.canvas.toDataURL(isJpg ? "image/jpeg" : "",1);
		link.download = fileName;
		link.click();
	}
	static onBase64Handler(ctx,isJpg) {
		if(isJpg == null) {
			isJpg = false;
		}
		let base64 = ctx.canvas.toDataURL(isJpg ? "image/jpeg" : "",1);
		sketcher_export_FileExport.clipboard(base64);
	}
	static downloadTextFile(text,fileName) {
		if(fileName == null) {
			fileName = "CC-txt-" + new Date().getTime() + ".txt";
		}
		let el = window.document.createElement("a");
		el.href = "data:text/plain;charset=utf-8," + encodeURIComponent(text);
		el.download = fileName;
		el.style.display = "none";
		window.document.body.appendChild(el);
		el.click();
		window.document.body.removeChild(el);
	}
	static convertStr2Href(str) {
		return "data:text/plain;charset=utf-8," + encodeURIComponent(str);
	}
	static clipboard(text) {
		let win = "Ctrl+C";
		let mac = "Cmd+C";
		let copyCombo = win;
		let userAgent = $global.navigator.userAgent;
		let ereg = new EReg("iPhone|iPod|iPad|Android|BlackBerry","i");
		let ismac = ereg.match(userAgent);
		if(ismac) {
			copyCombo = mac;
		}
		window.prompt("Copy to clipboard: " + copyCombo + ", Enter",text);
	}
	static downloadImageBg(ctx,isJpg,fileName,isTransparant) {
		if(isTransparant == null) {
			isTransparant = false;
		}
		if(isJpg == null) {
			isJpg = false;
		}
		haxe_Log.trace(ctx,{ fileName : "src/sketcher/export/FileExport.hx", lineNumber : 166, className : "sketcher.export.FileExport", methodName : "downloadImageBg", customParams : [isJpg,fileName,isTransparant]});
		let canvas = ctx.canvas;
		let ext = isJpg ? "jpg" : "png";
		if(fileName == null) {
			let hash = $global.location.hash;
			hash = StringTools.replace(hash,"#","").toLowerCase();
			if(hash == "") {
				hash = "image";
			}
			fileName = "" + hash + "-" + new Date().getTime();
		}
		let _w = canvas.width;
		let _h = canvas.height;
		if(!isTransparant) {
			let currentCanvas = ctx.canvas;
			let newCanvas = currentCanvas.cloneNode(true);
			let n_ctx = newCanvas.getContext("2d",null);
			n_ctx.fillStyle = "#FFffff";
			n_ctx.fillRect(0,0,newCanvas.width,newCanvas.height);
			n_ctx.drawImage(canvas,0,0);
			ctx.drawImage(newCanvas,0,0);
		}
		let link = window.document.createElement("a");
		link.style.cssText = "display:none";
		link.download = fileName + ("." + ext);
		if(!HTMLCanvasElement.prototype.toBlob) {
			haxe_Log.trace("There is no blob",{ fileName : "src/sketcher/export/FileExport.hx", lineNumber : 235, className : "sketcher.export.FileExport", methodName : "downloadImageBg"});
			link.href = ctx.canvas.toDataURL(isJpg ? "image/jpeg" : "",1);
			link.click();
			link.remove();
		} else {
			haxe_Log.trace("Attack of the blob",{ fileName : "src/sketcher/export/FileExport.hx", lineNumber : 241, className : "sketcher.export.FileExport", methodName : "downloadImageBg"});
			ctx.canvas.toBlob(function(blob) {
				link.href = URL.createObjectURL(blob);
				link.click();
				link.remove();
			},isJpg ? "image/jpeg" : "",1);
		}
		window.document.body.appendChild(link);
	}
}
sketcher_export_FileExport.__name__ = "sketcher.export.FileExport";
Object.assign(sketcher_export_FileExport.prototype, {
	__class__: sketcher_export_FileExport
});
class sketcher_util_ColorUtil {
	constructor() {
	}
	static getColour(r,g,b,a) {
		let c;
		if(g == null) {
			c = sketcher_util_ColorUtil.rgb(r,r,r);
		} else if(b == null && a == null) {
			c = sketcher_util_ColorUtil.rgba(r,r,r,g);
		} else if(a == null) {
			c = sketcher_util_ColorUtil.rgb(r,g,b);
		} else {
			c = sketcher_util_ColorUtil.rgba(r,g,b,a);
		}
		return c;
	}
	static getColourObj(rgb,a) {
		return sketcher_util_ColorUtil.getColour(rgb.r,rgb.g,rgb.b,a);
	}
	static rgb(r,g,b) {
		if(g == null) {
			g = r;
		}
		if(b == null) {
			b = r;
		}
		return "rgb(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(g),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(b),0,255) + ")";
	}
	static rgba(r,g,b,a) {
		if(g == null) {
			return "rgb(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ")";
		} else if(b == null) {
			return "rgba(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(g,0,1) + ")";
		} else if(a == null) {
			return "rgba(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(g),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(b),0,255) + ", 1)";
		} else {
			return "rgba(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(g),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(b),0,255) + ", " + sketcher_util_MathUtil.clamp(a,0,1) + ")";
		}
	}
	static rgbToHex(r,g,b) {
		return StringTools.hex(r,2) + StringTools.hex(g,2) + StringTools.hex(b,2);
	}
	static rgb2hex(r,g,b,a) {
		if(a == null) {
			a = 255;
		}
		return a << 24 | r << 16 | g << 8 | b;
	}
	static randomColour() {
		let r = sketcher_util_MathUtil.randomInt(255);
		let g = sketcher_util_MathUtil.randomInt(255);
		let b = sketcher_util_MathUtil.randomInt(255);
		return sketcher_util_ColorUtil.rgb(r,g,b);
	}
	static randomColourObject() {
		let r = sketcher_util_MathUtil.randomInt(255);
		let g = sketcher_util_MathUtil.randomInt(255);
		let b = sketcher_util_MathUtil.randomInt(255);
		return { r : r, g : g, b : b};
	}
	static toRGB(int) {
		return { r : Math.round(int >> 16 & 255), g : Math.round(int >> 8 & 255), b : Math.round(int & 255)};
	}
	static ttoRGB(int) {
		return { r : int >> 16 & 255, g : int >> 8 & 255, b : int & 255};
	}
	static assumption(value) {
		let _r = 0;
		let _g = 0;
		let _b = 0;
		let _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			let arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
		} else if(value.indexOf("#") != -1) {
			let int = Std.parseInt(StringTools.replace(value,"#","0x"));
			let rgb_r = int >> 16 & 255;
			let rgb_g = int >> 8 & 255;
			let rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		return { r : _r, g : _g, b : _b, a : _a};
	}
	static hex2RGB(hex) {
		let int = Std.parseInt(StringTools.replace(hex,"#","0x"));
		return { r : int >> 16 & 255, g : int >> 8 & 255, b : int & 255};
	}
}
sketcher_util_ColorUtil.__name__ = "sketcher.util.ColorUtil";
Object.assign(sketcher_util_ColorUtil.prototype, {
	__class__: sketcher_util_ColorUtil
});
class sketcher_util_GridUtil {
	constructor(w,h) {
		this._isDebug = false;
		this._isPosition = false;
		this._isDimension = false;
		this._isNumbered = false;
		this._isCellSize = false;
		this.totalColumn = null;
		this.numVer = null;
		this.totalRow = null;
		this.numHor = null;
		this.cellHeight = null;
		this.cellWidth = null;
		this.isFullscreen = false;
		this.isCentered = false;
		this.gridY = 0;
		this.gridX = 0;
		this.height = null;
		this.width = null;
		this.y = null;
		this.x = null;
		this.total = null;
		this.array = [];
		this._w = w;
		this._h = h;
	}
	xpos(x) {
		this._x = x;
		return this;
	}
	ypos(y) {
		this._y = y;
		return this;
	}
	pos(x,y) {
		this._x = x;
		this._y = y;
		return this;
	}
	dimension(w,h) {
		this._w = w;
		this._h = h;
		return this;
	}
	grid(hor,ver) {
		this._hor = hor;
		this._ver = ver;
		return this;
	}
	size(w,h) {
		this._cellw = w;
		this._cellh = h;
		return this;
	}
	centered() {
		this._center = true;
		return this;
	}
	debug() {
		this._debug = true;
		return this;
	}
	fullscreen() {
		this._fullscreen = true;
		return this;
	}
	color(value) {
		this._color = value;
		return this;
	}
	calc() {
		haxe_Log.trace("WIP",{ fileName : "src/sketcher/util/GridUtil.hx", lineNumber : 265, className : "sketcher.util.GridUtil", methodName : "calc"});
		return this;
	}
	setPosition(x,y) {
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " setPostion");
		}
		this.x = x;
		this.y = y;
		this._isPosition = true;
		this.calculate();
	}
	setIsCenterPoint(isCentered) {
		if(isCentered == null) {
			isCentered = true;
		}
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " setCenterPoint");
		}
		this.isCentered = isCentered;
		this.calculate();
	}
	setDebug(isDebug) {
		if(isDebug == null) {
			isDebug = true;
		}
		this._isDebug = isDebug;
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " setDebug");
		}
	}
	setIsFullscreen(isFullscreen) {
		if(isFullscreen == null) {
			isFullscreen = true;
		}
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " setIsFullscreen");
		}
		this.isFullscreen = isFullscreen;
		this.calculate();
	}
	setDimension(width,height) {
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " setDimension (width: " + width + ", height: " + height + ")");
		}
		this.width = width;
		this.height = height;
		this._isDimension = true;
		this.calculate();
	}
	setNumbered(numHor,numVer) {
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " setNumbers (numHor: " + numHor + ", numVer: " + numVer + ")");
		}
		this.numHor = numHor;
		this.numVer = numVer;
		this._isNumbered = true;
		this.calculate();
	}
	setTotal(total) {
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " setTotal (total: " + this.numHor + ")");
		}
		let val = Math.ceil(Math.sqrt(total));
		this.numHor = val;
		this.numVer = val;
		this._isNumbered = true;
		this.calculate();
	}
	setCellSize(cellWidth,cellHeight) {
		if(cellHeight == null) {
			cellHeight = cellWidth;
		}
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " setCellSize (cellWidth: " + cellWidth + ", cellHeight: " + cellHeight + ")");
		}
		this.cellWidth = cellWidth;
		this.cellHeight = cellHeight;
		this._isCellSize = true;
		this.calculate();
	}
	row(sh) {
		return this.getTablePosition(sh).row;
	}
	column(sh) {
		return this.getTablePosition(sh).column;
	}
	getTablePosition(sh) {
		let index = this.array.indexOf(sh);
		let _row = Math.floor(index / this.numHor);
		let _column = index - _row * this.numHor;
		return { "row" : _row, "column" : _column};
	}
	getIndex(point) {
		let index = this.array.indexOf(point);
		if(index == -1) {
			$global.console.warn("Looks like this point (" + point.x + ", " + point.y + ") is not in array");
		}
		return index;
	}
	getTablePoint(row,column) {
		if(row >= this.totalRow) {
			$global.console.warn("looks like the row is outside the grid (" + row + " >= " + this.totalRow + ")");
			return null;
		}
		if(column >= this.totalColumn) {
			$global.console.warn("looks like the column is outside the grid (" + column + " >= " + this.totalColumn + ")");
			return null;
		}
		if(row < 0) {
			$global.console.warn("looks like the row is outside the grid (" + row + " < 0)");
			return null;
		}
		if(column < 0) {
			$global.console.warn("looks like the column is outside the grid (" + column + " < 0)");
			return null;
		}
		return this.array[Math.round(row * this.numHor + column)];
	}
	reset() {
		this.array = [];
	}
	calculate() {
		if(this._isDebug) {
			$global.console.log("" + this.toString() + " calculate()");
		}
		if(this._isCellSize && !this._isDimension) {
			if(this._isDebug) {
				$global.console.info("" + this.toString() + " solution #1: cellSize is set");
			}
			this.numHor = Math.floor(this._w / this.cellWidth);
			this.numVer = Math.floor(this._h / this.cellHeight);
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
			this.x = (this._w - this.width) / 2;
			this.y = (this._h - this.height) / 2;
		}
		if(this._isNumbered && !this._isDimension) {
			if(this._isDebug) {
				$global.console.info("" + this.toString() + " solution #2: numbered cells set");
			}
			let __w = this.width != null ? this.width : this._w;
			let __h = this.height != null ? this.height : this._h;
			this.cellWidth = __w / this.numHor;
			this.cellHeight = __h / this.numVer;
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
			this.x = (this._w - this.width) / 2;
			this.y = (this._h - this.height) / 2;
			$global.console.groupCollapsed("GridUtil values (#2):");
			$global.console.info("cellWidth: " + this.cellWidth + ", \ncellHeight: " + this.cellHeight + ", \nwidth: " + this.width + ", \nheight: " + this.height + ", \nx: " + this.x + ", \ny: " + this.y);
			$global.console.groupEnd();
		}
		if(this._isDimension && !this._isNumbered && !this._isCellSize) {
			if(this._isDebug) {
				$global.console.info("" + this.toString() + " solution #3: width/height set (" + this.width + ", " + this.height + ")");
			}
			let _cellWidth = this.cellWidth != null ? this.cellWidth : 50;
			let _cellHeight = this.cellHeight != null ? this.cellHeight : 50;
			this.numHor = Math.floor(this.width / _cellWidth);
			this.numVer = Math.floor(this.height / _cellHeight);
			this.width = this.numHor * _cellWidth;
			this.height = this.numVer * _cellHeight;
			this.cellWidth = this.width / this.numHor;
			this.cellHeight = this.height / this.numVer;
			this.x = (this._w - this.width) / 2;
			this.y = (this._h - this.height) / 2;
		}
		if(this._isDimension && !this._isCellSize) {
			if(this._isDebug) {
				$global.console.info("" + this.toString() + " solution #3a: width/height set (" + this.width + ", " + this.height + ") AND number row/cols (" + this.numHor + ", " + this.numVer + ")");
			}
			this.cellWidth = Math.floor(this.width / this.numHor);
			this.cellHeight = Math.floor(this.height / this.numVer);
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
			if(!this._isPosition) {
				this.x = (this._w - this.width) / 2;
				this.y = (this._h - this.height) / 2;
			}
		}
		if(this._isDimension && this._isNumbered && !this._isCellSize) {
			if(this._isDebug) {
				$global.console.info("" + this.toString() + " solution #3b: w/h set (" + this.width + ", " + this.height + ") AND number row/cols (" + this.numHor + ", " + this.numVer + ")");
				$global.console.info("" + this.toString() + "  (" + this._w + ", " + this._h + ")");
			}
			this.cellWidth = Math.floor(this.width / this.numHor);
			this.cellHeight = Math.floor(this.height / this.numVer);
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
		}
		if(this._isCellSize && this._isDimension) {
			if(this._isDebug) {
				$global.console.info("" + this.toString() + " solution #4: cellSize is set and width/height");
			}
			this.numHor = Math.floor(this.width / this.cellWidth);
			this.numVer = Math.floor(this.height / this.cellHeight);
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
			if(!this._isPosition) {
				this.x = (this._w - this.width) / 2;
				this.y = (this._h - this.height) / 2;
			}
		}
		if(this.isFullscreen && this._isCellSize) {
			if(this._isDebug) {
				$global.console.info("" + this.toString() + " solution #5: fullscreen and cellSize is set");
			}
			this.width = this._w;
			this.height = this._h;
			this.numHor = Math.ceil(this.width / this.cellWidth);
			this.numVer = Math.ceil(this.height / this.cellHeight);
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
			this.x = (this._w - this.width) / 2;
			this.y = (this._h - this.height) / 2;
		}
		let cx = 0.0;
		let cy = 0.0;
		if(this.isCentered) {
			cx = this.cellWidth / 2;
			cy = this.cellHeight / 2;
		}
		this.array = [];
		let total = Math.round(this.numHor * this.numVer);
		let xpos = 0;
		let ypos = 0;
		let _g = 0;
		let _g1 = total;
		while(_g < _g1) {
			let i = _g++;
			let point = { x : Math.round(this.x + xpos * this.cellWidth + cx), y : Math.round(this.y + ypos * this.cellHeight + cy)};
			this.array.push(point);
			++xpos;
			if(xpos >= this.numHor) {
				xpos = 0;
				++ypos;
			}
		}
		total = this.array.length;
		if(this._isDebug) {
			$global.console.groupCollapsed("" + this.toString() + " Sata");
			$global.console.log("x: " + this.x + ", y: " + this.y + ", width: " + this.width + ", height: " + this.height + ", cellWidth: " + this.cellWidth + ", cellHeight: " + this.cellHeight + ", numHor: " + this.numHor + ", numVer: " + this.numVer + ", array: " + this.array.length);
			$global.console.table(this.array);
			$global.console.groupEnd();
		}
		this.totalRow = Math.round(this.numVer);
		this.totalColumn = Math.round(this.numHor);
	}
	toString() {
		return "[GridUtil]";
	}
	static create(w,h) {
		let GridUtil = new sketcher_util_GridUtil(w,h);
		return GridUtil;
	}
	static createGrid(x,y,width,height,numHor,numVer) {
		if(numVer == null) {
			numVer = 1;
		}
		if(numHor == null) {
			numHor = 1;
		}
		let gridW = width / (numHor - 1);
		let gridH = height / (numVer - 1);
		let total = numHor * numVer;
		let xpos = 0;
		let ypos = 0;
		let arr = [];
		let _g = 0;
		let _g1 = total;
		while(_g < _g1) {
			let i = _g++;
			let point = { x : x + xpos * gridW, y : y + ypos * gridH};
			arr.push(point);
			++xpos;
			if(xpos >= numHor) {
				xpos = 0;
				++ypos;
			}
		}
		return arr;
	}
}
sketcher_util_GridUtil.__name__ = "sketcher.util.GridUtil";
Object.assign(sketcher_util_GridUtil.prototype, {
	__class__: sketcher_util_GridUtil
});
class sketcher_util_MathUtil {
	static radians(deg) {
		return deg * Math.PI / 180;
	}
	static degrees(rad) {
		return rad * 180 / Math.PI;
	}
	static degreesToPoint(deg,diameter) {
		let rad = Math.PI * deg / 180;
		let r = diameter / 2;
		return { x : r * Math.cos(rad), y : r * Math.sin(rad)};
	}
	static distributeAngles(me,total) {
		return me / total * 360;
	}
	static isPositive(nr) {
		if(nr < 0) {
			nr *= -1;
		}
		return nr;
	}
	static distance(x1,y1,x2,y2) {
		return sketcher_util_MathUtil.dist(x1,y1,x2,y2);
	}
	static distancePoint(p0,p1) {
		return sketcher_util_MathUtil.dist(p0.x,p0.y,p1.x,p1.y);
	}
	static dist(x1,y1,x2,y2) {
		x2 -= x1;
		y2 -= y1;
		return Math.sqrt(x2 * x2 + y2 * y2);
	}
	static pythagoreanTheorem(a,b,c) {
		if(a == null && b == null && c == null) {
			haxe_Log.trace("Really? Perhaps you should use some data",{ fileName : "src/sketcher/util/MathUtil.hx", lineNumber : 123, className : "sketcher.util.MathUtil", methodName : "pythagoreanTheorem"});
			return 0;
		}
		let value = 0.0;
		if(c == null || c == 0) {
			value = Math.sqrt(a * a + b * b);
		}
		if(a == null || a == 0) {
			value = Math.sqrt(c * c - b * b);
		}
		if(b == null || b == 0) {
			value = Math.sqrt(c * c - a * a);
		}
		return value;
	}
	static circumferenceCircle(radius) {
		return Math.PI * radius * 2;
	}
	static circumference2RadiusCircle(circumference) {
		return circumference / (Math.PI * 2);
	}
	static areaCircle(radius) {
		return Math.PI * Math.sqrt(radius);
	}
	static randomInteger(min,max) {
		if(max == null) {
			max = min;
			min = 0;
		}
		return Math.floor(Math.random() * (max + 1 - min)) + min;
	}
	static randomInt(min,max) {
		return sketcher_util_MathUtil.randomInteger(min,max);
	}
	static random(min,max) {
		if(min == null) {
			min = 0;
			max = 1;
		} else if(max == null) {
			max = min;
			min = 0;
		}
		return Math.random() * (max - min) + min;
	}
	static randomP(min,max) {
		if(min == null) {
			min = 0.1;
			max = 1;
		} else if(max == null) {
			max = min;
			min = 0.1;
		}
		return Math.random() * (max - min) + min;
	}
	static chance(value) {
		if(value > 1) {
			value /= 100;
		}
		return Math.random() < value;
	}
	static chanceTrue(value) {
		if(value > 1) {
			value /= 100;
		}
		return Math.random() < value;
	}
	static chanceFalse(value) {
		if(value > 1) {
			value /= 100;
		}
		return Math.random() > value;
	}
	static posNeg() {
		return sketcher_util_MathUtil.randomInt(0,1) * 2 - 1;
	}
	static flip() {
		return Math.random() < 0.5;
	}
	static angle(cx,cy,ex,ey) {
		let dy = ey - cy;
		let dx = ex - cx;
		let theta = Math.atan2(dy,dx);
		theta *= 180 / Math.PI;
		if(theta < 0) {
			theta = 360 + theta;
		}
		if(theta == 360) {
			theta = 0;
		}
		return theta;
	}
	static map(value,min1,max1,min2,max2,clampResult) {
		let returnvalue = (value - min1) / (max1 - min1) * (max2 - min2) + min2;
		if(clampResult) {
			return sketcher_util_MathUtil.clamp(returnvalue,min2,max2);
		} else {
			return returnvalue;
		}
	}
	static orbit(xpos,ypos,angle,radius) {
		let _xpos = xpos + Math.cos(sketcher_util_MathUtil.radians(angle)) * radius;
		let _ypos = ypos + Math.sin(sketcher_util_MathUtil.radians(angle)) * radius;
		return { x : _xpos, y : _ypos};
	}
	static orbitX(origin,angle,radius) {
		return origin + Math.cos(sketcher_util_MathUtil.radians(angle)) * radius;
	}
	static orbitY(origin,angle,radius) {
		return origin + Math.sin(sketcher_util_MathUtil.radians(angle)) * radius;
	}
	static orbitZ(origin,angle,radius) {
		return origin + Math.cos(sketcher_util_MathUtil.radians(angle)) * radius;
	}
	static shuffle(array) {
		let currentIndex = array.length;
		let temporaryValue;
		let randomIndex;
		while(0 != currentIndex) {
			randomIndex = Math.floor(Math.random() * currentIndex);
			--currentIndex;
			temporaryValue = array[currentIndex];
			array[currentIndex] = array[randomIndex];
			array[randomIndex] = temporaryValue;
		}
		return array;
	}
	static clamp(value,min,max) {
		return Math.min(Math.max(value,Math.min(min,max)),Math.max(min,max));
	}
	static formatByteSizeString(bytes) {
		if(bytes < 1024) {
			return bytes + " bytes";
		} else if(bytes < 1048576) {
			return sketcher_util_MathUtil.toFixed(bytes / 1024,3) + " KiB";
		} else if(bytes < 1073741824) {
			return sketcher_util_MathUtil.toFixed(bytes / 1048576,3) + " MiB";
		} else {
			return sketcher_util_MathUtil.toFixed(bytes / 1073741824,3) + " GiB";
		}
	}
	static formatByteSize(bytes) {
		if(bytes < 1024) {
			return bytes;
		} else if(bytes < 1048576) {
			return sketcher_util_MathUtil.toFixed(bytes / 1024,3);
		} else if(bytes < 1073741824) {
			return sketcher_util_MathUtil.toFixed(bytes / 1048576,3);
		} else {
			return sketcher_util_MathUtil.toFixed(bytes / 1073741824,3);
		}
	}
	static toFixed(number,precision) {
		if(precision == null) {
			precision = 2;
		}
		number *= Math.pow(10,precision);
		return Math.round(number) / Math.pow(10,precision);
	}
	static CASsostoa(angleInDegree,aSide,sSide) {
		if(angleInDegree == null) {
			return sketcher_util_MathUtil.toDegree(Math.acos(aSide / sSide));
		}
		if(aSide == null) {
			return Math.cos(sketcher_util_MathUtil.toRadian(angleInDegree)) * sSide;
		}
		if(sSide == null) {
			return aSide / Math.cos(sketcher_util_MathUtil.toRadian(angleInDegree));
		}
		return null;
	}
	static cas(angleInDegree,aSide,sSide) {
		return sketcher_util_MathUtil.CASsostoa(angleInDegree,aSide,sSide);
	}
	static casSOStoa(angleInDegree,oSide,sSide) {
		if(angleInDegree == null) {
			return sketcher_util_MathUtil.toDegree(Math.asin(oSide / sSide));
		}
		if(oSide == null) {
			return Math.sin(sketcher_util_MathUtil.toRadian(angleInDegree)) * sSide;
		}
		if(sSide == null) {
			return oSide / Math.sin(sketcher_util_MathUtil.toRadian(angleInDegree));
		}
		return null;
	}
	static sos(angleInDegree,oSide,sSide) {
		return sketcher_util_MathUtil.casSOStoa(angleInDegree,oSide,sSide);
	}
	static cassosTOA(angleInDegree,oSide,aSide) {
		if(angleInDegree == null) {
			return sketcher_util_MathUtil.toDegree(Math.atan(oSide / aSide));
		}
		if(oSide == null) {
			return Math.tan(sketcher_util_MathUtil.toRadian(angleInDegree)) * aSide;
		}
		if(aSide == null) {
			return oSide / Math.tan(sketcher_util_MathUtil.toRadian(angleInDegree));
		}
		return null;
	}
	static toa(angleInDegree,oSide,aSide) {
		return sketcher_util_MathUtil.cassosTOA(angleInDegree,oSide,aSide);
	}
	static mm2pixel(value) {
		let dpi = 96;
		return value * dpi / 25.4;
	}
	static mm2px(value) {
		return sketcher_util_MathUtil.mm2pixel(value);
	}
	static pixel2mm(value) {
		let dpi = 96;
		return value * 25.4 / dpi;
	}
	static px2mm(value) {
		return sketcher_util_MathUtil.pixel2mm(value);
	}
	static toDegree(angleRadian) {
		let degrees = angleRadian / (Math.PI / 180);
		return degrees;
	}
	static toRadian(angleInDegree) {
		let radians = angleInDegree * Math.PI / 180;
		return radians;
	}
}
sketcher_util_MathUtil.__name__ = "sketcher.util.MathUtil";
class sys_FileSystem {
	static exists(path) {
		try {
			js_node_Fs.accessSync(path);
			return true;
		} catch( _g ) {
			return false;
		}
	}
	static createDirectory(path) {
		try {
			js_node_Fs.mkdirSync(path);
		} catch( _g ) {
			let e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "ENOENT") {
				sys_FileSystem.createDirectory(js_node_Path.dirname(path));
				js_node_Fs.mkdirSync(path);
			} else {
				let stat;
				try {
					stat = js_node_Fs.statSync(path);
				} catch( _g ) {
					throw e;
				}
				if(!stat.isDirectory()) {
					throw e;
				}
			}
		}
	}
}
sys_FileSystem.__name__ = "sys.FileSystem";
class sys_io_FileInput extends haxe_io_Input {
	constructor(fd) {
		super();
		this.fd = fd;
		this.pos = 0;
	}
	readByte() {
		let buf = js_node_buffer_Buffer.alloc(1);
		let bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,0,1,this.pos);
		} catch( _g ) {
			let e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		if(bytesRead == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos++;
		return buf[0];
	}
	readBytes(s,pos,len) {
		let data = s.b;
		let buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		let bytesRead;
		try {
			bytesRead = js_node_Fs.readSync(this.fd,buf,pos,len,this.pos);
		} catch( _g ) {
			let e = haxe_Exception.caught(_g).unwrap();
			if(e.code == "EOF") {
				throw haxe_Exception.thrown(new haxe_io_Eof());
			} else {
				throw haxe_Exception.thrown(haxe_io_Error.Custom(e));
			}
		}
		if(bytesRead == 0) {
			throw haxe_Exception.thrown(new haxe_io_Eof());
		}
		this.pos += bytesRead;
		return bytesRead;
	}
	close() {
		js_node_Fs.closeSync(this.fd);
	}
	seek(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	tell() {
		return this.pos;
	}
	eof() {
		return this.pos >= js_node_Fs.fstatSync(this.fd).size;
	}
}
sys_io_FileInput.__name__ = "sys.io.FileInput";
sys_io_FileInput.__super__ = haxe_io_Input;
Object.assign(sys_io_FileInput.prototype, {
	__class__: sys_io_FileInput
});
class sys_io_FileOutput extends haxe_io_Output {
	constructor(fd) {
		super();
		this.fd = fd;
		this.pos = 0;
	}
	writeByte(b) {
		let buf = js_node_buffer_Buffer.alloc(1);
		buf[0] = b;
		js_node_Fs.writeSync(this.fd,buf,0,1,this.pos);
		this.pos++;
	}
	writeBytes(s,pos,len) {
		let data = s.b;
		let buf = js_node_buffer_Buffer.from(data.buffer,data.byteOffset,s.length);
		let wrote = js_node_Fs.writeSync(this.fd,buf,pos,len,this.pos);
		this.pos += wrote;
		return wrote;
	}
	close() {
		js_node_Fs.closeSync(this.fd);
	}
	seek(p,pos) {
		switch(pos._hx_index) {
		case 0:
			this.pos = p;
			break;
		case 1:
			this.pos += p;
			break;
		case 2:
			this.pos = js_node_Fs.fstatSync(this.fd).size + p;
			break;
		}
	}
	tell() {
		return this.pos;
	}
}
sys_io_FileOutput.__name__ = "sys.io.FileOutput";
sys_io_FileOutput.__super__ = haxe_io_Output;
Object.assign(sys_io_FileOutput.prototype, {
	__class__: sys_io_FileOutput
});
var sys_io_FileSeek = $hxEnums["sys.io.FileSeek"] = { __ename__:true,__constructs__:null
	,SeekBegin: {_hx_name:"SeekBegin",_hx_index:0,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekCur: {_hx_name:"SeekCur",_hx_index:1,__enum__:"sys.io.FileSeek",toString:$estr}
	,SeekEnd: {_hx_name:"SeekEnd",_hx_index:2,__enum__:"sys.io.FileSeek",toString:$estr}
};
sys_io_FileSeek.__constructs__ = [sys_io_FileSeek.SeekBegin,sys_io_FileSeek.SeekCur,sys_io_FileSeek.SeekEnd];
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
{
	String.prototype.__class__ = String;
	String.__name__ = "String";
	Array.__name__ = "Array";
	Date.prototype.__class__ = Date;
	Date.__name__ = "Date";
	var Int = { };
	var Dynamic = { };
	var Float = Number;
	var Bool = Boolean;
	var Class = { };
	var Enum = { };
}
js_Boot.__toStr = ({ }).toString;
Globals.MOUSE_DOWN = "mousedown";
Globals.MOUSE_UP = "mouseup";
Globals.MOUSE_MOVE = "mousemove";
Globals.KEY_DOWN = "keydown";
Globals.KEY_UP = "keyup";
Globals.RESIZE = "resize";
Globals.isMouseDown = false;
Globals.mousePressed = 0;
Globals.mouseReleased = 0;
Globals.isFullscreen = false;
Globals.TWO_PI = Math.PI * 2;
Sketcher.UNIQ_ID = "";
Sketcher.SVG_UNIQ_ID = "";
SketcherCore._hx_skip_constructor = false;
SketcherSVG.UNIQ_ID = "";
SketcherSVG.SVG_UNIQ_ID = "";
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	let h = new haxe_ds_StringMap();
	h.h["lt"] = "<";
	h.h["gt"] = ">";
	h.h["amp"] = "&";
	h.h["quot"] = "\"";
	h.h["apos"] = "'";
	$r = h;
	return $r;
}(this));
sketcher_draw_Base._hx_skip_constructor = false;
sketcher_draw_Base.COUNT = 0;
sketcher_util_ColorUtil.NAVY = { r : Math.round(0), g : Math.round(31), b : Math.round(63)};
sketcher_util_ColorUtil.BLUE = { r : Math.round(0), g : Math.round(116), b : Math.round(217)};
sketcher_util_ColorUtil.AQUA = { r : Math.round(127), g : Math.round(219), b : Math.round(255)};
sketcher_util_ColorUtil.TEAL = { r : Math.round(57), g : Math.round(204), b : Math.round(204)};
sketcher_util_ColorUtil.OLIVE = { r : Math.round(61), g : Math.round(153), b : Math.round(112)};
sketcher_util_ColorUtil.GREEN = { r : Math.round(46), g : Math.round(204), b : Math.round(64)};
sketcher_util_ColorUtil.LIME = { r : Math.round(1), g : Math.round(255), b : Math.round(112)};
sketcher_util_ColorUtil.YELLOW = { r : Math.round(255), g : Math.round(220), b : Math.round(0)};
sketcher_util_ColorUtil.ORANGE = { r : Math.round(255), g : Math.round(133), b : Math.round(27)};
sketcher_util_ColorUtil.RED = { r : Math.round(255), g : Math.round(65), b : Math.round(54)};
sketcher_util_ColorUtil.MAROON = { r : Math.round(133), g : Math.round(20), b : Math.round(75)};
sketcher_util_ColorUtil.FUCHSIA = { r : Math.round(240), g : Math.round(18), b : Math.round(190)};
sketcher_util_ColorUtil.PURPLE = { r : Math.round(177), g : Math.round(13), b : Math.round(201)};
sketcher_util_ColorUtil.BLACK = { r : Math.round(17), g : Math.round(17), b : Math.round(17)};
sketcher_util_ColorUtil.GRAY = { r : Math.round(170), g : Math.round(170), b : Math.round(170)};
sketcher_util_ColorUtil.SILVER = { r : Math.round(221), g : Math.round(221), b : Math.round(221)};
sketcher_util_ColorUtil.WHITE = { r : Math.round(255), g : Math.round(255), b : Math.round(255)};
sketcher_util_ColorUtil.PINK = { r : Math.round(255), g : Math.round(20), b : Math.round(147)};
sketcher_util_ColorUtil.PINK_DEEP = { r : Math.round(255), g : Math.round(20), b : Math.round(147)};
sketcher_util_ColorUtil.PINK_HOT = { r : Math.round(255), g : Math.round(105), b : Math.round(180)};
sketcher_util_ColorUtil.niceColor100 = [["#69d2e7","#a7dbd8","#e0e4cc","#f38630","#fa6900"],["#fe4365","#fc9d9a","#f9cdad","#c8c8a9","#83af9b"],["#ecd078","#d95b43","#c02942","#542437","#53777a"],["#556270","#4ecdc4","#c7f464","#ff6b6b","#c44d58"],["#774f38","#e08e79","#f1d4af","#ece5ce","#c5e0dc"],["#e8ddcb","#cdb380","#036564","#033649","#031634"],["#490a3d","#bd1550","#e97f02","#f8ca00","#8a9b0f"],["#594f4f","#547980","#45ada8","#9de0ad","#e5fcc2"],["#00a0b0","#6a4a3c","#cc333f","#eb6841","#edc951"],["#e94e77","#d68189","#c6a49a","#c6e5d9","#f4ead5"],["#3fb8af","#7fc7af","#dad8a7","#ff9e9d","#ff3d7f"],["#d9ceb2","#948c75","#d5ded9","#7a6a53","#99b2b7"],["#ffffff","#cbe86b","#f2e9e1","#1c140d","#cbe86b"],["#efffcd","#dce9be","#555152","#2e2633","#99173c"],["#343838","#005f6b","#008c9e","#00b4cc","#00dffc"],["#413e4a","#73626e","#b38184","#f0b49e","#f7e4be"],["#ff4e50","#fc913a","#f9d423","#ede574","#e1f5c4"],["#99b898","#fecea8","#ff847c","#e84a5f","#2a363b"],["#655643","#80bca3","#f6f7bd","#e6ac27","#bf4d28"],["#00a8c6","#40c0cb","#f9f2e7","#aee239","#8fbe00"],["#351330","#424254","#64908a","#e8caa4","#cc2a41"],["#554236","#f77825","#d3ce3d","#f1efa5","#60b99a"],["#ff9900","#424242","#e9e9e9","#bcbcbc","#3299bb"],["#5d4157","#838689","#a8caba","#cad7b2","#ebe3aa"],["#8c2318","#5e8c6a","#88a65e","#bfb35a","#f2c45a"],["#fad089","#ff9c5b","#f5634a","#ed303c","#3b8183"],["#ff4242","#f4fad2","#d4ee5e","#e1edb9","#f0f2eb"],["#d1e751","#ffffff","#000000","#4dbce9","#26ade4"],["#f8b195","#f67280","#c06c84","#6c5b7b","#355c7d"],["#1b676b","#519548","#88c425","#bef202","#eafde6"],["#bcbdac","#cfbe27","#f27435","#f02475","#3b2d38"],["#5e412f","#fcebb6","#78c0a8","#f07818","#f0a830"],["#452632","#91204d","#e4844a","#e8bf56","#e2f7ce"],["#eee6ab","#c5bc8e","#696758","#45484b","#36393b"],["#f0d8a8","#3d1c00","#86b8b1","#f2d694","#fa2a00"],["#f04155","#ff823a","#f2f26f","#fff7bd","#95cfb7"],["#2a044a","#0b2e59","#0d6759","#7ab317","#a0c55f"],["#bbbb88","#ccc68d","#eedd99","#eec290","#eeaa88"],["#b9d7d9","#668284","#2a2829","#493736","#7b3b3b"],["#b3cc57","#ecf081","#ffbe40","#ef746f","#ab3e5b"],["#a3a948","#edb92e","#f85931","#ce1836","#009989"],["#67917a","#170409","#b8af03","#ccbf82","#e33258"],["#e8d5b7","#0e2430","#fc3a51","#f5b349","#e8d5b9"],["#aab3ab","#c4cbb7","#ebefc9","#eee0b7","#e8caaf"],["#300030","#480048","#601848","#c04848","#f07241"],["#ab526b","#bca297","#c5ceae","#f0e2a4","#f4ebc3"],["#607848","#789048","#c0d860","#f0f0d8","#604848"],["#a8e6ce","#dcedc2","#ffd3b5","#ffaaa6","#ff8c94"],["#3e4147","#fffedf","#dfba69","#5a2e2e","#2a2c31"],["#b6d8c0","#c8d9bf","#dadabd","#ecdbbc","#fedcba"],["#fc354c","#29221f","#13747d","#0abfbc","#fcf7c5"],["#1c2130","#028f76","#b3e099","#ffeaad","#d14334"],["#edebe6","#d6e1c7","#94c7b6","#403b33","#d3643b"],["#cc0c39","#e6781e","#c8cf02","#f8fcc1","#1693a7"],["#dad6ca","#1bb0ce","#4f8699","#6a5e72","#563444"],["#a7c5bd","#e5ddcb","#eb7b59","#cf4647","#524656"],["#fdf1cc","#c6d6b8","#987f69","#e3ad40","#fcd036"],["#5c323e","#a82743","#e15e32","#c0d23e","#e5f04c"],["#230f2b","#f21d41","#ebebbc","#bce3c5","#82b3ae"],["#b9d3b0","#81bda4","#b28774","#f88f79","#f6aa93"],["#3a111c","#574951","#83988e","#bcdea5","#e6f9bc"],["#5e3929","#cd8c52","#b7d1a3","#dee8be","#fcf7d3"],["#1c0113","#6b0103","#a30006","#c21a01","#f03c02"],["#382f32","#ffeaf2","#fcd9e5","#fbc5d8","#f1396d"],["#e3dfba","#c8d6bf","#93ccc6","#6cbdb5","#1a1f1e"],["#000000","#9f111b","#b11623","#292c37","#cccccc"],["#c1b398","#605951","#fbeec2","#61a6ab","#accec0"],["#8dccad","#988864","#fea6a2","#f9d6ac","#ffe9af"],["#f6f6f6","#e8e8e8","#333333","#990100","#b90504"],["#1b325f","#9cc4e4","#e9f2f9","#3a89c9","#f26c4f"],["#5e9fa3","#dcd1b4","#fab87f","#f87e7b","#b05574"],["#951f2b","#f5f4d7","#e0dfb1","#a5a36c","#535233"],["#413d3d","#040004","#c8ff00","#fa023c","#4b000f"],["#eff3cd","#b2d5ba","#61ada0","#248f8d","#605063"],["#2d2d29","#215a6d","#3ca2a2","#92c7a3","#dfece6"],["#cfffdd","#b4dec1","#5c5863","#a85163","#ff1f4c"],["#4e395d","#827085","#8ebe94","#ccfc8e","#dc5b3e"],["#9dc9ac","#fffec7","#f56218","#ff9d2e","#919167"],["#a1dbb2","#fee5ad","#faca66","#f7a541","#f45d4c"],["#ffefd3","#fffee4","#d0ecea","#9fd6d2","#8b7a5e"],["#a8a7a7","#cc527a","#e8175d","#474747","#363636"],["#ffedbf","#f7803c","#f54828","#2e0d23","#f8e4c1"],["#f8edd1","#d88a8a","#474843","#9d9d93","#c5cfc6"],["#f38a8a","#55443d","#a0cab5","#cde9ca","#f1edd0"],["#4e4d4a","#353432","#94ba65","#2790b0","#2b4e72"],["#0ca5b0","#4e3f30","#fefeeb","#f8f4e4","#a5b3aa"],["#a70267","#f10c49","#fb6b41","#f6d86b","#339194"],["#9d7e79","#ccac95","#9a947c","#748b83","#5b756c"],["#edf6ee","#d1c089","#b3204d","#412e28","#151101"],["#046d8b","#309292","#2fb8ac","#93a42a","#ecbe13"],["#4d3b3b","#de6262","#ffb88c","#ffd0b3","#f5e0d3"],["#fffbb7","#a6f6af","#66b6ab","#5b7c8d","#4f2958"],["#ff003c","#ff8a00","#fabe28","#88c100","#00c176"],["#fcfef5","#e9ffe1","#cdcfb7","#d6e6c3","#fafbe3"],["#9cddc8","#bfd8ad","#ddd9ab","#f7af63","#633d2e"],["#30261c","#403831","#36544f","#1f5f61","#0b8185"],["#d1313d","#e5625c","#f9bf76","#8eb2c5","#615375"],["#ffe181","#eee9e5","#fad3b2","#ffba7f","#ff9c97"],["#aaff00","#ffaa00","#ff00aa","#aa00ff","#00aaff"],["#c2412d","#d1aa34","#a7a844","#a46583","#5a1e4a"]];
sketcher_util_ColorUtil.niceColor100SortedString = [["#E0E4CC","#A7DBD8","#69D2E7","#F38630","#FA6900"],["#F9CDAD","#C8C8A9","#FC9D9A","#83AF9B","#FE4365"],["#ECD078","#D95B43","#53777A","#C02942","#542437"],["#C7F464","#4ECDC4","#FF6B6B","#C44D58","#556270"],["#ECE5CE","#F1D4AF","#C5E0DC","#E08E79","#774F38"],["#E8DDCB","#CDB380","#036564","#033649","#031634"],["#F8CA00","#E97F02","#8A9B0F","#BD1550","#490A3D"],["#E5FCC2","#9DE0AD","#45ADA8","#547980","#594F4F"],["#EDC951","#EB6841","#00A0B0","#CC333F","#6A4A3C"],["#F4EAD5","#C6E5D9","#C6A49A","#D68189","#E94E77"],["#DAD8A7","#FF9E9D","#7FC7AF","#3FB8AF","#FF3D7F"],["#D5DED9","#D9CEB2","#99B2B7","#948C75","#7A6A53"],["#FFFFFF","#F2E9E1","#CBE86B","#CBE86B","#1C140D"],["#EFFFCD","#DCE9BE","#555152","#99173C","#2E2633"],["#00DFFC","#00B4CC","#008C9E","#005F6B","#343838"],["#F7E4BE","#F0B49E","#B38184","#73626E","#413E4A"],["#E1F5C4","#EDE574","#F9D423","#FC913A","#FF4E50"],["#FECEA8","#99B898","#FF847C","#E84A5F","#2A363B"],["#F6F7BD","#E6AC27","#80BCA3","#BF4D28","#655643"],["#F9F2E7","#AEE239","#40C0CB","#8FBE00","#00A8C6"],["#E8CAA4","#64908A","#CC2A41","#424254","#351330"],["#F1EFA5","#D3CE3D","#60B99A","#F77825","#554236"],["#E9E9E9","#BCBCBC","#FF9900","#3299BB","#424242"],["#EBE3AA","#CAD7B2","#A8CABA","#838689","#5D4157"],["#F2C45A","#BFB35A","#88A65E","#5E8C6A","#8C2318"],["#FAD089","#FF9C5B","#F5634A","#3B8183","#ED303C"],["#F4FAD2","#F0F2EB","#E1EDB9","#D4EE5E","#FF4242"],["#FFFFFF","#D1E751","#4DBCE9","#26ADE4","#000000"],["#F8B195","#F67280","#C06C84","#6C5B7B","#355C7D"],["#EAFDE6","#BEF202","#88C425","#519548","#1B676B"],["#BCBDAC","#CFBE27","#F27435","#F02475","#3B2D38"],["#FCEBB6","#F0A830","#78C0A8","#F07818","#5E412F"],["#E2F7CE","#E8BF56","#E4844A","#91204D","#452632"],["#EEE6AB","#C5BC8E","#696758","#45484B","#36393B"],["#F0D8A8","#F2D694","#86B8B1","#FA2A00","#3D1C00"],["#FFF7BD","#F2F26F","#95CFB7","#FF823A","#F04155"],["#A0C55F","#7AB317","#0D6759","#0B2E59","#2A044A"],["#EEDD99","#EEC290","#CCC68D","#EEAA88","#BBBB88"],["#B9D7D9","#668284","#7B3B3B","#493736","#2A2829"],["#ECF081","#FFBE40","#B3CC57","#EF746F","#AB3E5B"],["#EDB92E","#A3A948","#F85931","#009989","#CE1836"],["#CCBF82","#B8AF03","#67917A","#E33258","#170409"],["#E8D5B9","#E8D5B7","#F5B349","#FC3A51","#0E2430"],["#EBEFC9","#EEE0B7","#E8CAAF","#C4CBB7","#AAB3AB"],["#F07241","#C04848","#601848","#480048","#300030"],["#F4EBC3","#F0E2A4","#C5CEAE","#BCA297","#AB526B"],["#F0F0D8","#C0D860","#789048","#607848","#604848"],["#DCEDC2","#FFD3B5","#A8E6CE","#FFAAA6","#FF8C94"],["#FFFEDF","#DFBA69","#3E4147","#5A2E2E","#2A2C31"],["#FEDCBA","#ECDBBC","#DADABD","#C8D9BF","#B6D8C0"],["#FCF7C5","#0ABFBC","#FC354C","#13747D","#29221F"],["#FFEAAD","#B3E099","#D14334","#028F76","#1C2130"],["#EDEBE6","#D6E1C7","#94C7B6","#D3643B","#403B33"],["#F8FCC1","#C8CF02","#E6781E","#1693A7","#CC0C39"],["#DAD6CA","#1BB0CE","#4F8699","#6A5E72","#563444"],["#E5DDCB","#A7C5BD","#EB7B59","#CF4647","#524656"],["#FDF1CC","#C6D6B8","#FCD036","#E3AD40","#987F69"],["#E5F04C","#C0D23E","#E15E32","#A82743","#5C323E"],["#EBEBBC","#BCE3C5","#82B3AE","#F21D41","#230F2B"],["#B9D3B0","#F6AA93","#F88F79","#81BDA4","#B28774"],["#E6F9BC","#BCDEA5","#83988E","#574951","#3A111C"],["#FCF7D3","#DEE8BE","#B7D1A3","#CD8C52","#5E3929"],["#F03C02","#C21A01","#A30006","#6B0103","#1C0113"],["#FFEAF2","#FCD9E5","#FBC5D8","#F1396D","#382F32"],["#E3DFBA","#C8D6BF","#93CCC6","#6CBDB5","#1A1F1E"],["#CCCCCC","#B11623","#9F111B","#292C37","#000000"],["#FBEEC2","#ACCEC0","#C1B398","#61A6AB","#605951"],["#FFE9AF","#F9D6AC","#FEA6A2","#8DCCAD","#988864"],["#F6F6F6","#E8E8E8","#B90504","#333333","#990100"],["#E9F2F9","#9CC4E4","#F26C4F","#3A89C9","#1B325F"],["#DCD1B4","#FAB87F","#F87E7B","#5E9FA3","#B05574"],["#F5F4D7","#E0DFB1","#A5A36C","#535233","#951F2B"],["#C8FF00","#FA023C","#413D3D","#4B000F","#040004"],["#EFF3CD","#B2D5BA","#61ADA0","#248F8D","#605063"],["#DFECE6","#92C7A3","#3CA2A2","#215A6D","#2D2D29"],["#CFFFDD","#B4DEC1","#A85163","#FF1F4C","#5C5863"],["#CCFC8E","#8EBE94","#DC5B3E","#827085","#4E395D"],["#FFFEC7","#9DC9AC","#FF9D2E","#919167","#F56218"],["#FEE5AD","#FACA66","#A1DBB2","#F7A541","#F45D4C"],["#FFFEE4","#FFEFD3","#D0ECEA","#9FD6D2","#8B7A5E"],["#A8A7A7","#CC527A","#E8175D","#474747","#363636"],["#FFEDBF","#F8E4C1","#F7803C","#F54828","#2E0D23"],["#F8EDD1","#C5CFC6","#D88A8A","#9D9D93","#474843"],["#F1EDD0","#CDE9CA","#A0CAB5","#F38A8A","#55443D"],["#94BA65","#2790B0","#4E4D4A","#2B4E72","#353432"],["#FEFEEB","#F8F4E4","#A5B3AA","#0CA5B0","#4E3F30"],["#F6D86B","#FB6B41","#339194","#F10C49","#A70267"],["#CCAC95","#9A947C","#9D7E79","#748B83","#5B756C"],["#EDF6EE","#D1C089","#B3204D","#412E28","#151101"],["#ECBE13","#93A42A","#2FB8AC","#309292","#046D8B"],["#F5E0D3","#FFD0B3","#FFB88C","#DE6262","#4D3B3B"],["#FFFBB7","#A6F6AF","#66B6AB","#5B7C8D","#4F2958"],["#FABE28","#FF8A00","#88C100","#00C176","#FF003C"],["#FCFEF5","#FAFBE3","#E9FFE1","#D6E6C3","#CDCFB7"],["#DDD9AB","#BFD8AD","#9CDDC8","#F7AF63","#633D2E"],["#0B8185","#1F5F61","#36544F","#403831","#30261C"],["#F9BF76","#8EB2C5","#E5625C","#D1313D","#615375"],["#EEE9E5","#FFE181","#FAD3B2","#FFBA7F","#FF9C97"],["#AAFF00","#FFAA00","#00AAFF","#FF00AA","#AA00FF"],["#D1AA34","#A7A844","#A46583","#C2412D","#5A1E4A"],["#F8F3BF","#DCE4F7","#BFCFF7","#75616B","#D34017"]];
sketcher_util_ColorUtil.niceColor100SortedInt = [[14738636,11000792,6935271,15959600,16410880],[16371117,13158569,16555418,8630171,16663397],[15519864,14244675,5470074,12593474,5514295],[13104228,5164484,16739179,12864856,5595760],[15525326,15848623,12968156,14716537,7819064],[15261131,13480832,222564,210505,202292],[16304640,15302402,9083663,12391760,4786749],[15072450,10346669,4566440,5536128,5853007],[15583569,15427649,41136,13382463,6965820],[16050901,13034969,13018266,14057865,15289975],[14342311,16752285,8374191,4176047,16727423],[14016217,14274226,10072759,9735285,8022611],[16777215,15919585,13363307,13363307,1840141],[15728589,14477758,5591378,10032956,3024435],[57340,46284,35998,24427,3422264],[16245950,15774878,11764100,7561838,4275786],[14808516,15590772,16372771,16552250,16731728],[16699048,10074264,16745596,15223391,2766395],[16185277,15117351,8436899,12537128,6641219],[16380647,11461177,4243659,9420288,43206],[15256228,6590602,13380161,4342356,3478320],[15855525,13880893,6338970,16218149,5587510],[15329769,12369084,16750848,3316155,4342338],[15459242,13293490,11061946,8619657,6111575],[15909978,12563290,8955486,6196330,9184024],[16437385,16751707,16081738,3899779,15544380],[16054994,15790827,14806457,13954654,16728642],[16777215,13756241,5094633,2534884,0],[16298389,16151168,12610692,7101307,3497085],[15400422,12513794,8963109,5346632,1795947],[12369324,13614631,15889461,15737973,3878200],[16575414,15771696,7913640,15759384,6177071],[14874574,15253334,14976074,9510989,4531762],[15656619,12958862,6907736,4540491,3553595],[15784104,15914644,8829105,16394752,4004864],[16775101,15921775,9818039,16745018,15745365],[10536287,8041239,878425,732761,2753610],[15654297,15647376,13420173,15641224,12303240],[12179417,6718084,8076091,4798262,2762793],[15528065,16760384,11783255,15692911,11222619],[15579438,10725704,16275761,39305,13506614],[13418370,12103427,6787450,14889560,1508361],[15259065,15259063,16102217,16530001,926768],[15462345,15655095,15256239,12897207,11187115],[15757889,12601416,6297672,4718664,3145776],[16051139,15786660,12963502,12362391,11227755],[15790296,12638304,7901256,6322248,6309960],[14478786,16765877,11069134,16755366,16747668],[16776927,14662249,4079943,5910062,2763825],[16702650,15522748,14342845,13162943,11983040],[16578501,704444,16528716,1275005,2695711],[16771757,11788441,13714228,167798,1843504],[15592422,14082503,9750454,13853755,4209459],[16317633,13160194,15104030,1479591,13372473],[14341834,1814734,5211801,6970994,5649476],[15064523,10995133,15432537,13583943,5391958],[16642508,13031096,16568374,14921024,9994089],[15069260,12636734,14769714,11020099,6042174],[15461308,12379077,8565678,15867201,2297643],[12178352,16165523,16289657,8502692,11700084],[15137212,12377765,8624270,5720401,3805468],[16578515,14608574,12046755,13470802,6175017],[15744002,12720641,10682374,7012611,1835283],[16771826,16570853,16500184,15808877,3682098],[14933946,13162175,9686214,7126453,1711902],[13421772,11605539,10424603,2698295,0],[16510658,11325120,12694424,6399659,6314321],[16771503,16373420,16688802,9292973,9996388],[16185078,15263976,12125444,3355443,10027264],[15332089,10274020,15887439,3836361,1782367],[14471604,16431231,16285307,6201251,11556212],[16118999,14737329,10855276,5460531,9772843],[13172480,16384572,4275517,4915215,262148],[15725517,11720122,6401440,2396045,6312035],[14675174,9619363,3973794,2185837,2960681],[13631453,11853505,11030883,16719692,6051939],[13433998,9354900,14441278,8548485,5126493],[16776903,10340780,16751918,9539943,16081432],[16704941,16435814,10607538,16229697,16014668],[16776932,16773075,13692138,10475218,9140830],[11052967,13390458,15210333,4671303,3552822],[16772543,16311489,16220220,16074792,3018019],[16313809,12963782,14191242,10329491,4671555],[15855056,13494730,10537653,15960714,5588029],[9747045,2592944,5131594,2838130,3486770],[16711403,16315620,10859434,828848,5127984],[16177259,16476993,3379604,15797321,10945127],[13413525,10130556,10321529,7637891,5993836],[15595246,13746313,11739213,4271656,1380609],[15515155,9675818,3127468,3183250,290187],[16113875,16765107,16758924,14574178,5061435],[16776119,10942127,6731435,5995661,5187928],[16432680,16747008,8962304,49526,16711740],[16580341,16448483,15335393,14083779,13488055],[14539179,12572845,10280392,16232291,6503726],[754053,2056033,3560527,4208689,3155484],[16367478,9351877,15032924,13709629,6378357],[15657445,16769409,16438194,16759423,16751767],[11206400,16755200,43775,16711850,11141375],[13740596,10987588,10773891,12730669,5905994],[16315327,14476535,12570615,7692651,13844503]];
MainNode.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=cc_test_export.js.map