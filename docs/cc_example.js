// Generated by Haxe 4.0.5
(function ($global) { "use strict";
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = "HxOverrides";
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var Main = function() {
	this.ccTypeArray = [examples_ExAll,examples_ExCircles,examples_ExRectangle,examples_ExLine,examples_ExImage,examples_ExGui,examples_ExGroup,examples_ExText,examples_ExEllipse,examples_ExGradient,examples_ExPolyline,examples_ExBackground,examples_ExContainer,examples_ExPolygon,examples_ExMirror,examples_ExMask,examples_ExButton];
	var _gthis = this;
	window.document.addEventListener("DOMContentLoaded",function(event) {
		window.console.info("" + sketcher_App.NAME + " Main Dom ready :: build: " + "2020-04-12 17:43:37");
		var arr = helper_html_PullDown.convertClass(_gthis.ccTypeArray);
		_gthis.pulldown = new helper_html_PullDown(arr,$bind(_gthis,_gthis.onSelectHandler));
		var ccnav = new html_CCNav(arr);
		_gthis.setupArt();
		_gthis.setupNav();
	});
};
$hxClasses["Main"] = Main;
Main.__name__ = "Main";
Main.main = function() {
	var app = new Main();
};
Main.prototype = {
	setupArt: function() {
		this.hash = window.location.hash;
		this.hash = StringTools.replace(this.hash,"#","");
		var name = "examples." + this.hash;
		var clazz = $hxClasses[name];
		if(clazz == null) {
			clazz = this.ccTypeArray[this.ccTypeArray.length - 1];
		}
		this.count = this.ccTypeArray.indexOf(clazz);
		var cc = Type.createInstance(clazz,[]);
		this.changeHash();
	}
	,setupNav: function() {
		var _gthis = this;
		window.addEventListener("hashchange",function() {
			window.location.reload();
		},false);
		window.addEventListener(Globals.KEY_DOWN,function(e) {
			switch(e.key) {
			case "ArrowDown":
				_gthis.count = 0;
				break;
			case "ArrowLeft":
				_gthis.count--;
				break;
			case "ArrowRight":
				_gthis.count++;
				break;
			case "ArrowUp":
				_gthis.count = _gthis.ccTypeArray.length - 1;
				break;
			}
			_gthis.changeHash();
		},false);
	}
	,changeHash: function(index) {
		var _count = index == null ? this.count : index;
		var c = this.ccTypeArray[_count];
		var tmp = c.__name__;
		window.location.hash = StringTools.replace(tmp,"examples.","");
		if(this.pulldown != null) {
			this.pulldown.set_selected(_count);
		}
	}
	,onSelectHandler: function(e) {
		this.changeHash(e);
	}
	,__class__: Main
};
Math.__name__ = "Math";
var Settings = function(width,height,type) {
	if(type == null) {
		type = "svg";
	}
	this.type = "svg";
	this.set_width(width);
	this.set_height(height);
	this.set_type(type.toLowerCase());
};
$hxClasses["Settings"] = Settings;
Settings.__name__ = "Settings";
Settings.prototype = {
	get_width: function() {
		return this.width;
	}
	,set_width: function(value) {
		return this.width = value;
	}
	,get_height: function() {
		return this.height;
	}
	,set_height: function(value) {
		return this.height = value;
	}
	,get_type: function() {
		return this.type;
	}
	,set_type: function(value) {
		return this.type = value;
	}
	,get_padding: function() {
		return this.padding;
	}
	,set_padding: function(value) {
		return this.padding = value;
	}
	,get_scale: function() {
		return this.scale;
	}
	,set_scale: function(value) {
		return this.scale = value;
	}
	,get_element: function() {
		return this.element;
	}
	,set_element: function(value) {
		return this.element = value;
	}
	,get_margin: function() {
		return this.margin;
	}
	,set_margin: function(value) {
		return this.margin = value;
	}
	,get_autostart: function() {
		return this.autostart;
	}
	,set_autostart: function(value) {
		return this.autostart = value;
	}
	,get_elementID: function() {
		return this.elementID;
	}
	,set_elementID: function(value) {
		return this.elementID = value;
	}
	,get_sizeType: function() {
		return this.sizeType;
	}
	,set_sizeType: function(value) {
		return this.sizeType = value;
	}
	,__class__: Settings
};
var Sketcher = function(settings) {
	this.WRAPPER_ID = "sketcher_wrapper";
	this.SVG_ID = "sketcher_svg";
	this.WEBGL_ID = "sketcher_canvas_webgl";
	this.CANVAS_ID = "sketcher_canvas";
	this.baseArray = [];
	this.settings = settings;
	Globals.w = settings.get_width();
	Globals.h = settings.get_height();
	if(settings.get_elementID() != null) {
		this.WRAPPER_ID = settings.get_elementID();
	}
	if(settings.get_scale() == true) {
		var node = window.document.createElement("style");
		node.innerHTML = "\n\t\t\t<!-- no padding -->\n\t\t\t.sketcher-wrapper{width: 100%; height: 100%; padding: 0; margin: 0; display: flex; align-items: center;\tjustify-content: center;}\n\t\t\tsvg {width: 100%; height: 100%; background-color:#ffffff; }\n\t\t\tcanvas{width: 100%; background-color:#ffffff; }\n\t\t\t";
		window.document.body.appendChild(node);
	}
	if(settings.get_padding() != null && settings.get_padding() >= 0) {
		var node1 = window.document.createElement("style");
		node1.innerHTML = "\n\t\t\t<!-- with padding -->\n\t\t\t.sketcher-wrapper{width: 100%; height: 100%; padding: 0; margin: 0; display: flex; align-items: center;\tjustify-content: center;}\n\t\t\tsvg {margin: " + settings.get_padding() + "px; width: 100%;  height: 100%; background-color:#ffffff; }\n\t\t\tcanvas {margin: " + settings.get_padding() + "px; width: 100%; background-color:#ffffff; }\n\t\t\t";
		window.document.body.appendChild(node1);
	}
};
$hxClasses["Sketcher"] = Sketcher;
Sketcher.__name__ = "Sketcher";
Sketcher.create = function(settings) {
	var sketcher = new Sketcher(settings);
	sketcher.baseArray = [];
	return sketcher;
};
Sketcher.prototype = {
	appendTo: function(element) {
		if(element == null) {
			return this;
		}
		this.element = element;
		switch(this.settings.get_type()) {
		case "canvas":
			this.canvas = window.document.createElement("canvas");
			this.canvas.width = this.settings.get_width();
			this.canvas.height = this.settings.get_height();
			this.canvas.id = this.CANVAS_ID;
			Sketcher.ctx = this.canvas.getContext("2d",null);
			element.appendChild(this.canvas);
			break;
		case "svg":
			this.update();
			break;
		case "webgl":
			this.canvas = window.document.createElement("canvas");
			this.canvas.width = this.settings.get_width();
			this.canvas.height = this.settings.get_height();
			this.canvas.id = this.WEBGL_ID;
			Sketcher.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(this.canvas,null);
			element.appendChild(this.canvas);
			break;
		default:
			console.log("src/Sketcher.hx:115:","case '" + this.settings.get_type().toLowerCase() + "': trace ('" + this.settings.get_type().toLowerCase() + "');");
		}
		return this;
	}
	,makeBackground: function(color) {
		var shape = new sketcher_draw_Background(color);
		this.baseArray.unshift(shape);
		return shape;
	}
	,makeText: function(str,x,y) {
		var shape = new sketcher_draw_Text(str,x,y);
		this.baseArray.push(shape);
		return shape;
	}
	,makeCircle: function(x,y,radius) {
		var shape = new sketcher_draw_Circle(x,y,radius);
		this.baseArray.push(shape);
		return shape;
	}
	,makeRectangle: function(x,y,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		var shape = new sketcher_draw_Rectangle(x,y,width,height,isCenter);
		this.baseArray.push(shape);
		return shape;
	}
	,makeRectangleInt: function(x,y,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		var shape = new sketcher_draw_Rectangle(x,y,width,height);
		this.baseArray.push(shape);
		return shape;
	}
	,makeButton: function(x,y,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		var shape = new sketcher_draw_Button(x,y,width,height,isCenter);
		this.baseArray.push(shape);
		return shape;
	}
	,makeRoundedRectangle: function(x,y,width,height,radius,isCenter) {
		if(isCenter == null) {
			isCenter = true;
		}
		if(!isCenter) {
			x = Math.round(width / 2);
			y = Math.round(height / 2);
		}
		var shape = new sketcher_draw_Rectangle(x,y,width,height);
		shape.set_radius(radius);
		this.baseArray.push(shape);
		return shape;
	}
	,makeLine: function(x1,y1,x2,y2) {
		var shape = new sketcher_draw_Line(x1,y1,x2,y2);
		this.baseArray.push(shape);
		return shape;
	}
	,makeLinePoint: function(p1,p2) {
		var shape = new sketcher_draw_Line(p1.x,p1.y,p2.x,p2.y);
		this.baseArray.push(shape);
		return shape;
	}
	,makeEllipse: function(x,y,rx,ry) {
		var shape = new sketcher_draw_Ellipse(x,y,rx,ry);
		this.baseArray.push(shape);
		return shape;
	}
	,makePolygon: function(sides) {
		var shape = new sketcher_draw_Polygon(sides);
		this.baseArray.push(shape);
		return shape;
	}
	,makePolygonPoint: function(sides) {
		var _sides = [];
		var _g = 0;
		while(_g < sides.length) {
			var i = sides[_g];
			++_g;
			_sides.push(i.x);
			_sides.push(i.y);
		}
		var shape = new sketcher_draw_Polygon(_sides);
		this.baseArray.push(shape);
		return shape;
	}
	,makePath: function(x,y) {
		var shape = new sketcher_draw_Path(x,y);
		this.baseArray.push(shape);
		return shape;
	}
	,makePolyLine: function(sides) {
		var shape = new sketcher_draw_PolyLine(sides);
		this.baseArray.push(shape);
		return shape;
	}
	,makePolyLinePoint: function(sides) {
		var _sides = [];
		var _g = 0;
		while(_g < sides.length) {
			var i = sides[_g];
			++_g;
			_sides.push(i.x);
			_sides.push(i.y);
		}
		var shape = new sketcher_draw_PolyLine(_sides);
		this.baseArray.push(shape);
		return shape;
	}
	,makeGradient: function(color0,color1,isLinear) {
		if(isLinear == null) {
			isLinear = true;
		}
		var shape = new sketcher_draw_Gradient(color0,color1,isLinear);
		this.baseArray.push(shape);
		return shape;
	}
	,makeImage: function(x,y,href,width,height,isCenter) {
		if(isCenter == null) {
			isCenter = false;
		}
		var shape = new sketcher_draw_Image(x,y,href,width,height,isCenter);
		this.baseArray.push(shape);
		return shape;
	}
	,makeGroup: function(array) {
		var shape = new sketcher_draw_Group(array);
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var j = _g++;
			var _base = array[j];
			var _g2 = 0;
			var _g11 = this.baseArray.length;
			while(_g2 < _g11) {
				var i = _g2++;
				var base = this.baseArray[i];
				if(base == _base) {
					this.baseArray[i] = null;
				}
			}
		}
		this.baseArray.push(shape);
		return shape;
	}
	,makeMask: function(array) {
		var shape = new sketcher_draw_Mask(array);
		var _g = 0;
		var _g1 = array.length;
		while(_g < _g1) {
			var j = _g++;
			var _base = array[j];
			var _g2 = 0;
			var _g11 = this.baseArray.length;
			while(_g2 < _g11) {
				var i = _g2++;
				var base = this.baseArray[i];
				if(base == _base) {
					this.baseArray[i] = null;
				}
			}
		}
		this.baseArray.push(shape);
		return shape;
	}
	,makeMirror: function(dir) {
		var shape = new sketcher_draw_Mirror(dir);
		if(this.settings.get_type().toLowerCase() == "svg") {
			shape.baseArray = this.baseArray;
		}
		this.baseArray.push(shape);
		return shape;
	}
	,makeX: function(x,y,color) {
		if(color == null) {
			color = "red";
		}
		var cx = Math.round(x);
		var cy = Math.round(y);
		var r = 5;
		var polyline = new sketcher_draw_PolyLine([cx,cy,cx - r,cy,cx,cy,cx + r,cy,cx,cy,cx,cy - r,cx,cy,cx,cy + r,cx,cy]);
		polyline.set_id("registration_marker_" + polyline.get_count());
		polyline.set_desc("Registration Marker\nx: " + cx + ", y: " + cy);
		polyline.set_strokeColor(color);
		polyline.set_strokeWeight(1);
		polyline.set_fillColor(color);
		polyline.set_lineCap("butt");
		polyline.set_lineJoin("miter");
		this.baseArray.push(polyline);
		return polyline;
	}
	,makeXCross: function(x,y,size) {
		var cx = x;
		var cy = y;
		var r = size;
		var polyline = new sketcher_draw_PolyLine([cx,cy,cx - r,cy,cx,cy,cx + r,cy,cx,cy,cx,cy - r,cx,cy,cx,cy + r,cx,cy]);
		polyline.set_id("xcross_" + polyline.get_count());
		polyline.set_desc("xcross\nx: " + cx + ", y: " + cy + ", size:" + size);
		polyline.set_lineCap("butt");
		polyline.set_lineJoin("bevel");
		this.baseArray.push(polyline);
		return polyline;
	}
	,clear: function() {
		this.baseArray = [];
		if(this.settings.get_type().toLowerCase() == "svg") {
			this.element.innerHTML = "";
		}
		if(this.settings.get_type().toLowerCase() == "canvas") {
			Sketcher.ctx.clearRect(0,0,this.settings.get_width(),this.settings.get_height());
		}
	}
	,getBaseArray: function() {
		return this.baseArray;
	}
	,getSVG: function() {
		var div = window.document.getElementById(this.WRAPPER_ID);
		return div.innerHTML;
	}
	,getSVGElement: function() {
		var svg = window.document.getElementById(this.SVG_ID);
		return svg;
	}
	,update: function() {
		if(this.element == null) {
			return;
		}
		switch(this.settings.get_type()) {
		case "canvas":
			var _g = 0;
			var _g1 = this.baseArray.length;
			while(_g < _g1) {
				var i = _g++;
				var base = this.baseArray[i];
				if(base == null) {
					continue;
				}
				base.ctx(Sketcher.ctx);
			}
			break;
		case "svg":
			var svgW = "" + this.settings.get_width();
			var svgH = "" + this.settings.get_height();
			if(this.settings.get_sizeType() != null) {
				svgW += "" + this.settings.get_sizeType();
				svgH += "" + this.settings.get_sizeType();
			}
			var _xml = "<?xml version=\"1.0\" standalone=\"no\"?><svg width=\"" + svgW + "\" height=\"" + svgH + "\" viewBox=\"0 0 " + svgW + " " + svgH + "\" version=\"1.1\" id=\"" + this.SVG_ID + "\" xmlns=\"http://www.w3.org/2000/svg\">";
			var content = "";
			var defs = "<defs>";
			var _g2 = 0;
			var _g11 = this.baseArray.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				var base1 = this.baseArray[i1];
				if(base1 == null) {
					continue;
				}
				var draw = base1.svg(this.settings);
				switch(base1.type) {
				case "gradient":case "mask":
					defs += draw;
					break;
				default:
					content += draw;
				}
			}
			_xml += defs + "</defs>";
			_xml += content + "</svg>";
			this.svg = _xml;
			this.element.innerHTML = _xml;
			break;
		case "webgl":
			console.log("src/Sketcher.hx:639:","webgl");
			var _g3 = 0;
			var _g12 = this.baseArray.length;
			while(_g3 < _g12) {
				var i2 = _g3++;
				var base2 = this.baseArray[i2];
				if(base2 == null) {
					continue;
				}
				base2.gl(Sketcher.gl);
			}
			break;
		default:
			console.log("src/Sketcher.hx:648:","case '" + this.settings.get_type() + "': trace ('" + this.settings.get_type() + "');");
		}
		this.baseArray = [];
	}
	,__class__: Sketcher
};
var Globals = function() { };
$hxClasses["Globals"] = Globals;
Globals.__name__ = "Globals";
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = "Std";
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var v = parseInt(x, (x[(i + 1)]=="x" || x[(i + 1)]=="X") ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = "StringBuf";
StringBuf.prototype = {
	__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = "StringTools";
StringTools.htmlEscape = function(s,quotes) {
	var buf_b = "";
	var _g_offset = 0;
	var _g_s = s;
	while(_g_offset < _g_s.length) {
		var s1 = _g_s;
		var index = _g_offset++;
		var c = s1.charCodeAt(index);
		if(c >= 55296 && c <= 56319) {
			c = c - 55232 << 10 | s1.charCodeAt(index + 1) & 1023;
		}
		var c1 = c;
		if(c1 >= 65536) {
			++_g_offset;
		}
		var code = c1;
		switch(code) {
		case 34:
			if(quotes) {
				buf_b += "&quot;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 38:
			buf_b += "&amp;";
			break;
		case 39:
			if(quotes) {
				buf_b += "&#039;";
			} else {
				buf_b += String.fromCodePoint(code);
			}
			break;
		case 60:
			buf_b += "&lt;";
			break;
		case 62:
			buf_b += "&gt;";
			break;
		default:
			buf_b += String.fromCodePoint(code);
		}
	}
	return buf_b;
};
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	var hexChars = "0123456789ABCDEF";
	while(true) {
		s = hexChars.charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = "Type";
Type.createInstance = function(cl,args) {
	return new (Function.prototype.bind.apply(cl,[null].concat(args)));
};
var _$Xml_XmlType_$Impl_$ = {};
$hxClasses["_Xml.XmlType_Impl_"] = _$Xml_XmlType_$Impl_$;
_$Xml_XmlType_$Impl_$.__name__ = "_Xml.XmlType_Impl_";
_$Xml_XmlType_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "Element";
	case 1:
		return "PCData";
	case 2:
		return "CData";
	case 3:
		return "Comment";
	case 4:
		return "DocType";
	case 5:
		return "ProcessingInstruction";
	case 6:
		return "Document";
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = "Xml";
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(xml.nodeType));
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.getReserved(att);
		} else {
			return _this.h[att];
		}
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,attributes: function() {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		return this.attributeMap.keys();
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(this.nodeType));
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,toString: function() {
		return haxe_xml_Printer.print(this);
	}
	,__class__: Xml
};
var examples_ExAll = function() {
	this.fontFamly = "Pacifico";
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.radiusSmall = 50;
	sketcher_util_EmbedUtil.embedGoogleFont(this.fontFamly,$bind(this,this.init));
};
$hxClasses["examples.ExAll"] = examples_ExAll;
examples_ExAll.__name__ = "examples.ExAll";
examples_ExAll.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,3);
		this.grid.setIsCenterPoint(true);
		this.initDocument();
		this.sketchSVG();
		this.sketchCanvas();
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
		sketch.update();
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
		sketch.update();
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var p = this.grid.array[0];
		var circle = sketch.makeCircle(p.x,p.y,50);
		var p1 = this.grid.array[1];
		var rect = sketch.makeRectangle(p1.x,p1.y,100,100);
		circle.set_fill("#FF8000");
		circle.set_stroke("#ff4500");
		circle.set_lineWeight(5);
		rect.set_fill("rgb(0, 200, 255)");
		rect.set_fillOpacity(0.75);
		rect.noStroke();
		var p2 = this.grid.array[2];
		var pct = .77;
		var _stroke = 15;
		var _r = this.radiusSmall - _stroke * 0.5;
		var omtrek = sketcher_util_MathUtil.circumferenceCircle(_r);
		var dashLine = omtrek * pct;
		var dashNoLine = omtrek - dashLine;
		var circle1 = sketch.makeCircle(p2.x,p2.y,_r);
		circle1.set_lineCap("round");
		circle1.set_fillOpacity(0);
		circle1.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.LIME));
		circle1.set_strokeWeight(_stroke);
		circle1.set_dash([dashLine,dashNoLine]);
		circle1.setRotate(-90,p2.x,p2.y);
		var circle2 = sketch.makeCircle(p2.x,p2.y,_r);
		circle2.set_fillOpacity(0);
		circle2.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.FUCHSIA));
		circle2.set_strokeWeight(_stroke);
		circle2.set_strokeOpacity(0.2);
		var p3 = this.grid.array[3];
		var shape = sketch.makeText("center",p3.x,p3.y);
		shape.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.MAROON));
		shape.set_fontSize("50px");
		shape.set_fontFamily(this.fontFamly);
		shape.set_textAlign(sketcher_draw_TextAlignType.Center);
		shape.set_textBaseline(sketcher_draw_TextBaselineType.Middle);
		var p4 = this.grid.array[4];
		var image = sketch.makeImage(p4.x,p4.y,"https://mdn.mozillademos.org/files/6457/mdn_logo_only_color.png",100,100,true);
		var p5 = this.grid.array[5];
		var line = sketch.makeLine(p5.x,p5.y,p5.x + this.radiusSmall,p5.y + this.radiusSmall);
		line.set_strokeWeight(10);
		line.set_lineCap("round");
		line.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.LIME));
		line.set_dash([10,20]);
	}
	,__class__: examples_ExAll
};
var examples_ExBackground = function() {
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.radiusSmall = 50;
	this.init();
};
$hxClasses["examples.ExBackground"] = examples_ExBackground;
examples_ExBackground.__name__ = "examples.ExBackground";
examples_ExBackground.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,3);
		this.grid.setIsCenterPoint(true);
		this.initDocument();
		this.sketchSVG();
		this.sketchCanvas();
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var omtrek = sketcher_util_MathUtil.circumferenceCircle(this.radiusSmall);
		var p = this.grid.array[0];
		var c = sketch.makeCircle(p.x,p.y,50).setFill(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.LIME));
		var p1 = this.grid.array[1];
		var c1 = sketch.makeCircle(p1.x,p1.y,50).setFill(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.MAROON));
		var bg = sketch.makeBackground(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.GREEN));
		sketch.update();
	}
	,__class__: examples_ExBackground
};
var examples_ExButton = function() {
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.rectH = 50;
	this.rectW = 100;
	this.init();
};
$hxClasses["examples.ExButton"] = examples_ExButton;
examples_ExButton.__name__ = "examples.ExButton";
examples_ExButton.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,3);
		this.grid.setIsCenterPoint(true);
		this.initDocument();
		this.sketchSVG();
		this.sketchCanvas();
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		var div2 = window.document.createElement("div");
		div2.id = "sketcher-canvas-webgl";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchWebgl: function() {
		var elem = window.document.getElementById("sketcher-canvas-webgl");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"webgl");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var p = this.grid.array[0];
		var shape = sketch.makeButton(p.x,p.y,this.rectW,this.rectH);
		var p1 = this.grid.array[8];
		var shape1 = sketch.makeButton(p1.x,p1.y,this.rectW,this.rectH);
		sketch.update();
	}
	,__class__: examples_ExButton
};
var examples_ExCircles = function() {
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.radiusSmall = 50;
	this.init();
};
$hxClasses["examples.ExCircles"] = examples_ExCircles;
examples_ExCircles.__name__ = "examples.ExCircles";
examples_ExCircles.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,3);
		this.grid.setIsCenterPoint(true);
		this.initDocument();
		this.sketchSVG();
		this.sketchCanvas();
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var omtrek = sketcher_util_MathUtil.circumferenceCircle(this.radiusSmall);
		var p = this.grid.array[0];
		var circle = sketch.makeCircle(p.x,p.y,this.radiusSmall);
		var p1 = this.grid.array[1];
		var circle1 = sketch.makeCircle(p1.x,p1.y,this.radiusSmall);
		circle1.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.LIME));
		var p2 = this.grid.array[2];
		var circle2 = sketch.makeCircle(p2.x,p2.y,this.radiusSmall);
		circle2.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.LIME));
		circle2.set_lineWeight(10);
		var p3 = this.grid.array[3];
		var circle3 = sketch.makeCircle(p3.x,p3.y,this.radiusSmall);
		circle3.set_lineWeight(10);
		circle3.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK));
		circle3.set_fillOpacity(0.5);
		var p4 = this.grid.array[4];
		var circle4 = sketch.makeCircle(p4.x,p4.y,this.radiusSmall);
		circle4.set_lineWeight(10);
		circle4.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK));
		circle4.set_fillOpacity(0.5);
		circle4.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.GREEN));
		var p5 = this.grid.array[5];
		var circle5 = sketch.makeCircle(p5.x,p5.y,this.radiusSmall);
		circle5.set_lineWeight(10);
		circle5.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK));
		circle5.set_fillOpacity(0.5);
		circle5.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.GREEN));
		circle5.set_strokeOpacity(0.5);
		var p6 = this.grid.array[6];
		var circle6 = sketch.makeCircle(p6.x,p6.y,this.radiusSmall);
		circle6.set_lineWeight(10);
		circle6.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK));
		circle6.set_fillOpacity(0);
		circle6.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.FUCHSIA));
		var p7 = this.grid.array[7];
		var circle7 = sketch.makeCircle(p7.x,p7.y,this.radiusSmall);
		circle7.set_lineWeight(20);
		circle7.set_fillOpacity(0);
		circle7.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.FUCHSIA));
		circle7.set_dash([omtrek / 8]);
		var p8 = this.grid.array[8];
		var circle8 = sketch.makeCircle(p8.x,p8.y,this.radiusSmall);
		circle8.set_lineWeight(20);
		circle8.set_fillOpacity(0);
		circle8.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.FUCHSIA));
		circle8.set_dash([omtrek / 8]);
		circle8.set_lineCap("round");
		sketch.update();
	}
	,__class__: examples_ExCircles
};
var examples_ExContainer = function() {
	var inject = new html_CSSinjector(this.css());
	this.fontFamily = sketcher_util_EmbedUtil.fontDisplay(function(e) {
		console.log("src/examples/ExContainer.hx:11:",e);
		return;
	});
	sketcher_util_EmbedUtil.bootstrapStyle($bind(this,this.onEmbedHandler));
};
$hxClasses["examples.ExContainer"] = examples_ExContainer;
examples_ExContainer.__name__ = "examples.ExContainer";
examples_ExContainer.prototype = {
	onEmbedHandler: function(e) {
		console.log("src/examples/ExContainer.hx:17:",e);
		this.init();
	}
	,init: function() {
		var str = ".testclass|testid|#testid2";
		str += "\n|\ncanvas-wrapper|svg-wrapper\n|\n||||||||||||\n||||||||\n||||\n|||\n||\n|\n\n";
		var container = new helper_html_Container(str);
	}
	,css: function() {
		return "\n.col{\n    min-height:20px;\n    padding-top: .75rem;\n    padding-bottom: .75rem;\n    background-color: rgba(86,61,124,.15);\n    border: 1px solid rgba(86,61,124,.2);\n}\n.testclass,\n#testid,\n#testid2,\n#canvas-wrapper,\n#svg-wrapper{\n    width:100%;\n    height:100%;\n    padding:10px;\n}\n\n#canvas-wrapper{\n    background-color: violet;\n}\n#svg-wrapper{\n    background-color: turquoise;\n}\n#svg-wrapper:after{\n    content:\"#svg-wrapper\";\n}\n#canvas-wrapper:after{\n    content:\"#canvas-wrapper\";\n}\n.testclass{\n    background-color: yellowgreen;\n}\n#testid{\n    background-color: tomato;\n}\n#testid2{\n    background-color: red;\n}\n#testid2:after{\n    content:\"#testid2\";\n}\n#testid:after{\n    content:\"#testid\";\n}\n.testclass:after{\n    content:\".testclass\";\n}\n";
	}
	,__class__: examples_ExContainer
};
var examples_ExEllipse = function() {
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.radiusSmaller = 30;
	this.radiusSmall = 50;
	this.init();
};
$hxClasses["examples.ExEllipse"] = examples_ExEllipse;
examples_ExEllipse.__name__ = "examples.ExEllipse";
examples_ExEllipse.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,3);
		this.grid.setIsCenterPoint(true);
		this.initDocument();
		this.sketchSVG();
		this.sketchCanvas();
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var omtrek = sketcher_util_MathUtil.circumferenceCircle(this.radiusSmall);
		var p = this.grid.array[0];
		var shape = sketch.makeEllipse(p.x,p.y,this.radiusSmall,this.radiusSmaller);
		sketch.update();
	}
	,__class__: examples_ExEllipse
};
var examples_ExGradient = function() {
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.rectH = 50;
	this.rectW = 100;
	this.radiusSmall = 50;
	this.init();
};
$hxClasses["examples.ExGradient"] = examples_ExGradient;
examples_ExGradient.__name__ = "examples.ExGradient";
examples_ExGradient.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,3);
		this.grid.setIsCenterPoint(true);
		this.initDocument();
		this.sketchSVG();
		this.sketchCanvas();
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var omtrek = sketcher_util_MathUtil.circumferenceCircle(this.radiusSmall);
		var gradient = sketch.makeGradient("#2193b0","#6dd5ed");
		gradient.set_id("Sexy Blue");
		var gradient1 = sketch.makeGradient("#B993D6","#8CA6DB");
		gradient1.set_id("dirty-fog");
		var p = this.grid.array[0];
		var bg = sketch.makeRectangle(p.x,p.y,this.rectW,this.rectH);
		bg.set_id("gradient sexy blue");
		bg.set_fillGradientColor("Sexy Blue");
		var p1 = this.grid.array[1];
		var bg1 = sketch.makeRectangle(p1.x,p1.y,this.rectW,this.rectH);
		bg1.set_id("gradient dirty-fog");
		bg1.set_fillGradientColor("dirty-fog");
		sketch.update();
	}
	,__class__: examples_ExGradient
};
var examples_ExGroup = function() {
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.radiusSmall = 50;
	this.init();
};
$hxClasses["examples.ExGroup"] = examples_ExGroup;
examples_ExGroup.__name__ = "examples.ExGroup";
examples_ExGroup.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,3);
		this.grid.setIsCenterPoint(true);
		this.initDocument();
		this.sketchSVG();
		this.sketchCanvas();
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var omtrek = sketcher_util_MathUtil.circumferenceCircle(this.radiusSmall);
		var p = this.grid.array[0];
		var circle = sketch.makeCircle(p.x,p.y,this.radiusSmall);
		var g = sketch.makeGroup([circle]);
		g.set_id("group red circle");
		g.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.RED));
		var p1 = this.grid.array[1];
		var shape = sketch.makeRectangle(p1.x,p1.y,100,50);
		var g1 = sketch.makeGroup([shape]);
		g1.set_id("group red rectangle blue border");
		g1.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.RED));
		g1.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.BLUE));
		g1.set_strokeWeight(3);
		var p2 = this.grid.array[2];
		var shape1 = sketch.makeRectangle(p2.x,p2.y,100,50);
		var g2 = sketch.makeGroup([shape1]);
		g2.set_id("group red rectangle blue border opacity");
		g2.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.RED));
		g2.set_fillOpacity(0.7);
		g2.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.BLUE));
		g2.set_strokeWeight(10);
		g2.set_strokeOpacity(0.7);
		var p3 = this.grid.array[3];
		var shape2 = sketch.makeCircle(p3.x,p3.y,this.radiusSmall);
		var shape21 = sketch.makeCircle(p3.x + this.radiusSmall,p3.y,this.radiusSmall / 2);
		var shape3 = sketch.makeRectangle(p3.x - this.radiusSmall,p3.y,this.radiusSmall,this.radiusSmall);
		var g3 = sketch.makeGroup([shape2,shape21,shape3]);
		g3.set_id("group purple shape rotated");
		g3.noFill();
		g3.setStroke(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PURPLE),10,.3);
		g3.setRotate(45,p3.x,p3.y);
		var p4 = this.grid.array[4];
		var shape4 = sketch.makeCircle(p4.x,p4.y,this.radiusSmall);
		var shape22 = sketch.makeCircle(p4.x + this.radiusSmall,p4.y,this.radiusSmall / 2);
		var shape31 = sketch.makeRectangle(p4.x - this.radiusSmall,p4.y,this.radiusSmall,this.radiusSmall);
		shape31.setFill(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.WHITE));
		var g4 = sketch.makeGroup([shape4,shape22,shape31]);
		g4.set_id("group purple shape norotated");
		g4.noFill();
		g4.setStroke(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.MAROON),10,.3);
		sketch.update();
	}
	,__class__: examples_ExGroup
};
var examples_ExGui = function() {
	this.color3 = { h : 350, s : 0.9, v : 0.3};
	this.color2 = [0,128,255,0.3];
	this.color1 = [0,128,255];
	this.color0 = "#ffae23";
	this.explode = function() {
		console.log("src/examples/ExGui.hx:27:","booom");
	};
	this.maxSize = 0.8;
	this.growthSpeed = 0.8;
	this.noiseStrength = 0.8;
	this.displayOutline = false;
	this.speed = 0.8;
	this.message = "dat.gui";
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.radiusSmall = 50;
	this.init();
};
$hxClasses["examples.ExGui"] = examples_ExGui;
examples_ExGui.__name__ = "examples.ExGui";
examples_ExGui.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,3);
		this.grid.setIsCenterPoint(true);
		this.initDocument();
		sketcher_util_EmbedUtil.datgui($bind(this,this.initDatGui2));
		this.sketchSVG();
		this.sketchCanvas();
	}
	,initDatGui2: function() {
		var text = new examples_FizzyText();
		var gui = new dat.gui.GUI();
		gui.add(text,"message");
		gui.add(text,"speed",-5,5);
		gui.add(text,"displayOutline");
		gui.add(text,"explode");
	}
	,initDatGui: function() {
		var gui = new dat.gui.GUI();
		gui.add(this,"message");
		gui.add(this,"speed",-5,5);
		gui.add(this,"displayOutline");
		gui.add(this,"explode");
		var f1 = gui.addFolder("Flow Field");
		f1.add(this,"speed");
		f1.add(this,"noiseStrength");
		var f2 = gui.addFolder("Letters");
		f2.add(this,"growthSpeed");
		f2.add(this,"maxSize");
		f2.add(this,"message");
		gui.add(this,"message",["pizza","chrome","hooray"]);
		gui.add(this,"speed",{ Stopped : 0, Slow : 0.1, Fast : 5});
		gui.addColor(this,"color0");
		gui.addColor(this,"color1");
		gui.addColor(this,"color2");
		gui.addColor(this,"color3");
		var controller = gui.add(this,"maxSize",0,10);
		controller.onChange(function(value) {
			console.log("src/examples/ExGui.hx:92:","value: " + value);
		});
		controller.onFinishChange(function(value1) {
			window.alert(Std.string("The new value is " + value1));
		});
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var omtrek = sketcher_util_MathUtil.circumferenceCircle(this.radiusSmall);
		var p = this.grid.array[0];
		var circle = sketch.makeCircle(p.x,p.y,this.radiusSmall);
		sketch.update();
	}
	,__class__: examples_ExGui
};
var examples_FizzyText = function() {
	this.explode = function() {
		console.log("src/examples/ExGui.hx:155:","BOOM");
	};
	this.displayOutline = false;
	this.speed = 0.8;
	this.message = "dat.gui";
};
$hxClasses["examples.FizzyText"] = examples_FizzyText;
examples_FizzyText.__name__ = "examples.FizzyText";
examples_FizzyText.prototype = {
	__class__: examples_FizzyText
};
var examples_ExImage = function() {
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.init();
};
$hxClasses["examples.ExImage"] = examples_ExImage;
examples_ExImage.__name__ = "examples.ExImage";
examples_ExImage.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,3);
		this.grid.setIsCenterPoint(true);
		this.initDocument();
		this.sketchSVG();
		this.sketchCanvas();
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var p = this.grid.array[0];
		var image = sketch.makeImage(p.x,p.y,"https://mdn.mozillademos.org/files/6457/mdn_logo_only_color.png",100,100);
		var p1 = this.grid.array[1];
		var image1 = sketch.makeImage(p1.x,p1.y,"https://mdn.mozillademos.org/files/6457/mdn_logo_only_color.png",100,100);
		image1.setRotate(90,p1.x,p1.y);
		var p2 = this.grid.array[3];
		var image2 = sketch.makeImage(p2.x,p2.y,"https://mdn.mozillademos.org/files/6457/mdn_logo_only_color.png",50,50,true);
		var p3 = this.grid.array[4];
		var image3 = sketch.makeImage(p3.x,p3.y,"https://mdn.mozillademos.org/files/6457/mdn_logo_only_color.png",50,50,true);
		image3.setRotate(90,p3.x,p3.y);
		sketch.update();
	}
	,__class__: examples_ExImage
};
var examples_ExLine = function() {
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.radiusSmall = 50;
	this.init();
};
$hxClasses["examples.ExLine"] = examples_ExLine;
examples_ExLine.__name__ = "examples.ExLine";
examples_ExLine.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,3);
		this.grid.setIsCenterPoint(true);
		this.initDocument();
		this.sketchSVG();
		this.sketchCanvas();
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var omtrek = sketcher_util_MathUtil.circumferenceCircle(this.radiusSmall);
		var p = this.grid.array[0];
		var line = sketch.makeLine(p.x,p.y,p.x + this.radiusSmall,p.y + this.radiusSmall);
		line.set_strokeWeight(10);
		line.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.RED));
		var p1 = this.grid.array[1];
		var line1 = sketch.makeLine(p1.x,p1.y,p1.x + this.radiusSmall,p1.y + this.radiusSmall);
		line1.set_strokeWeight(10);
		line1.set_lineCap("round");
		line1.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.GREEN));
		var p2 = this.grid.array[2];
		var line2 = sketch.makeLine(p2.x,p2.y,p2.x + this.radiusSmall,p2.y + this.radiusSmall);
		line2.set_strokeWeight(10);
		line2.set_lineCap("round");
		line2.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.LIME));
		line2.set_dash([20,10]);
		var p3 = this.grid.array[3];
		var line3 = sketch.makeLine(p3.x,p3.y,p3.x + this.radiusSmall,p3.y + this.radiusSmall);
		line3.set_strokeWeight(10);
		line3.set_lineCap("round");
		line3.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK));
		line3.setRotate(10,p3.x,p3.y);
		sketch.update();
	}
	,__class__: examples_ExLine
};
var examples_ExMask = function() {
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.init();
};
$hxClasses["examples.ExMask"] = examples_ExMask;
examples_ExMask.__name__ = "examples.ExMask";
examples_ExMask.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,3);
		this.grid.setIsCenterPoint(true);
		this.initDocument();
		this.sketchSVG();
		this.sketchCanvas();
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var p = this.grid.array[0];
		var maskShape = sketch.makeCircle(p.x,p.y,30);
		var mask = sketch.makeMask([maskShape]);
		mask.set_id("mask-one");
		var rect = sketch.makeRectangle(p.x,p.y,100,100);
		rect.setFill(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.LIME));
		rect.setMask("mask-one");
		var p1 = this.grid.array[1];
		var maskShape1 = sketch.makeCircle(p1.x,p1.y,50);
		var mask1 = sketch.makeMask([maskShape1]);
		mask1.set_id("mask-two");
		var image = sketch.makeImage(p1.x,p1.y,"https://mdn.mozillademos.org/files/6457/mdn_logo_only_color.png",100,100,true);
		image.setMask("mask-two");
		var p2 = this.grid.array[2];
		var maskShape2 = sketch.makeRectangle(p2.x,p2.y,50,200);
		var mask2 = sketch.makeMask([maskShape2]);
		mask2.set_id("mask-3");
		var circle = sketch.makeCircle(p2.x,p2.y,50);
		circle.setFill(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.MAROON));
		circle.setMask("mask-3");
		var p3 = this.grid.array[3];
		var maskShape3 = sketch.makeText("mask-4",p3.x,p3.y);
		maskShape3.set_fontSizePx(50);
		maskShape3.set_textAlign(sketcher_draw_TextAlignType.Center);
		var mask3 = sketch.makeMask([maskShape3]);
		mask3.set_id("mask-4");
		var circle1 = sketch.makeCircle(p3.x,p3.y,50);
		circle1.setFill(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.ORANGE));
		circle1.setMask("mask-4");
		sketch.update();
	}
	,__class__: examples_ExMask
};
var examples_ExMirror = function() {
	this.randomArray = [];
	this.total = 10;
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.rectH = 50;
	this.rectW = 100;
	this.init();
};
$hxClasses["examples.ExMirror"] = examples_ExMirror;
examples_ExMirror.__name__ = "examples.ExMirror";
examples_ExMirror.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,3);
		this.grid.setIsCenterPoint(true);
		this.setupRandom();
		this.initDocument();
		this.sketchSVG();
		this.sketchCanvas();
	}
	,setupRandom: function() {
		this.randomArray = [];
		var _g = 0;
		var _g1 = this.total;
		while(_g < _g1) {
			var i = _g++;
			var randomRect = { point : { x : sketcher_util_MathUtil.random(this.sketchWidth), y : sketcher_util_MathUtil.random(this.sketchHeight)}, color : sketcher_util_ColorUtil.randomColour(), rotation : sketcher_util_MathUtil.random(360), width : sketcher_util_MathUtil.random(20,this.sketchWidth * 0.5), height : sketcher_util_MathUtil.random(20,this.sketchHeight * 0.5)};
			this.randomArray.push(randomRect);
		}
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		var div2 = window.document.createElement("div");
		div2.id = "sketcher-canvas-webgl";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
		this.fontFamily = sketcher_util_EmbedUtil.fontMono();
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchWebgl: function() {
		var elem = window.document.getElementById("sketcher-canvas-webgl");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"webgl");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var _g = 0;
		var _g1 = this.randomArray.length;
		while(_g < _g1) {
			var i = _g++;
			var randomRect = this.randomArray[i];
			var p = randomRect.point;
			var shape = sketch.makeRectangle(p.x,p.y,randomRect.width,randomRect.height,true);
			shape.setFill(randomRect.color);
			shape.setRotate(randomRect.rotation,p.x,p.y);
			var poly = sketch.makeX(p.x,p.y,"black");
		}
		var t1 = sketch.makeText("1",this.sketchWidth / 4,this.sketchHeight / 4);
		t1.set_textAlign(sketcher_draw_TextAlignType.Center);
		t1.set_fontFamily(this.fontFamily);
		t1.set_fontSizePx(60);
		var t11 = sketch.makeText("2",this.sketchWidth / 4 * 3,this.sketchHeight / 4);
		t11.set_textAlign(sketcher_draw_TextAlignType.Center);
		t11.set_fontFamily(this.fontFamily);
		t11.set_fontSizePx(60);
		var t12 = sketch.makeText("3",this.sketchWidth / 4,this.sketchHeight / 4 * 3);
		t12.set_textAlign(sketcher_draw_TextAlignType.Center);
		t12.set_fontFamily(this.fontFamily);
		t12.set_fontSizePx(60);
		var t13 = sketch.makeText("4",this.sketchWidth / 4 * 3,this.sketchHeight / 4 * 3);
		t13.set_textAlign(sketcher_draw_TextAlignType.Center);
		t13.set_fontFamily(this.fontFamily);
		t13.set_fontSizePx(60);
		var mirror = sketch.makeMirror();
		sketch.update();
	}
	,__class__: examples_ExMirror
};
var examples_ExPolygon = function() {
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.radiusSmall = 50;
	this.init();
};
$hxClasses["examples.ExPolygon"] = examples_ExPolygon;
examples_ExPolygon.__name__ = "examples.ExPolygon";
examples_ExPolygon.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,3);
		this.grid.setIsCenterPoint(true);
		this.initDocument();
		this.sketchSVG();
		this.sketchCanvas();
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var omtrek = sketcher_util_MathUtil.circumferenceCircle(this.radiusSmall);
		var p = this.grid.array[0];
		var _polygon = sketch.makePolygon([]);
		_polygon.sides(p.x,p.y,3,this.radiusSmall);
		_polygon.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.BLACK));
		_polygon.set_strokeWeight(1);
		_polygon.set_fillOpacity(0);
		var p1 = this.grid.array[1];
		var _polygon1 = sketch.makePolygon([]);
		_polygon1.sides(p1.x,p1.y,4,this.radiusSmall);
		_polygon1.setRotate(45,p1.x,p1.y);
		_polygon1.setStroke(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK),10);
		_polygon1.setFill(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.LIME));
		var p2 = this.grid.array[2];
		var _polygon2 = sketch.makePolygon([]);
		_polygon2.sides(p2.x,p2.y,5,this.radiusSmall,54.);
		_polygon2.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.BLACK));
		_polygon2.set_strokeWeight(1);
		_polygon2.set_fillOpacity(0);
		var p3 = this.grid.array[3];
		var _polygon3 = sketch.makePolygon([]);
		_polygon3.sides(p3.x,p3.y,6,this.radiusSmall);
		_polygon3.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.BLACK));
		_polygon3.set_strokeWeight(1);
		_polygon3.set_fillOpacity(0);
		var p4 = this.grid.array[4];
		var _polygon4 = sketch.makePolygon([]);
		_polygon4.sides(p4.x,p4.y,7,this.radiusSmall);
		_polygon4.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.BLACK));
		_polygon4.set_strokeWeight(1);
		_polygon4.set_fillOpacity(0);
		var p5 = this.grid.array[5];
		var _polygon5 = sketch.makePolygon([]);
		_polygon5.sides(p5.x,p5.y,8,this.radiusSmall);
		_polygon5.noStroke();
		_polygon5.setFill("#33C4B8");
		var p6 = this.grid.array[6];
		var _polygon6 = sketch.makePolygon([]);
		_polygon6.sides(p6.x,p6.y,4,this.radiusSmall,45);
		_polygon6.setStroke(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PURPLE),25);
		_polygon6.noFill();
		_polygon6.set_lineJoin("round");
		var p7 = this.grid.array[7];
		var _polygon7 = sketch.makePolygon([]);
		_polygon7.sides(p7.x,p7.y,5,this.radiusSmall);
		_polygon7.setStroke(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.RED),20);
		_polygon7.noFill();
		_polygon7.setLineEnds();
		var p8 = this.grid.array[8];
		var _polygon8 = sketch.makePolygon([p8.x - 50,p8.y + 40,p8.x + 30,p8.y - 50,p8.x + 50,p8.y + 20]);
		_polygon8.setStroke(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.GRAY),20);
		_polygon8.setFill("#33C4B8");
		_polygon8.setLineEnds();
		sketch.update();
	}
	,__class__: examples_ExPolygon
};
var examples_ExPolyline = function() {
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.radiusSmall = 50;
	this.init();
};
$hxClasses["examples.ExPolyline"] = examples_ExPolyline;
examples_ExPolyline.__name__ = "examples.ExPolyline";
examples_ExPolyline.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,4);
		this.grid.setIsCenterPoint(true);
		this.initDocument();
		this.sketchSVG();
		this.sketchCanvas();
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var omtrek = sketcher_util_MathUtil.circumferenceCircle(this.radiusSmall);
		var sides_0 = 0;
		var sides_1 = 100;
		var sides_2 = 50;
		var sides_3 = 25;
		var sides_4 = 50;
		var sides_5 = 75;
		var sides_6 = 100;
		var sides_7 = 0;
		var p = this.grid.array[0];
		var shape = sketch.makePolyLine(this.getSides(p));
		var p1 = this.grid.array[1];
		var shape1 = sketch.makePolyLine(this.getSides(p1));
		shape1.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.GREEN));
		var p2 = this.grid.array[2];
		var shape2 = sketch.makePolyLine(this.getSides(p2));
		shape2.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK_HOT));
		shape2.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.GREEN));
		var p3 = this.grid.array[3];
		var shape3 = sketch.makePolyLine(this.getSides(p3));
		shape3.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK_HOT));
		shape3.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.GREEN));
		shape3.set_strokeWeight(5);
		var p4 = this.grid.array[4];
		var shape4 = sketch.makePolyLine(this.getSides(p4));
		shape4.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK_HOT));
		shape4.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.GREEN));
		shape4.set_strokeWeight(15);
		shape4.set_dash([5,10]);
		var p5 = this.grid.array[5];
		var shape5 = sketch.makePolyLine(this.getSides(p5));
		shape5.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK_HOT));
		shape5.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.GREEN));
		shape5.set_strokeWeight(5);
		shape5.set_dash([5,10]);
		shape5.set_lineCap("round");
		var p6 = this.grid.array[6];
		var shape6 = sketch.makePolyLine(this.getSides(p6));
		shape6.set_fillOpacity(0);
		shape6.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.MAROON));
		shape6.set_strokeWeight(10);
		shape6.set_lineCap("round");
		var p7 = this.grid.array[7];
		var shape7 = sketch.makePolyLine(this.getSides(p7));
		shape7.set_fillOpacity(0);
		shape7.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.LIME));
		shape7.set_strokeWeight(10);
		shape7.set_lineCap("round");
		shape7.set_lineJoin("round");
		var p8 = this.grid.array[8];
		var shape8 = sketch.makePolyLine(this.getSides(p8));
		shape8.set_fillOpacity(0);
		shape8.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.LIME));
		shape8.set_strokeWeight(10);
		shape8.set_lineCap("round");
		shape8.set_lineJoin("round");
		shape8.setRotate(45,p8.x,p8.y);
		var p9 = this.grid.array[9];
		var shape9 = sketch.makeXCross(p9.x,p9.y,25);
		shape9.setFill(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK_DEEP)).setStroke(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK_DEEP),10);
		var p10 = this.grid.array[10];
		var shape10 = sketch.makeX(p10.x,p10.y,"green");
		sketch.update();
	}
	,getSides: function(p) {
		var sides = [p.x + (-50),p.y + 50,p.x,p.y + (-25),p.x,p.y + 25,p.x + 50,p.y + (-50)];
		return sides;
	}
	,__class__: examples_ExPolyline
};
var examples_ExRectangle = function() {
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.rectH = 50;
	this.rectW = 100;
	this.init();
};
$hxClasses["examples.ExRectangle"] = examples_ExRectangle;
examples_ExRectangle.__name__ = "examples.ExRectangle";
examples_ExRectangle.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,3);
		this.grid.setIsCenterPoint(true);
		this.initDocument();
		this.sketchSVG();
		this.sketchCanvas();
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		var div2 = window.document.createElement("div");
		div2.id = "sketcher-canvas-webgl";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchWebgl: function() {
		var elem = window.document.getElementById("sketcher-canvas-webgl");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"webgl");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var omtrek = this.rectW * 2 + this.rectH * 2;
		var p = this.grid.array[0];
		var shape = sketch.makeRectangle(p.x,p.y,this.rectW,this.rectH);
		shape.setRotate(10,p.x,p.y);
		shape.set_fillOpacity(0.8);
		var poly = sketch.makeX(p.x,p.y,"black");
		var p1 = this.grid.array[1];
		var shape1 = sketch.makeRectangle(p1.x,p1.y,this.rectW,this.rectH,true);
		shape1.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.LIME));
		shape1.setRotate(-100,p1.x,p1.y);
		shape1.set_fillOpacity(0.8);
		var poly1 = sketch.makeX(p1.x,p1.y,"black");
		var p2 = this.grid.array[2];
		var shape2 = sketch.makeRectangle(p2.x,p2.y,this.rectW,this.rectH);
		shape2.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.LIME));
		shape2.set_lineWeight(10);
		var p3 = this.grid.array[3];
		var shape3 = sketch.makeRectangle(p3.x,p3.y,this.rectW,this.rectH);
		shape3.set_lineWeight(10);
		shape3.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK));
		shape3.set_fillOpacity(0.5);
		shape3.setMove(10,10);
		var p4 = this.grid.array[4];
		var shape4 = sketch.makeRectangle(p4.x,p4.y,this.rectW,this.rectH,false);
		shape4.set_lineWeight(10);
		shape4.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK));
		shape4.set_fillOpacity(0.5);
		shape4.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.GREEN));
		var p5 = this.grid.array[5];
		var shape5 = sketch.makeRectangle(p5.x,p5.y,this.rectW,this.rectH);
		shape5.set_lineWeight(10);
		shape5.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK));
		shape5.set_fillOpacity(0.5);
		shape5.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.GREEN));
		shape5.set_strokeOpacity(0.5);
		var p6 = this.grid.array[6];
		var shape6 = sketch.makeRectangle(p6.x,p6.y,this.rectW,this.rectH);
		shape6.set_lineWeight(10);
		shape6.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK));
		shape6.set_fillOpacity(0);
		shape6.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.FUCHSIA));
		var p7 = this.grid.array[7];
		var shape7 = sketch.makeRectangle(p7.x,p7.y,this.rectW,this.rectH);
		shape7.set_lineWeight(10);
		shape7.set_fillOpacity(0);
		shape7.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.FUCHSIA));
		shape7.set_dash([40,20]);
		var p8 = this.grid.array[8];
		var shape8 = sketch.makeRectangle(p8.x,p8.y,this.rectW,this.rectH);
		shape8.set_lineWeight(10);
		shape8.set_fillOpacity(0);
		shape8.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.FUCHSIA));
		shape8.set_dash([40,20]);
		shape8.set_lineCap("round");
		sketch.update();
	}
	,__class__: examples_ExRectangle
};
var examples_ExText = function() {
	this.familyHand = "";
	this.familyDisplay = "";
	this.familyMono = "";
	this.fontFamly = "Oswald:200,300,400,500,600,700";
	this.isDebug = true;
	this.sketchHeight = 400;
	this.sketchWidth = 600;
	this.radiusSmall = 50;
	this.familyDisplay = sketcher_util_EmbedUtil.fontDisplay($bind(this,this.init));
};
$hxClasses["examples.ExText"] = examples_ExText;
examples_ExText.__name__ = "examples.ExText";
examples_ExText.prototype = {
	init: function() {
		this.grid = new sketcher_util_GridUtil(this.sketchWidth,this.sketchHeight);
		this.grid.setNumbered(3,4);
		this.grid.setIsCenterPoint(true);
		this.initDocument();
		this.sketchSVG();
		this.sketchCanvas();
	}
	,initDocument: function() {
		var wrapper = window.document.createElement("div");
		wrapper.id = "sketcher-wrapper";
		wrapper.className = "container";
		var div0 = window.document.createElement("div");
		div0.id = "sketcher-svg";
		var div1 = window.document.createElement("div");
		div1.id = "sketcher-canvas";
		wrapper.appendChild(div0);
		wrapper.appendChild(div1);
		window.document.body.appendChild(wrapper);
	}
	,sketchSVG: function() {
		var elem = window.document.getElementById("sketcher-svg");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"svg");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,sketchCanvas: function() {
		var elem = window.document.getElementById("sketcher-canvas");
		var settings = new Settings(this.sketchWidth,this.sketchHeight,"canvas");
		var sketch = Sketcher.create(settings).appendTo(elem);
		this.generateShapes(sketch);
	}
	,generateShapes: function(sketch) {
		if(this.isDebug) {
			sketcher_debug_Grid.gridDots(sketch,this.grid);
		}
		var omtrek = sketcher_util_MathUtil.circumferenceCircle(this.radiusSmall);
		var p = this.grid.array[2];
		var shape = sketch.makeText("Test (default)",p.x,p.y);
		var p1 = this.grid.array[1];
		var shape1 = sketch.makeText("Test (pink)",p1.x,p1.y);
		shape1.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK_DEEP));
		var p2 = this.grid.array[0];
		var shape2 = sketch.makeText("Test (24px)",p2.x,p2.y);
		shape2.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.GREEN));
		shape2.set_fontSize("24px");
		var p3 = this.grid.array[3];
		var shape3 = sketch.makeText("left",p3.x,p3.y);
		shape3.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.MAROON));
		shape3.set_fontSize("50px");
		shape3.set_fontFamily(this.familyDisplay);
		shape3.set_textAlign(sketcher_draw_TextAlignType.Left);
		var p4 = this.grid.array[4];
		var shape4 = sketch.makeText("center",p4.x,p4.y);
		shape4.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.MAROON));
		shape4.set_fontSize("50");
		shape4.set_fontFamily(this.familyDisplay);
		shape4.set_textAlign(sketcher_draw_TextAlignType.Center);
		var p5 = this.grid.array[5];
		var shape5 = sketch.makeText("right",p5.x,p5.y);
		shape5.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.MAROON));
		shape5.set_fontSize("50");
		shape5.set_fontFamily(this.familyDisplay);
		shape5.set_textAlign(sketcher_draw_TextAlignType.Right);
		var p6 = this.grid.array[6];
		var shape6 = sketch.makeText("Right T",p6.x,p6.y);
		shape6.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.OLIVE));
		shape6.set_fontSize("30");
		shape6.set_fontFamily(this.familyDisplay);
		shape6.set_textAlign(sketcher_draw_TextAlignType.Right);
		shape6.set_textBaseline(sketcher_draw_TextBaselineType.Top);
		var p7 = this.grid.array[7];
		var shape7 = sketch.makeText("Right M",p7.x,p7.y);
		shape7.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.OLIVE));
		shape7.set_fontSize("30");
		shape7.set_fontFamily(this.familyDisplay);
		shape7.set_textAlign(sketcher_draw_TextAlignType.Right);
		shape7.set_textBaseline(sketcher_draw_TextBaselineType.Middle);
		var p8 = this.grid.array[8];
		var shape8 = sketch.makeText("Right B",p8.x,p8.y);
		shape8.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.OLIVE));
		shape8.set_fontSize("30");
		shape8.set_fontFamily(this.familyDisplay);
		shape8.set_textAlign(sketcher_draw_TextAlignType.Right);
		shape8.set_textBaseline(sketcher_draw_TextBaselineType.Bottom);
		var p9 = this.grid.array[9];
		var shape9 = sketch.makeText("One\nTwo\nThree",p9.x,p9.y);
		shape9.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.BLACK));
		var p10 = this.grid.array[10];
		var shape10 = sketch.makeText("Long line that needs to be wrapped on a specific length.",p10.x,p10.y);
		shape10.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.BLACK));
		shape10.set_fitWidth(this.grid.cellWidth);
		var p11 = this.grid.array[11];
		var shape11 = sketch.makeText("One\nTwo\nThree",p11.x,p11.y);
		shape11.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.BLACK));
		shape11.set_lineHeight(10);
		sketch.update();
	}
	,__class__: examples_ExText
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = "haxe.Timer";
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.prototype = {
	stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g = 0;
	var _g1 = position;
	while(_g < _g1) {
		var i = _g++;
		var c = xml.charCodeAt(i);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = "haxe.xml.XmlParserException";
haxe_xml_XmlParserException.prototype = {
	toString: function() {
		var c = js_Boot.getClass(this);
		return c.__name__ + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = "haxe.xml.Parser";
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				var tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(aname)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + aname + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCodePoint(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent == null || parent.nodeType != 0) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected </" + v + ">, tag is not open",str,p));
				}
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				var str1 = HxOverrides.substr(str,start + 1,p - start - 2);
				parent.addChild(Xml.createProcessingInstruction(str1));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				var child1 = Xml.createCData(HxOverrides.substr(str,start,p - start));
				parent.addChild(child1);
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					var c1 = s.charCodeAt(1) == 120 ? Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)) : Std.parseInt(HxOverrides.substr(s,1,s.length - 1));
					buf.b += String.fromCodePoint(c1);
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null ? _this.existsReserved(s) : _this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						var x = __map_reserved[s] != null ? _this1.getReserved(s) : _this1.h[s];
						buf.b += Std.string(x);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCodePoint(c),str,p));
				}
				buf.b += String.fromCodePoint(38);
				var len5 = p - start;
				buf.b += len5 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len5);
				--p;
				start = p + 1;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(parent.nodeType == 0) {
			if(parent.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(parent.nodeType));
			}
			throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unclosed node <" + parent.nodeName + ">",str,p));
		}
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
			++nsubs;
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += String.fromCodePoint(38);
		var len7 = p - start;
		buf.b += len7 == null ? HxOverrides.substr(str,start,null) : HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		++nsubs;
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var haxe_xml_Printer = function(pretty) {
	this.output = new StringBuf();
	this.pretty = pretty;
};
$hxClasses["haxe.xml.Printer"] = haxe_xml_Printer;
haxe_xml_Printer.__name__ = "haxe.xml.Printer";
haxe_xml_Printer.print = function(xml,pretty) {
	if(pretty == null) {
		pretty = false;
	}
	var printer = new haxe_xml_Printer(pretty);
	printer.writeNode(xml,"");
	return printer.output.b;
};
haxe_xml_Printer.prototype = {
	writeNode: function(value,tabs) {
		switch(value.nodeType) {
		case 0:
			this.output.b += Std.string(tabs + "<");
			if(value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeName);
			var attribute = value.attributes();
			while(attribute.hasNext()) {
				var attribute1 = attribute.next();
				this.output.b += Std.string(" " + attribute1 + "=\"");
				var input = StringTools.htmlEscape(value.get(attribute1),true);
				this.output.b += Std.string(input);
				this.output.b += "\"";
			}
			if(this.hasChildren(value)) {
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
				if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				var child = HxOverrides.iter(value.children);
				while(child.hasNext()) {
					var child1 = child.next();
					this.writeNode(child1,this.pretty ? tabs + "\t" : tabs);
				}
				this.output.b += Std.string(tabs + "</");
				if(value.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
				}
				this.output.b += Std.string(value.nodeName);
				this.output.b += ">";
				if(this.pretty) {
					this.output.b += "\n";
				}
			} else {
				this.output.b += "/>";
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 1:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var nodeValue = value.nodeValue;
			if(nodeValue.length != 0) {
				var input1 = tabs + StringTools.htmlEscape(nodeValue);
				this.output.b += Std.string(input1);
				if(this.pretty) {
					this.output.b += "\n";
				}
			}
			break;
		case 2:
			this.output.b += Std.string(tabs + "<![CDATA[");
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string(value.nodeValue);
			this.output.b += "]]>";
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 3:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var commentContent = value.nodeValue;
			var _this_r = new RegExp("[\n\r\t]+","g".split("u").join(""));
			commentContent = commentContent.replace(_this_r,"");
			commentContent = "<!--" + commentContent + "-->";
			this.output.b += tabs == null ? "null" : "" + tabs;
			var input2 = StringTools.trim(commentContent);
			this.output.b += Std.string(input2);
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 4:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<!DOCTYPE " + value.nodeValue + ">");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 5:
			if(value.nodeType == Xml.Document || value.nodeType == Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			this.output.b += Std.string("<?" + value.nodeValue + "?>");
			if(this.pretty) {
				this.output.b += "\n";
			}
			break;
		case 6:
			if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
				throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
			}
			var child2 = HxOverrides.iter(value.children);
			while(child2.hasNext()) {
				var child3 = child2.next();
				this.writeNode(child3,tabs);
			}
			break;
		}
	}
	,hasChildren: function(value) {
		if(value.nodeType != Xml.Document && value.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + _$Xml_XmlType_$Impl_$.toString(value.nodeType));
		}
		var child = HxOverrides.iter(value.children);
		while(child.hasNext()) {
			var child1 = child.next();
			switch(child1.nodeType) {
			case 0:case 1:
				return true;
			case 2:case 3:
				if(child1.nodeType == Xml.Document || child1.nodeType == Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, unexpected " + _$Xml_XmlType_$Impl_$.toString(child1.nodeType));
				}
				if(StringTools.ltrim(child1.nodeValue).length != 0) {
					return true;
				}
				break;
			default:
			}
		}
		return false;
	}
	,__class__: haxe_xml_Printer
};
var helper_html_Container = function(str,isClear) {
	if(isClear == null) {
		isClear = false;
	}
	if(str == null) {
		str = "";
	}
	this._isAttachedToEl = false;
	this._isAttachedToID = false;
	this._isDebug = false;
	this.attachID = "";
	this._id = "cc-sketcher-bootstrap-container";
	this.layout = str;
	sketcher_util_EmbedUtil.bootstrapStyle();
	if(isClear) {
		var elems = window.document.body.getElementsByTagName("div");
		var _g = 0;
		var _g1 = elems.length;
		while(_g < _g1) {
			var i = _g++;
			var _el = elems[i];
			if(_el == null) {
				return;
			}
		}
		window.document.body.innerHTML = "";
	}
};
$hxClasses["helper.html.Container"] = helper_html_Container;
helper_html_Container.__name__ = "helper.html.Container";
helper_html_Container.create = function(str) {
	console.log("src/helper/html/Container.hx:76:","x");
	var container = new helper_html_Container(str);
	return container;
};
helper_html_Container.prototype = {
	full: function(isFull) {
		if(isFull == null) {
			isFull = true;
		}
		this.set_isFull(isFull);
		return this;
	}
	,noGutter: function() {
		this.set__isNoGutter(true);
		return this;
	}
	,fullscreen: function() {
		this.set__isfullscreen(true);
		return this;
	}
	,isDebug: function(isDebug) {
		if(isDebug == null) {
			isDebug = true;
		}
		this._isDebug = isDebug;
		return this;
	}
	,attach: function() {
		this.init();
		return this;
	}
	,attachToID: function(id) {
		this._isAttachedToID = true;
		this.attachID = id;
		this.init();
		return this;
	}
	,attachToElement: function(el) {
		this._isAttachedToEl = true;
		this.attachElement = el;
		window.console.log(el);
		this.init();
		return this;
	}
	,init: function() {
		var style = this.getCSS();
		var div = window.document.createElement("div");
		div.id = "" + this._id + "-" + helper_html_Container._count;
		if(helper_html_Container._count == 0) {
			div.id = "" + this._id;
		}
		if(this.get_isFull()) {
			div.className = "container-fluid";
		} else {
			div.className = "container";
		}
		if(this.get__isfullscreen()) {
			div.setAttribute("style","padding-left: 0; padding-right: 0;");
		}
		if(this._isAttachedToID) {
			console.log("src/helper/html/Container.hx:144:","1");
			window.document.body.appendChild(div);
		} else if(this._isAttachedToEl) {
			console.log("src/helper/html/Container.hx:147:","2");
			this.attachElement.appendChild(div);
		} else {
			console.log("src/helper/html/Container.hx:150:","3");
			var el = window.document.getElementById(this.attachID);
			el.innerHTML = "<!-- container -->";
			el.appendChild(div);
		}
		var _arr = this.layout.split("\n");
		var _g = 0;
		var _g1 = _arr.length;
		while(_g < _g1) {
			var i = _g++;
			var row = _arr[i];
			var divRow = window.document.createElement("div");
			divRow.className = "row";
			if(this.get__isNoGutter()) {
				divRow.classList.add("no-gutters");
			}
			if(this._isDebug) {
				console.log("src/helper/html/Container.hx:165:",row);
			}
			var col = row.split("|");
			var _g2 = 0;
			var _g11 = col.length;
			while(_g2 < _g11) {
				var i1 = _g2++;
				var _col = col[i1];
				if(this._isDebug) {
					console.log("src/helper/html/Container.hx:170:",_col);
				}
				var divCol = window.document.createElement("div");
				divCol.className = "col";
				divRow.appendChild(divCol);
				if(_col != "") {
					var c = window.document.createElement("div");
					if(StringTools.startsWith(_col,"#")) {
						c.id = StringTools.replace(_col,"#","");
						style += "" + _col + ":after{content:\"" + _col + "\";}";
					} else if(StringTools.startsWith(_col,".")) {
						c.className = StringTools.replace(_col,".","");
						style += "" + _col + ":after{content:\"" + _col + "\";}";
					} else {
						c.id = _col;
						style += "#" + _col + ":after{content:\"" + _col + "\";}";
					}
					divCol.appendChild(c);
				}
			}
			div.appendChild(divRow);
		}
		helper_html_Container._count++;
		if(this._isDebug) {
			var css = window.document.createElement("style");
			css.appendChild(window.document.createTextNode(style));
			window.document.getElementsByTagName("head")[0].appendChild(css);
		}
	}
	,get_isFull: function() {
		return this.isFull;
	}
	,set_isFull: function(value) {
		return this.isFull = value;
	}
	,get__isNoGutter: function() {
		return this._isNoGutter;
	}
	,set__isNoGutter: function(value) {
		return this._isNoGutter = value;
	}
	,get__isfullscreen: function() {
		return this._isfullscreen;
	}
	,set__isfullscreen: function(value) {
		return this._isfullscreen = value;
	}
	,getCSS: function() {
		return "\n.col{\n    min-height:20px;\n    padding-top: .75rem;\n    padding-bottom: .75rem;\n    background-color: rgba(86,61,124,.15);\n    border: 1px solid rgba(86,61,124,.2);\n}\n";
	}
	,__class__: helper_html_Container
};
var helper_html_PullDown = function(valueArray,callback,callbackArray) {
	this.keyDefaultValue = "ccquicknav";
	this._id = "cc-sketcher-pulldown";
	this.textArray = [];
	this.valueArray = [];
	this.valueArray = valueArray;
	this.callback = callback;
	this.callbackArray = callbackArray;
	this.setup();
};
$hxClasses["helper.html.PullDown"] = helper_html_PullDown;
helper_html_PullDown.__name__ = "helper.html.PullDown";
helper_html_PullDown.convertClass = function(ccTypeArray) {
	var arr = [];
	var _g = 0;
	var _g1 = ccTypeArray.length;
	while(_g < _g1) {
		var i = _g++;
		var _ccTypeArray = ccTypeArray[i];
		var name = _ccTypeArray.__name__;
		arr.push(name);
	}
	return arr;
};
helper_html_PullDown.prototype = {
	setup: function() {
		var _gthis = this;
		var previous = window.document.getElementById(this._id);
		if(previous != null) {
			previous.parentElement.removeChild(previous);
		}
		var div = window.document.createElement("div");
		div.setAttribute("style","position: fixed;display: block;top: 0; line-height: 0; z-index:1");
		div.id = this._id;
		this.select = window.document.createElement("select");
		this.select.setAttribute("style","font-size: small;");
		this.select.id = "art";
		var _g = 0;
		var _g1 = this.valueArray.length;
		while(_g < _g1) {
			var i = _g++;
			var _valueArray = this.valueArray[i];
			var name = _valueArray;
			var option = window.document.createElement("option");
			option.value = "" + name;
			option.text = "" + name;
			if(name.indexOf(this.get_param()) != -1) {
				option.selected = true;
			}
			this.select.appendChild(option);
		}
		div.appendChild(this.select);
		window.document.body.appendChild(div);
		this.select.onchange = function(e) {
			var index = _gthis.select.selectedIndex;
			var options = _gthis.select.options;
			_gthis.set_param(_gthis.valueArray[index]);
			if(_gthis.callback != null) {
				if(_gthis.callbackArray == null) {
					_gthis.callback.apply(_gthis.callback,[index]);
				} else {
					_gthis.callback.apply(_gthis.callback,_gthis.callbackArray);
				}
			}
		};
		window.addEventListener(Globals.KEY_DOWN,function(e1) {
			if(e1.key == "h") {
				if(div.hasAttribute("style")) {
					div.removeAttribute("style");
				} else {
					div.setAttribute("style","display:none;");
				}
			}
		},false);
	}
	,test: function() {
		window.location.search = "post=1234&action=edit";
		var urlParams = new URLSearchParams(window.location.search);
		window.console.log(urlParams.has("post"));
		window.console.log(urlParams.get("action"));
		window.console.log(urlParams.getAll("action"));
		window.console.log(urlParams);
	}
	,updateURL: function() {
		window.console.warn("updateURL");
		console.log("src/helper/html/PullDown.hx:138:",this.get_param());
		var urlParams = new URLSearchParams(window.location.search);
		console.log("src/helper/html/PullDown.hx:140:",urlParams.has(this.keyDefaultValue));
		if(!urlParams.has(this.keyDefaultValue)) {
			urlParams.append(this.keyDefaultValue,this.valueArray[0]);
			this.set_param(this.valueArray[0]);
			console.log("src/helper/html/PullDown.hx:144:",this.get_param());
		} else {
			urlParams.set(this.keyDefaultValue,this.get_param());
		}
		console.log("src/helper/html/PullDown.hx:148:",this.get_param());
	}
	,setSelected: function(index) {
		var options = this.select.options;
		var o = options.item(index);
		o.selected = true;
	}
	,get_param: function() {
		return this.param;
	}
	,set_param: function(value) {
		return this.param = value;
	}
	,get_hash: function() {
		var _hash = window.location.hash;
		this.set_hash(StringTools.replace(_hash,"#",""));
		return this.hash;
	}
	,set_hash: function(value) {
		window.location.hash = value;
		return this.hash = value;
	}
	,get_selected: function() {
		return this.selected;
	}
	,set_selected: function(value) {
		this.setSelected(value);
		return this.selected = value;
	}
	,__class__: helper_html_PullDown
};
var html_CCNav = function(valueArray) {
	var _gthis = this;
	sketcher_util_EmbedUtil.ccnav(function() {
		haxe_Timer.delay($bind(_gthis,_gthis.onCompleteHandler),1000);
	});
	this.valueArray = valueArray;
};
$hxClasses["html.CCNav"] = html_CCNav;
html_CCNav.__name__ = "html.CCNav";
html_CCNav.prototype = {
	onCompleteHandler: function() {
		var div = window.document.getElementById("storage");
		div.innerHTML = "";
		var ul = window.document.createElement("ul");
		var _g = 0;
		var _g1 = this.valueArray.length;
		while(_g < _g1) {
			var i = _g++;
			var _arr = this.valueArray[i];
			var li = window.document.createElement("li");
			var a = window.document.createElement("a");
			var arr = _arr.split(".");
			var hashLink = arr[arr.length - 1];
			a.href = "#" + hashLink;
			a.text = "" + _arr;
			li.appendChild(a);
			ul.appendChild(li);
		}
		div.appendChild(ul);
	}
	,__class__: html_CCNav
};
var html_CSSinjector = function(styles,elementID) {
	if(elementID == null) {
		elementID = "inject-" + new Date().getTime();
	}
	if(styles != null) {
		this.setCSS(styles,elementID);
	}
};
$hxClasses["html.CSSinjector"] = html_CSSinjector;
html_CSSinjector.__name__ = "html.CSSinjector";
html_CSSinjector.prototype = {
	setCSS: function(styles,elementID) {
		styles = this.minify(styles);
		var css = window.document.createElement("style");
		css.id = elementID;
		css.type = "text/css";
		if(css.styleSheet) {
			css.styleSheet.cssText = styles;
		} else {
			css.appendChild(window.document.createTextNode(styles));
		}
		window.document.getElementsByTagName("head")[0].appendChild(css);
	}
	,minify: function(css) {
		return css;
	}
	,__class__: html_CSSinjector
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = "js._Boot.HaxeError";
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = "js.Boot";
js_Boot.getClass = function(o) {
	if(o == null) {
		return null;
	} else if(((o) instanceof Array)) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	if(Object.prototype.hasOwnProperty.call(cc,"__interfaces__")) {
		var intf = cc.__interfaces__;
		var _g = 0;
		var _g1 = intf.length;
		while(_g < _g1) {
			var i = _g++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		return ((o) instanceof Array);
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return o != null;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return ((o | 0) === o);
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(js_Boot.__downcastCheck(o,cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(((o) instanceof cl)) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
	}
};
js_Boot.__downcastCheck = function(o,cl) {
	if(!((o) instanceof cl)) {
		if(cl.__isInterface__) {
			return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
		} else {
			return false;
		}
	} else {
		return true;
	}
};
js_Boot.__cast = function(o,t) {
	if(o == null || js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html__$CanvasElement_CanvasUtil = function() { };
$hxClasses["js.html._CanvasElement.CanvasUtil"] = js_html__$CanvasElement_CanvasUtil;
js_html__$CanvasElement_CanvasUtil.__name__ = "js.html._CanvasElement.CanvasUtil";
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name1 = "experimental-webgl";
	var ctx1 = canvas.getContext(name1,attribs);
	if(ctx1 != null) {
		return ctx1;
	}
	return null;
};
var sketcher_AST = function() { };
$hxClasses["sketcher.AST"] = sketcher_AST;
sketcher_AST.__name__ = "sketcher.AST";
var sketcher_App = function() { };
$hxClasses["sketcher.App"] = sketcher_App;
sketcher_App.__name__ = "sketcher.App";
var sketcher_debug_Grid = function() {
};
$hxClasses["sketcher.debug.Grid"] = sketcher_debug_Grid;
sketcher_debug_Grid.__name__ = "sketcher.debug.Grid";
sketcher_debug_Grid.gridDots = function(sketch,grid) {
	var _circlesArray = [];
	var _g = 0;
	var _g1 = grid.array.length;
	while(_g < _g1) {
		var i = _g++;
		var point = grid.array[i];
		var circle = sketch.makeCircle(point.x,point.y,3);
		circle.set_fillColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.PINK,1));
		circle.set_strokeOpacity(0);
		_circlesArray.push(circle);
	}
	var rect = sketch.makeRectangle(grid.x,grid.y,grid.width,grid.height,false);
	rect.set_strokeWeight(1);
	rect.set_strokeColor(sketcher_util_ColorUtil.getColourObj(sketcher_util_ColorUtil.GRAY,0.5));
	rect.set_fillOpacity(0);
	_circlesArray.push(rect);
	var circleGroup = sketch.makeGroup(_circlesArray);
	circleGroup.set_id("grid debug layer");
};
sketcher_debug_Grid.prototype = {
	__class__: sketcher_debug_Grid
};
var sketcher_draw_AST = function() { };
$hxClasses["sketcher.draw.AST"] = sketcher_draw_AST;
sketcher_draw_AST.__name__ = "sketcher.draw.AST";
var sketcher_draw_Base = function(name) {
	this.transArr = [];
	this.dash = [];
	this.xml = Xml.createElement(name);
	sketcher_draw_Base.COUNT++;
	this.set_id(this.get_id());
};
$hxClasses["sketcher.draw.Base"] = sketcher_draw_Base;
sketcher_draw_Base.__name__ = "sketcher.draw.Base";
sketcher_draw_Base.prototype = {
	setID: function(id) {
		this.set_id(id);
	}
	,setMask: function(id) {
		this.xml.set("mask","url(#" + id + ")");
		this.set_maskID(id);
	}
	,setPosition: function(x,y) {
		this.set_move({ x : x, y : y});
		if(y == null) {
			this.set_move({ x : x, y : 0});
		}
		var str = "translate(" + x;
		if(y != null) {
			str += "," + y;
		}
		str += ")";
		this.transArr.push(str);
	}
	,setMove: function(x,y) {
		this.setPosition(x,y);
	}
	,setPlusPosition: function(x,y) {
		this.setPosition(x,y);
	}
	,setRotate: function(degree,rx,ry) {
		if(ry == null) {
			ry = 0;
		}
		if(rx == null) {
			rx = 0;
		}
		this.rotate = degree;
		this.set_rx(rx);
		this.set_ry(ry);
		var str = "rotate(" + degree;
		if(rx != 0) {
			str += "," + rx;
		}
		if(ry != 0) {
			str += "," + ry;
		}
		str += ")";
		this.transArr.push(str);
	}
	,setScale: function(x,y) {
		var str = "scale(" + x;
		if(y != null) {
			str += "," + y;
		}
		str += ")";
		this.transArr.push(str);
	}
	,getTransform: function() {
		var str = "";
		var _g = 0;
		var _g1 = this.transArr.length;
		while(_g < _g1) {
			var i = _g++;
			str += this.transArr[i] + " ";
		}
		return str;
	}
	,setStroke: function(color,weight,opacity) {
		if(opacity == null) {
			opacity = 1;
		}
		if(weight == null) {
			weight = 1;
		}
		this.set_strokeColor(color);
		this.set_strokeWeight(weight);
		this.set_strokeOpacity(opacity);
		return this;
	}
	,noStroke: function() {
		this.set_lineWeight(0);
		this.set_strokeColor("transparant");
		this.set_strokeOpacity(0);
		return this;
	}
	,setFill: function(color,opacity) {
		if(opacity == null) {
			opacity = 1;
		}
		this.set_fillColor(color);
		this.set_fillOpacity(opacity);
		return this;
	}
	,noFill: function() {
		this.set_fillOpacity(0);
		this.set_fillColor("transparant");
		return this;
	}
	,setShadow: function(color,blur,offsetx,offsety) {
		if(offsety == null) {
			offsety = 0;
		}
		if(offsetx == null) {
			offsetx = 0;
		}
		if(blur == null) {
			blur = 0;
		}
		this.set_shadowColor(color);
		this.set_shadowBlur(blur);
		this.set_shadowOffsetX(offsetx);
		this.set_shadowOffsetY(offsety);
	}
	,setLineEnds: function(linecap,linejoin) {
		if(linejoin == null) {
			linejoin = "round";
		}
		if(linecap == null) {
			linecap = "round";
		}
		this.set_lineCap(linecap);
		this.set_lineJoin(linejoin);
		return this;
	}
	,clone: function() {
		console.log("src/sketcher/draw/Base.hx:251:","WIP");
		return js_Boot.__cast(JSON.parse(JSON.stringify(this)) , sketcher_draw_Base);
	}
	,convertID: function(id) {
		return StringTools.replace(id.toLowerCase()," ","_");
	}
	,useDefaultsCanvas: function() {
		if(this.get_lineWeight() == null) {
			this.set_lineWeight(0);
		}
		if(this.get_fillColor() == null) {
			this.set_fillColor("#000000");
		}
		if(this.get_strokeColor() == null) {
			this.set_strokeColor("#000000");
			this.set_strokeOpacity(0);
		}
		if(this.get_fillOpacity() == null) {
			this.set_fillOpacity(1);
		}
		if(this.get_strokeOpacity() == null) {
			this.set_strokeOpacity(1);
		}
		if(this.get_lineCap() == null) {
			this.set_lineCap("butt");
		}
		if(this.get_lineJoin() == null) {
			this.set_lineJoin("miter");
		}
	}
	,get_maskID: function() {
		return this.maskID;
	}
	,set_maskID: function(value) {
		return this.maskID = value;
	}
	,get_id: function() {
		if(this.id == null) {
			this.set_id(this.getName() + "_" + sketcher_draw_Base.COUNT);
			sketcher_draw_Base.COUNT++;
		}
		return this.id;
	}
	,set_id: function(value) {
		value = this.convertID(value);
		if(this.xml != null) {
			this.xml.set("id",value == null ? "null" : "" + value);
			this.xml.set("data-count",Std.string(sketcher_draw_Base.COUNT));
		}
		return this.id = value;
	}
	,get_fill: function() {
		return this.fill;
	}
	,set_fill: function(value) {
		this.xml.set("fill",value == null ? "null" : "" + value);
		return this.fill = value;
	}
	,get_fillColor: function() {
		return this.get_fill();
	}
	,set_fillColor: function(value) {
		return this.set_fill(value);
	}
	,get_fillGradientColor: function() {
		return this.get_fill();
	}
	,set_fillGradientColor: function(value) {
		value = this.convertID(value);
		return this.set_fill("url(#" + value + ")");
	}
	,get_stroke: function() {
		return this.stroke;
	}
	,set_stroke: function(value) {
		this.xml.set("stroke",value == null ? "null" : "" + value);
		return this.stroke = value;
	}
	,get_strokeColor: function() {
		return this.get_stroke();
	}
	,set_strokeColor: function(value) {
		return this.set_stroke(value);
	}
	,get_lineWeight: function() {
		return this.lineWeight;
	}
	,set_lineWeight: function(value) {
		this.xml.set("stroke-width",value == null ? "null" : "" + value);
		return this.lineWeight = value;
	}
	,get_strokeWeight: function() {
		return this.get_lineWeight();
	}
	,set_strokeWeight: function(value) {
		return this.set_lineWeight(value);
	}
	,get_opacity: function() {
		return this.opacity;
	}
	,set_opacity: function(value) {
		var v = sketcher_util_MathUtil.clamp(value,0,1);
		this.set_fillOpacity(v);
		this.set_strokeOpacity(v);
		return this.opacity = v;
	}
	,get_strokeOpacity: function() {
		return this.strokeOpacity;
	}
	,set_strokeOpacity: function(value) {
		var v = sketcher_util_MathUtil.clamp(value,0,1);
		this.xml.set("stroke-opacity",v == null ? "null" : "" + v);
		return this.strokeOpacity = v;
	}
	,get_fillOpacity: function() {
		return this.fillOpacity;
	}
	,set_fillOpacity: function(value) {
		var v = sketcher_util_MathUtil.clamp(value,0,1);
		this.xml.set("fill-opacity",v == null ? "null" : "" + v);
		return this.fillOpacity = v;
	}
	,get_y: function() {
		return this.y;
	}
	,set_y: function(value) {
		return this.y = value;
	}
	,get_x: function() {
		return this.x;
	}
	,set_x: function(value) {
		return this.x = value;
	}
	,get_rotate: function() {
		return this.rotate;
	}
	,set_rotate: function(value) {
		return this.rotate = value;
	}
	,get_rx: function() {
		return this.rx;
	}
	,set_rx: function(value) {
		return this.rx = value;
	}
	,get_ry: function() {
		return this.ry;
	}
	,set_ry: function(value) {
		return this.ry = value;
	}
	,get_move: function() {
		return this.move;
	}
	,set_move: function(value) {
		return this.move = value;
	}
	,get_transform: function() {
		return this.transform;
	}
	,set_transform: function(value) {
		return this.transform = value;
	}
	,get_dash: function() {
		return this.dash;
	}
	,set_dash: function(value) {
		var str = "";
		var _g = 0;
		var _g1 = value.length;
		while(_g < _g1) {
			var i = _g++;
			str += value[i] + " ";
		}
		this.xml.set("stroke-dasharray",str);
		return this.dash = value;
	}
	,get_desc: function() {
		return this.desc;
	}
	,set_desc: function(value) {
		return this.desc = value;
	}
	,get_lineCap: function() {
		return this.lineCap;
	}
	,set_lineCap: function(value) {
		this.xml.set("stroke-linecap",Std.string(value));
		return this.lineCap = value;
	}
	,get_lineJoin: function() {
		return this.lineJoin;
	}
	,set_lineJoin: function(value) {
		this.xml.set("stroke-linejoin",Std.string(value));
		return this.lineJoin = value;
	}
	,get_shadowColor: function() {
		return this.shadowColor;
	}
	,set_shadowColor: function(value) {
		return this.shadowColor = value;
	}
	,get_shadowBlur: function() {
		return this.shadowBlur;
	}
	,set_shadowBlur: function(value) {
		return this.shadowBlur = value;
	}
	,get_shadowOffsetX: function() {
		return this.shadowOffsetX;
	}
	,set_shadowOffsetX: function(value) {
		return this.shadowOffsetX = value;
	}
	,get_shadowOffsetY: function() {
		return this.shadowOffsetY;
	}
	,set_shadowOffsetY: function(value) {
		return this.shadowOffsetY = value;
	}
	,get_isVisible: function() {
		return this.isVisible;
	}
	,set_isVisible: function(value) {
		var _opacity = 0;
		if(value) {
			_opacity = 1;
		}
		this.set_fillOpacity(_opacity);
		this.set_strokeOpacity(_opacity);
		return this.isVisible = value;
	}
	,get_count: function() {
		return sketcher_draw_Base.COUNT;
	}
	,getName: function() {
		var c = js_Boot.getClass(this);
		var name = c.__name__;
		return "" + name;
	}
	,toObject: function() {
		var c = js_Boot.getClass(this);
		var name = c.__name__;
		return JSON.parse(JSON.stringify(this));
	}
	,toString: function() {
		var c = js_Boot.getClass(this);
		var name = c.__name__;
		return "" + name + ": " + Std.string(JSON.parse(JSON.stringify(this)));
	}
	,toSvg: function() {
		throw new js__$Boot_HaxeError("Not implemented yet");
	}
	,__class__: sketcher_draw_Base
};
var sketcher_draw_IBase = function() { };
$hxClasses["sketcher.draw.IBase"] = sketcher_draw_IBase;
sketcher_draw_IBase.__name__ = "sketcher.draw.IBase";
sketcher_draw_IBase.__isInterface__ = true;
sketcher_draw_IBase.prototype = {
	__class__: sketcher_draw_IBase
};
var sketcher_draw_Background = function(color) {
	this.type = "background";
	sketcher_draw_Base.call(this,"rect");
	this.set_fillColor(color);
	this.set_id("background-layer");
};
$hxClasses["sketcher.draw.Background"] = sketcher_draw_Background;
sketcher_draw_Background.__name__ = "sketcher.draw.Background";
sketcher_draw_Background.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Background.__super__ = sketcher_draw_Base;
sketcher_draw_Background.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("x","0");
		this.xml.set("y","0");
		this.xml.set("width",Std.string(Globals.w));
		this.xml.set("height",Std.string(Globals.h));
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr1 = value.split(",");
			_r = arr1[0];
			_g = arr1[1];
			_b = arr1[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.fillStyle = sketcher_util_ColorUtil.getColourObj(_fillColor,this.get_fillOpacity());
		ctx.beginPath();
		ctx.rect(0,0,Globals.w,Globals.h);
		ctx.fill();
		ctx.closePath();
	}
	,gl: function(gl) {
		if(!sketcher_draw_Background.ISWARN) {
			window.console.warn("webgl is not implemented yet");
			sketcher_draw_Background.ISWARN = true;
		}
		var c = "#ff3333";
		var value = c;
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr1 = value.split(",");
			_r = arr1[0];
			_g = arr1[1];
			_b = arr1[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var rgba_r = _r;
		var rgba_g = _g;
		var rgba_b = _b;
		var rgba_a = _a;
		gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);
		gl.clearColor(rgba_r / 255,rgba_g / 255,rgba_b / 255,rgba_a);
		gl.clear(16384);
	}
	,__class__: sketcher_draw_Background
});
var sketcher_draw_Button = function(x,y,width,height,isCenter) {
	if(isCenter == null) {
		isCenter = true;
	}
	this.type = "rectangle";
	this.set_x(x);
	this.set_y(y);
	this.set_width(width);
	this.set_height(height);
	this.cx = this.get_x() - this.get_width() / 2;
	this.cy = this.get_y() - this.get_height() / 2;
	this.isCenter = isCenter;
	if(!isCenter) {
		this.cx = this.get_x();
		this.cy = this.get_y();
	}
	this.point_top_left = { x : this.cx, y : this.cy};
	this.point_top_right = { x : this.cx + this.get_width(), y : this.cy};
	this.point_bottom_left = { x : this.cx, y : this.cy + this.get_height()};
	this.point_bottom_right = { x : this.cx + this.get_width(), y : this.cy + this.get_height()};
	sketcher_draw_Base.call(this,"rect");
};
$hxClasses["sketcher.draw.Button"] = sketcher_draw_Button;
sketcher_draw_Button.__name__ = "sketcher.draw.Button";
sketcher_draw_Button.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Button.__super__ = sketcher_draw_Base;
sketcher_draw_Button.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("x",Std.string(this.cx));
		this.xml.set("y",Std.string(this.cy));
		this.xml.set("width",Std.string(this.get_width()));
		this.xml.set("height",Std.string(this.get_height()));
		if(this.get_radius() != null) {
			this.xml.set("rx",Std.string(this.get_radius()));
			this.xml.set("ry",Std.string(this.get_radius()));
		}
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,useCanvasShadow: function(ctx) {
		if(this.get_shadowColor() != null) {
			ctx.shadowColor = this.get_shadowColor();
			ctx.shadowBlur = this.get_shadowBlur();
			ctx.shadowOffsetX = this.get_shadowOffsetX();
			ctx.shadowOffsetY = this.get_shadowOffsetY();
		}
	}
	,ctx: function(ctx) {
		var _gthis = this;
		this.rect = Sketcher.ctx.canvas.getBoundingClientRect();
		this.scale = this.rect.width / Globals.w;
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr1 = value.split(",");
			_r = arr1[0];
			_g = arr1[1];
			_b = arr1[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.fillStyle = sketcher_util_ColorUtil.getColourObj(_fillColor,this.get_fillOpacity());
		var value1 = this.get_strokeColor();
		var _r1 = 0;
		var _g1 = 0;
		var _b1 = 0;
		var _a1 = 1;
		value1 = StringTools.replace(value1," ","");
		if(value1.indexOf("rgba") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgba(",""),")","");
			var arr2 = value1.split(",");
			_r1 = arr2[0];
			_g1 = arr2[1];
			_b1 = arr2[2];
			_a1 = arr2[3];
		} else if(value1.indexOf("rgb") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgb(",""),")","");
			var arr11 = value1.split(",");
			_r1 = arr11[0];
			_g1 = arr11[1];
			_b1 = arr11[2];
		} else if(value1.indexOf("#") != -1) {
			var int1 = Std.parseInt(StringTools.replace(value1,"#","0x"));
			var rgb_r1 = int1 >> 16 & 255;
			var rgb_g1 = int1 >> 8 & 255;
			var rgb_b1 = int1 & 255;
			_r1 = rgb_r1;
			_g1 = rgb_g1;
			_b1 = rgb_b1;
		}
		var _strokeColor = { r : _r1, g : _g1, b : _b1, a : _a1};
		ctx.strokeStyle = sketcher_util_ColorUtil.getColourObj(_strokeColor,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		if(this.get_rotate() != null && this.get_move() == null) {
			ctx.save();
			ctx.translate(this.get_x(),this.get_y());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			ctx.arc(0,0,10,0,2 * Math.PI);
			ctx.rect(-(this.get_width() / 2),-(this.get_height() / 2),this.get_width(),this.get_height());
			ctx.restore();
		}
		if(this.get_move() != null && this.get_rotate() == null) {
			ctx.save();
			ctx.translate(this.cx,this.cy);
			ctx.translate(this.get_move().x,this.get_move().y);
			ctx.rect(0,0,this.get_width(),this.get_height());
			ctx.restore();
		}
		if(this.get_rotate() == null && this.get_move() == null) {
			this.buildCanvasShape(ctx);
		}
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
		Sketcher.ctx.canvas.addEventListener("mousedown",function(e) {
			Globals.mouseX = e.clientX - _gthis.rect.left;
			Globals.mouseY = e.clientY - _gthis.rect.top;
			if(_gthis.isMouseOver()) {
				console.log("src/sketcher/draw/Button.hx:208:","click");
			}
			return Globals.isMouseDown = true;
		});
		Sketcher.ctx.canvas.addEventListener("mousemove",function(e1) {
			Globals.mouseX = e1.clientX - _gthis.rect.left;
			Globals.mouseY = e1.clientY - _gthis.rect.top;
			if(_gthis.isMouseOver()) {
				return Sketcher.ctx.canvas.style.cursor = "pointer";
			} else {
				return Sketcher.ctx.canvas.style.cursor = "default";
			}
		});
		window.addEventListener("mouseup",function(e2) {
			if(Globals.isMouseDown == true) {
				Globals.isMouseDown = false;
			}
			return;
		});
	}
	,isMouseOver: function() {
		if(Globals.mouseX >= this.point_top_left.x * this.scale && Globals.mouseX <= this.point_bottom_right.x * this.scale && Globals.mouseY >= this.point_top_left.y * this.scale && Globals.mouseY <= this.point_bottom_right.y * this.scale) {
			return true;
		} else {
			return false;
		}
	}
	,buildCanvasShape: function(ctx) {
		if(this.get_radius() == null) {
			ctx.rect(this.cx,this.cy,this.get_width(),this.get_height());
		} else {
			var radius_tl = this.get_radius();
			var radius_tr = this.get_radius();
			var radius_br = this.get_radius();
			var radius_bl = this.get_radius();
			ctx.moveTo(this.cx + radius_tl,this.cy);
			ctx.lineTo(this.cx + this.get_width() - radius_tr,this.cy);
			ctx.quadraticCurveTo(this.cx + this.get_width(),this.cy,this.cx + this.get_width(),this.cy + radius_tr);
			ctx.lineTo(this.cx + this.get_width(),this.cy + this.get_height() - radius_br);
			ctx.quadraticCurveTo(this.cx + this.get_width(),this.cy + this.get_height(),this.cx + this.get_width() - radius_br,this.cy + this.get_height());
			ctx.lineTo(this.cx + radius_bl,this.cy + this.get_height());
			ctx.quadraticCurveTo(this.cx,this.cy + this.get_height(),this.cx,this.cy + this.get_height() - radius_bl);
			ctx.lineTo(this.cx,this.cy + radius_tl);
			ctx.quadraticCurveTo(this.cx,this.cy,this.cx + radius_tl,this.cy);
			ctx.closePath();
		}
	}
	,gl: function(gl) {
	}
	,get_radius: function() {
		return this.radius;
	}
	,set_radius: function(value) {
		return this.radius = value;
	}
	,get_width: function() {
		return this.width;
	}
	,set_width: function(value) {
		return this.width = value;
	}
	,get_height: function() {
		return this.height;
	}
	,set_height: function(value) {
		return this.height = value;
	}
	,__class__: sketcher_draw_Button
});
var sketcher_draw_Circle = function(x,y,radius) {
	this.type = "circle";
	this.set_x(x);
	this.set_y(y);
	this.set_radius(radius);
	sketcher_draw_Base.call(this,"circle");
};
$hxClasses["sketcher.draw.Circle"] = sketcher_draw_Circle;
sketcher_draw_Circle.__name__ = "sketcher.draw.Circle";
sketcher_draw_Circle.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Circle.__super__ = sketcher_draw_Base;
sketcher_draw_Circle.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("cx",Std.string(this.get_x()));
		this.xml.set("cy",Std.string(this.get_y()));
		this.xml.set("r",Std.string(this.get_radius()));
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		if(this.get_lineWeight() != null) {
			this.xml.set("stroke-width",Std.string(this.get_lineWeight()));
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr1 = value.split(",");
			_r = arr1[0];
			_g = arr1[1];
			_b = arr1[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.fillStyle = sketcher_util_ColorUtil.getColourObj(_fillColor,this.get_fillOpacity());
		var value1 = this.get_strokeColor();
		var _r1 = 0;
		var _g1 = 0;
		var _b1 = 0;
		var _a1 = 1;
		value1 = StringTools.replace(value1," ","");
		if(value1.indexOf("rgba") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgba(",""),")","");
			var arr2 = value1.split(",");
			_r1 = arr2[0];
			_g1 = arr2[1];
			_b1 = arr2[2];
			_a1 = arr2[3];
		} else if(value1.indexOf("rgb") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgb(",""),")","");
			var arr11 = value1.split(",");
			_r1 = arr11[0];
			_g1 = arr11[1];
			_b1 = arr11[2];
		} else if(value1.indexOf("#") != -1) {
			var int1 = Std.parseInt(StringTools.replace(value1,"#","0x"));
			var rgb_r1 = int1 >> 16 & 255;
			var rgb_g1 = int1 >> 8 & 255;
			var rgb_b1 = int1 & 255;
			_r1 = rgb_r1;
			_g1 = rgb_g1;
			_b1 = rgb_b1;
		}
		var _strokeColor = { r : _r1, g : _g1, b : _b1, a : _a1};
		ctx.strokeStyle = sketcher_util_ColorUtil.getColourObj(_strokeColor,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		if(this.get_rotate() != null) {
			ctx.save();
			ctx.translate(this.get_x(),this.get_y());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			if(this.get_move() != null) {
				ctx.translate(this.get_move().x,this.get_move().y);
			}
			ctx.arc(0,0,this.get_radius(),0,2 * Math.PI);
			ctx.restore();
		}
		if(this.get_rotate() == null) {
			ctx.arc(this.get_x(),this.get_y(),this.get_radius(),0,2 * Math.PI);
		}
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
		var tmp = this.get_rotate() != null;
	}
	,gl: function(gl) {
	}
	,debug: function() {
		console.log("src/sketcher/draw/Circle.hx:101:","" + this.toString());
	}
	,get_radius: function() {
		return this.radius;
	}
	,set_radius: function(value) {
		return this.radius = value;
	}
	,__class__: sketcher_draw_Circle
});
var sketcher_draw_Ellipse = function(x,y,rx,ry) {
	this.type = "Ellipse";
	this.set_x(x);
	this.set_y(y);
	this.set_rrx(rx);
	this.set_rry(ry);
	sketcher_draw_Base.call(this,"ellipse");
};
$hxClasses["sketcher.draw.Ellipse"] = sketcher_draw_Ellipse;
sketcher_draw_Ellipse.__name__ = "sketcher.draw.Ellipse";
sketcher_draw_Ellipse.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Ellipse.__super__ = sketcher_draw_Base;
sketcher_draw_Ellipse.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("cx",Std.string(this.get_x()));
		this.xml.set("cy",Std.string(this.get_y()));
		this.xml.set("rx",Std.string(this.get_rrx()));
		this.xml.set("ry",Std.string(this.get_rry()));
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		ctx.beginPath();
		ctx.fill();
		ctx.stroke();
	}
	,gl: function(gl) {
	}
	,get_rry: function() {
		return this.rry;
	}
	,set_rry: function(value) {
		return this.rry = value;
	}
	,get_rrx: function() {
		return this.rrx;
	}
	,set_rrx: function(value) {
		return this.rrx = value;
	}
	,__class__: sketcher_draw_Ellipse
});
var sketcher_draw_Gradient = function(color0,color1,isLinear) {
	if(isLinear == null) {
		isLinear = true;
	}
	this.type = "gradient";
	this.color0 = color0;
	this.color1 = color1;
	sketcher_draw_Base.call(this,"linearGradient");
};
$hxClasses["sketcher.draw.Gradient"] = sketcher_draw_Gradient;
sketcher_draw_Gradient.__name__ = "sketcher.draw.Gradient";
sketcher_draw_Gradient.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Gradient.__super__ = sketcher_draw_Base;
sketcher_draw_Gradient.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		var stop0 = Xml.createElement("stop");
		stop0.set("offset","0%");
		stop0.set("stop-color","" + this.color0);
		var stop1 = Xml.createElement("stop");
		stop1.set("offset","100%");
		stop1.set("stop-color","" + this.color1);
		this.xml.addChild(stop0);
		this.xml.addChild(stop1);
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		if(!sketcher_draw_Gradient.ISWARN) {
			window.console.warn("Gradient doens't work the same as svg, use with care");
			sketcher_draw_Gradient.ISWARN = true;
		}
		var w = ctx.canvas.width;
		var h = ctx.canvas.height;
		var grd = ctx.createLinearGradient(0,0,w,0);
		grd.addColorStop(0,"" + this.color0);
		grd.addColorStop(1,"" + this.color1);
		this.canvasGradient = grd;
		this.gradientObj = { id : this.get_id(), canvasGradient : this.canvasGradient};
		ctx.fillStyle = grd;
		ctx.fillRect(0,0,w,h);
	}
	,gl: function(gl) {
	}
	,__class__: sketcher_draw_Gradient
});
var sketcher_draw_Group = function(arr) {
	this.isOpacityOverride = false;
	this.type = "group";
	this.set_arr(arr);
	sketcher_draw_Base.call(this,"g");
};
$hxClasses["sketcher.draw.Group"] = sketcher_draw_Group;
sketcher_draw_Group.__name__ = "sketcher.draw.Group";
sketcher_draw_Group.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Group.__super__ = sketcher_draw_Base;
sketcher_draw_Group.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		if(this.get_x() > 0 && this.get_y() > 0) {
			this.transArr.push("translate(" + this.get_x() + ", " + this.get_y() + ")");
		}
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		if(this.isOpacityOverride) {
			this.xml.set("opacity-override","true");
		}
		var comment = Xml.createComment("Group: " + this.get_id());
		this.xml.addChild(comment);
		this.xml.addChild(Xml.parse("<desc>" + this.get_id() + "</desc>"));
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var base = this.get_arr()[i];
			this.xml.addChild(Xml.parse(base.svg(null)));
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		if(!sketcher_draw_Group.ISWARN) {
			window.console.groupCollapsed("Group (" + this.get_id() + ") info canvas");
			window.console.info("the following work\n- strokeOpacity\n- fillOpacity\n- fillColor\n- strokeColor\n- strokeWeight\n- rotate");
			window.console.warn("doesn't work\n- move");
			window.console.groupEnd();
			sketcher_draw_Group.ISWARN = true;
		}
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var base = this.get_arr()[i];
			if(base == null) {
				continue;
			}
			if(this.get_fillOpacity() != null && (js_Boot.__cast(base , sketcher_draw_Base)).get_fillOpacity() == null) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_fillOpacity(this.get_fillOpacity());
			}
			if(this.get_strokeOpacity() != null && (js_Boot.__cast(base , sketcher_draw_Base)).get_strokeOpacity() == null) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_strokeOpacity(this.get_strokeOpacity());
			}
			if(this.get_fillColor() != null && (js_Boot.__cast(base , sketcher_draw_Base)).get_fillColor() == null) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_fillColor(this.get_fillColor());
			}
			if(this.get_strokeColor() != null && (js_Boot.__cast(base , sketcher_draw_Base)).get_strokeColor() == null) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_strokeColor(this.get_strokeColor());
			}
			if(this.get_strokeWeight() != null) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_strokeWeight(this.get_strokeWeight());
			}
			if(this.isOpacityOverride) {
				(js_Boot.__cast(base , sketcher_draw_Base)).set_strokeOpacity(this.get_strokeOpacity());
				(js_Boot.__cast(base , sketcher_draw_Base)).set_fillOpacity(this.get_fillOpacity());
			}
		}
		var newCanvas = window.document.createElement("canvas");
		newCanvas.width = ctx.canvas.width;
		newCanvas.height = ctx.canvas.height;
		var newCtx = newCanvas.getContext("2d",null);
		var _g2 = 0;
		var _g3 = this.get_arr().length;
		while(_g2 < _g3) {
			var i1 = _g2++;
			var base1 = this.get_arr()[i1];
			if(base1 == null) {
				continue;
			}
			base1.ctx(newCtx);
		}
		if(this.get_rotate() != null) {
			ctx.save();
			ctx.translate(this.get_rx(),this.get_ry());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			ctx.drawImage(newCanvas,-this.get_rx(),-this.get_ry());
			ctx.restore();
		} else {
			ctx.drawImage(newCanvas,0,0);
		}
	}
	,gl: function(gl) {
	}
	,hide: function() {
		this.set_fillOpacity(0);
		this.set_strokeOpacity(0);
		this.isOpacityOverride = true;
	}
	,test: function() {
		console.log("src/sketcher/draw/Group.hx:142:","test if casting works");
	}
	,get_arr: function() {
		return this.arr;
	}
	,set_arr: function(value) {
		return this.arr = value;
	}
	,__class__: sketcher_draw_Group
});
var sketcher_draw_Image = function(x,y,href,width,height,isCenter) {
	if(isCenter == null) {
		isCenter = false;
	}
	this.type = "image";
	this.set_x(x);
	this.set_y(y);
	this.set_href(href);
	this.set_width(width);
	this.set_height(height);
	this.set_isCenter(isCenter);
	if(isCenter) {
		this.set_x(this.get_x() - this.get_width() / 2);
		this.set_y(this.get_y() - this.get_height() / 2);
	}
	sketcher_draw_Base.call(this,"image");
};
$hxClasses["sketcher.draw.Image"] = sketcher_draw_Image;
sketcher_draw_Image.__name__ = "sketcher.draw.Image";
sketcher_draw_Image.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Image.__super__ = sketcher_draw_Base;
sketcher_draw_Image.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("x",Std.string(this.get_x()));
		this.xml.set("y",Std.string(this.get_y()));
		this.xml.set("href",Std.string(this.get_href()));
		this.xml.set("width",Std.string(this.get_width()));
		this.xml.set("height",Std.string(this.get_height()));
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		var _gthis = this;
		this.useDefaultsCanvas();
		ctx.imageSmoothingEnabled = true;
		ctx.imageSmoothingQuality = "high";
		var img = new Image();
		img.onload = function() {
			var prop = img.height / img.width;
			if(img.width < img.height) {
				prop = img.width / img.height;
			}
			if(_gthis.get_rotate() != null) {
				ctx.save();
				var tmp = _gthis.get_x();
				var tmp1 = _gthis.get_y();
				ctx.translate(tmp,tmp1);
				var tmp2 = sketcher_util_MathUtil.radians(_gthis.get_rotate());
				ctx.rotate(tmp2);
				if(_gthis.get_move() != null) {
					var tmp3 = _gthis.get_move().x;
					ctx.translate(tmp3,_gthis.get_move().y);
				}
				if(_gthis.get_isCenter()) {
					var tmp4 = -(_gthis.get_width() * 0);
					var tmp5 = -(_gthis.get_height() * prop);
					var tmp6 = _gthis.get_width();
					var tmp7 = _gthis.get_height() * prop;
					ctx.drawImage(img,tmp4,tmp5,tmp6,tmp7);
				} else {
					var tmp8 = _gthis.get_width();
					var tmp9 = _gthis.get_height() * prop;
					ctx.drawImage(img,0,0,tmp8,tmp9);
				}
				ctx.restore();
			}
			if(_gthis.get_rotate() == null) {
				var tmp10 = _gthis.get_x();
				var tmp11 = _gthis.get_y();
				var tmp12 = _gthis.get_width();
				var tmp13 = _gthis.get_height() * prop;
				ctx.drawImage(img,tmp10,tmp11,tmp12,tmp13);
			}
		};
		img.onerror = function(e) {
			window.console.warn(e);
		};
		img.src = this.get_href();
	}
	,gl: function(gl) {
	}
	,get_href: function() {
		return this.href;
	}
	,set_href: function(value) {
		return this.href = value;
	}
	,get_width: function() {
		return this.width;
	}
	,set_width: function(value) {
		return this.width = value;
	}
	,get_height: function() {
		return this.height;
	}
	,set_height: function(value) {
		return this.height = value;
	}
	,get_isCenter: function() {
		return this.isCenter;
	}
	,set_isCenter: function(value) {
		return this.isCenter = value;
	}
	,get_preserveAspectRatio: function() {
		return this.preserveAspectRatio;
	}
	,set_preserveAspectRatio: function(value) {
		return this.preserveAspectRatio = value;
	}
	,__class__: sketcher_draw_Image
});
var sketcher_draw_Line = function(x,y,x2,y2) {
	this.type = "Line";
	this.set_x(x);
	this.set_y(y);
	this.set_x2(x2);
	this.set_y2(y2);
	sketcher_draw_Base.call(this,"line");
};
$hxClasses["sketcher.draw.Line"] = sketcher_draw_Line;
sketcher_draw_Line.__name__ = "sketcher.draw.Line";
sketcher_draw_Line.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Line.__super__ = sketcher_draw_Base;
sketcher_draw_Line.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("x1",Std.string(this.get_x()));
		this.xml.set("y1",Std.string(this.get_y()));
		this.xml.set("x2",Std.string(this.get_x2()));
		this.xml.set("y2",Std.string(this.get_y2()));
		if(this.get_stroke() != null) {
			this.xml.set("stroke",this.get_stroke());
		}
		if(this.get_lineWeight() != null) {
			this.xml.set("stroke-width",Std.string(this.get_lineWeight()));
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr1 = value.split(",");
			_r = arr1[0];
			_g = arr1[1];
			_b = arr1[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.fillStyle = sketcher_util_ColorUtil.getColourObj(_fillColor,this.get_fillOpacity());
		var value1 = this.get_strokeColor();
		var _r1 = 0;
		var _g1 = 0;
		var _b1 = 0;
		var _a1 = 1;
		value1 = StringTools.replace(value1," ","");
		if(value1.indexOf("rgba") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgba(",""),")","");
			var arr2 = value1.split(",");
			_r1 = arr2[0];
			_g1 = arr2[1];
			_b1 = arr2[2];
			_a1 = arr2[3];
		} else if(value1.indexOf("rgb") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgb(",""),")","");
			var arr11 = value1.split(",");
			_r1 = arr11[0];
			_g1 = arr11[1];
			_b1 = arr11[2];
		} else if(value1.indexOf("#") != -1) {
			var int1 = Std.parseInt(StringTools.replace(value1,"#","0x"));
			var rgb_r1 = int1 >> 16 & 255;
			var rgb_g1 = int1 >> 8 & 255;
			var rgb_b1 = int1 & 255;
			_r1 = rgb_r1;
			_g1 = rgb_g1;
			_b1 = rgb_b1;
		}
		var _strokeColor = { r : _r1, g : _g1, b : _b1, a : _a1};
		ctx.strokeStyle = sketcher_util_ColorUtil.getColourObj(_strokeColor,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		ctx.moveTo(this.get_x(),this.get_y());
		ctx.lineTo(this.get_x2(),this.get_y2());
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	,gl: function(gl) {
	}
	,get_x2: function() {
		return this.x2;
	}
	,set_x2: function(value) {
		return this.x2 = value;
	}
	,get_y2: function() {
		return this.y2;
	}
	,set_y2: function(value) {
		return this.y2 = value;
	}
	,__class__: sketcher_draw_Line
});
var sketcher_draw_Mask = function(arr) {
	this.type = "mask";
	this.set_arr(arr);
	sketcher_draw_Base.call(this,"mask");
};
$hxClasses["sketcher.draw.Mask"] = sketcher_draw_Mask;
sketcher_draw_Mask.__name__ = "sketcher.draw.Mask";
sketcher_draw_Mask.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Mask.__super__ = sketcher_draw_Base;
sketcher_draw_Mask.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("x","0");
		this.xml.set("y","0");
		this.xml.set("width",Std.string(Globals.w));
		this.xml.set("height",Std.string(Globals.h));
		var comment = Xml.createComment("Mask: " + this.get_id());
		this.xml.addChild(comment);
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var base = this.get_arr()[i];
			(js_Boot.__cast(base , sketcher_draw_Base)).noStroke().setFill("#FFFFFF");
			this.xml.addChild(Xml.parse(base.svg(null)));
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		if(!sketcher_draw_Mask.ISWARN) {
			window.console.warn("Mask doens't work the same as svg, use with care");
			sketcher_draw_Mask.ISWARN = true;
		}
		ctx.save();
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var base = this.get_arr()[i];
			if(base == null) {
				continue;
			}
			window.console.info(this.get_id() + " --> " + base.type);
			base.ctx(ctx);
		}
		ctx.clip();
		ctx.restore();
	}
	,gl: function(gl) {
	}
	,get_arr: function() {
		return this.arr;
	}
	,set_arr: function(value) {
		return this.arr = value;
	}
	,__class__: sketcher_draw_Mask
});
var sketcher_draw_Mirror = function(dir) {
	this.baseArray = [];
	this.type = "mirror";
	if(dir == null) {
		dir = "right";
	}
	this.dir = dir;
	sketcher_draw_Base.call(this,"mirror");
};
$hxClasses["sketcher.draw.Mirror"] = sketcher_draw_Mirror;
sketcher_draw_Mirror.__name__ = "sketcher.draw.Mirror";
sketcher_draw_Mirror.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Mirror.__super__ = sketcher_draw_Base;
sketcher_draw_Mirror.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		if(!sketcher_draw_Mirror.ISWARN) {
			window.console.warn("Mirror doens't work the same as canvas, use with care");
			sketcher_draw_Mirror.ISWARN = true;
		}
		var _g = 0;
		var _g1 = this.baseArray.length;
		while(_g < _g1) {
			var i = _g++;
			var _baseArray = this.baseArray[i];
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		if(!sketcher_draw_Mirror.ISWARN) {
			window.console.warn("Mirror works only for the right part of the sketch");
			sketcher_draw_Mirror.ISWARN = true;
		}
		var _y = 0;
		var _y2 = Globals.h / 2;
		var _x = 0;
		var _x2 = Globals.w / 2;
		var _w = Globals.w / 2;
		var _h = Globals.h / 2;
		ctx.save();
		ctx.translate(_x2,_y);
		ctx.scale(-1,1);
		ctx.clearRect(0,0,Globals.w,Globals.h);
		ctx.drawImage(ctx.canvas,_x2,_y,Globals.w,Globals.h,0,0,Globals.w,Globals.h);
		ctx.restore();
	}
	,gl: function(gl) {
	}
	,__class__: sketcher_draw_Mirror
});
var sketcher_draw_Path = function(x,y) {
	this.type = "Path";
	this.dArray = [];
	this.moveTo(x,y);
	sketcher_draw_Base.call(this,"path");
};
$hxClasses["sketcher.draw.Path"] = sketcher_draw_Path;
sketcher_draw_Path.__name__ = "sketcher.draw.Path";
sketcher_draw_Path.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Path.__super__ = sketcher_draw_Base;
sketcher_draw_Path.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		var str = "";
		var _g = 0;
		var _g1 = this.dArray;
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			str += i;
		}
		this.xml.set("d",str);
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		ctx.beginPath();
		ctx.fill();
		ctx.stroke();
	}
	,gl: function(gl) {
	}
	,window: function(x,y,width,height,x2,y2,width2,height2) {
		this.dArray = [];
		this.set_id("passe-partout " + this.get_count());
		this.dArray.push("M" + x + "," + y);
		this.dArray.push("V" + (y + height));
		this.dArray.push("H" + (x + width));
		this.dArray.push("V" + y);
		this.dArray.push("Z");
		this.dArray.push("M" + (x2 + width2) + "," + (y2 + height2));
		this.dArray.push("H" + x2);
		this.dArray.push("V" + y2);
		this.dArray.push("H" + (x2 + width2));
		this.dArray.push("Z");
	}
	,moveTo: function(x,y) {
		this.dArray.push("M" + x + ", " + y + " ");
	}
	,lineTo: function(x,y) {
		this.dArray.push("L" + x + ", " + y + " ");
	}
	,horizontalLineTo: function(x) {
		this.dArray.push("H" + x + " ");
	}
	,verticalLineTo: function(y) {
		this.dArray.push("V" + y + " ");
	}
	,curveto: function(x1,y1,x2,y2,x,y) {
		this.dArray.push("C" + x1 + ", " + y1 + " " + x2 + ", " + y2 + " " + x + ", " + y + " ");
	}
	,closepath: function() {
		this.dArray.push("Z ");
	}
	,__class__: sketcher_draw_Path
});
var sketcher_draw_PolyLine = function(arr) {
	this.type = "PolyLine";
	this.set_arr(arr);
	sketcher_draw_Base.call(this,"polyline");
};
$hxClasses["sketcher.draw.PolyLine"] = sketcher_draw_PolyLine;
sketcher_draw_PolyLine.__name__ = "sketcher.draw.PolyLine";
sketcher_draw_PolyLine.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_PolyLine.__super__ = sketcher_draw_Base;
sketcher_draw_PolyLine.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		if(this.get_desc() != "") {
			this.xml.addChild(Xml.parse("<desc>" + this.get_desc() + "</desc>"));
		}
		var str = "";
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var value = this.get_arr()[i];
			str += "" + value + " ";
		}
		this.xml.set("points",str);
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		if(this.get_lineJoin() != null) {
			ctx.lineJoin = this.get_lineJoin();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr1 = value.split(",");
			_r = arr1[0];
			_g = arr1[1];
			_b = arr1[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.fillStyle = sketcher_util_ColorUtil.getColourObj(_fillColor,this.get_fillOpacity());
		var value1 = this.get_strokeColor();
		var _r1 = 0;
		var _g1 = 0;
		var _b1 = 0;
		var _a1 = 1;
		value1 = StringTools.replace(value1," ","");
		if(value1.indexOf("rgba") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgba(",""),")","");
			var arr2 = value1.split(",");
			_r1 = arr2[0];
			_g1 = arr2[1];
			_b1 = arr2[2];
			_a1 = arr2[3];
		} else if(value1.indexOf("rgb") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgb(",""),")","");
			var arr11 = value1.split(",");
			_r1 = arr11[0];
			_g1 = arr11[1];
			_b1 = arr11[2];
		} else if(value1.indexOf("#") != -1) {
			var int1 = Std.parseInt(StringTools.replace(value1,"#","0x"));
			var rgb_r1 = int1 >> 16 & 255;
			var rgb_g1 = int1 >> 8 & 255;
			var rgb_b1 = int1 & 255;
			_r1 = rgb_r1;
			_g1 = rgb_g1;
			_b1 = rgb_b1;
		}
		var _strokeColor = { r : _r1, g : _g1, b : _b1, a : _a1};
		ctx.strokeStyle = sketcher_util_ColorUtil.getColourObj(_strokeColor,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		var _pointArray = this.convertArr();
		var _g2 = 0;
		var _g11 = _pointArray.length;
		while(_g2 < _g11) {
			var i = _g2++;
			var p = _pointArray[i];
			if(i == 0) {
				ctx.moveTo(p.x,p.y);
			} else {
				ctx.lineTo(p.x,p.y);
			}
		}
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	,gl: function(gl) {
	}
	,convertArr: function() {
		var _pointArray = [];
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			if(i % 2 == 0) {
				var x = this.get_arr()[i];
				var y = this.get_arr()[i + 1];
				_pointArray.push({ x : x, y : y});
			}
		}
		return _pointArray;
	}
	,get_arr: function() {
		return this.arr;
	}
	,set_arr: function(value) {
		return this.arr = value;
	}
	,__class__: sketcher_draw_PolyLine
});
var sketcher_draw_Polygon = function(arr) {
	this.type = "Polygon";
	this.set_arr(arr);
	sketcher_draw_Base.call(this,"polygon");
};
$hxClasses["sketcher.draw.Polygon"] = sketcher_draw_Polygon;
sketcher_draw_Polygon.__name__ = "sketcher.draw.Polygon";
sketcher_draw_Polygon.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Polygon.__super__ = sketcher_draw_Base;
sketcher_draw_Polygon.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		var str = "";
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			var value = this.get_arr()[i];
			str += "" + value + " ";
		}
		this.xml.set("points",str);
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		if(!sketcher_draw_Polygon.ISWARN) {
			window.console.groupCollapsed("Polygon (" + this.get_id() + ") info canvas");
			window.console.warn("doesn't work\n- move\n- rotate (for weird shapes, works for sides)\n- lineJoin");
			window.console.groupEnd();
			sketcher_draw_Polygon.ISWARN = true;
		}
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr1 = value.split(",");
			_r = arr1[0];
			_g = arr1[1];
			_b = arr1[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.fillStyle = sketcher_util_ColorUtil.getColourObj(_fillColor,this.get_fillOpacity());
		var value1 = this.get_strokeColor();
		var _r1 = 0;
		var _g1 = 0;
		var _b1 = 0;
		var _a1 = 1;
		value1 = StringTools.replace(value1," ","");
		if(value1.indexOf("rgba") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgba(",""),")","");
			var arr2 = value1.split(",");
			_r1 = arr2[0];
			_g1 = arr2[1];
			_b1 = arr2[2];
			_a1 = arr2[3];
		} else if(value1.indexOf("rgb") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgb(",""),")","");
			var arr11 = value1.split(",");
			_r1 = arr11[0];
			_g1 = arr11[1];
			_b1 = arr11[2];
		} else if(value1.indexOf("#") != -1) {
			var int1 = Std.parseInt(StringTools.replace(value1,"#","0x"));
			var rgb_r1 = int1 >> 16 & 255;
			var rgb_g1 = int1 >> 8 & 255;
			var rgb_b1 = int1 & 255;
			_r1 = rgb_r1;
			_g1 = rgb_g1;
			_b1 = rgb_b1;
		}
		var _strokeColor = { r : _r1, g : _g1, b : _b1, a : _a1};
		ctx.strokeStyle = sketcher_util_ColorUtil.getColourObj(_strokeColor,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		var _pointArray = this.convertArr();
		if(this.get_rotate() != null) {
			ctx.save();
			ctx.translate(this.get_rx(),this.get_ry());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			var _g2 = 0;
			var _g11 = _pointArray.length;
			while(_g2 < _g11) {
				var i = _g2++;
				var p = _pointArray[i];
				if(i == 0) {
					ctx.moveTo(p.x - this.get_rx(),p.y - this.get_ry());
				} else {
					ctx.lineTo(p.x - this.get_rx(),p.y - this.get_ry());
				}
			}
			ctx.restore();
		} else {
			var _g3 = 0;
			var _g12 = _pointArray.length;
			while(_g3 < _g12) {
				var i1 = _g3++;
				var p1 = _pointArray[i1];
				if(i1 == 0) {
					ctx.moveTo(p1.x,p1.y);
				} else {
					ctx.lineTo(p1.x,p1.y);
				}
			}
		}
		ctx.closePath();
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	,gl: function(gl) {
	}
	,convertArr: function() {
		var _pointArray = [];
		var _g = 0;
		var _g1 = this.get_arr().length;
		while(_g < _g1) {
			var i = _g++;
			if(i % 2 == 0) {
				var x = this.get_arr()[i];
				var y = this.get_arr()[i + 1];
				_pointArray.push({ x : x, y : y});
			}
		}
		return _pointArray;
	}
	,getPoint: function(id) {
		if(id * 2 > this.get_arr().length) {
			console.log("src/sketcher/draw/Polygon.hx:135:","not in this length");
		}
		var p = { x : this.get_arr()[id * 2], y : this.get_arr()[id * 2 + 1]};
		return p;
	}
	,sides: function(x,y,sides,size,rotateDegree) {
		this.set_arr([]);
		this.set_rx(x);
		this.set_ry(y);
		if(rotateDegree == null) {
			rotateDegree = 0;
		} else {
			rotateDegree = sketcher_util_MathUtil.radians(rotateDegree);
		}
		var _g = 0;
		var _g1 = sides;
		while(_g < _g1) {
			var i = _g++;
			var _x = x + size * Math.cos(rotateDegree + i * (2 * Math.PI) / sides);
			var _y = y + size * Math.sin(rotateDegree + i * (2 * Math.PI) / sides);
			this.get_arr().push(_x);
			this.get_arr().push(_y);
		}
	}
	,get_arr: function() {
		return this.arr;
	}
	,set_arr: function(value) {
		return this.arr = value;
	}
	,__class__: sketcher_draw_Polygon
});
var sketcher_draw_Rectangle = function(x,y,width,height,isCenter) {
	if(isCenter == null) {
		isCenter = true;
	}
	this.type = "rectangle";
	this.set_x(x);
	this.set_y(y);
	this.set_width(width);
	this.set_height(height);
	this.cx = this.get_x() - this.get_width() / 2;
	this.cy = this.get_y() - this.get_height() / 2;
	this.isCenter = isCenter;
	if(!isCenter) {
		this.cx = this.get_x();
		this.cy = this.get_y();
	}
	this.point_top_left = { x : this.cx, y : this.cy};
	this.point_top_right = { x : this.cx + this.get_width(), y : this.cy};
	this.point_bottom_left = { x : this.cx, y : this.cy + this.get_height()};
	this.point_bottom_right = { x : this.cx + this.get_width(), y : this.cy + this.get_height()};
	sketcher_draw_Base.call(this,"rect");
};
$hxClasses["sketcher.draw.Rectangle"] = sketcher_draw_Rectangle;
sketcher_draw_Rectangle.__name__ = "sketcher.draw.Rectangle";
sketcher_draw_Rectangle.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Rectangle.__super__ = sketcher_draw_Base;
sketcher_draw_Rectangle.prototype = $extend(sketcher_draw_Base.prototype,{
	svg: function(settings) {
		this.xml.set("x",Std.string(this.cx));
		this.xml.set("y",Std.string(this.cy));
		this.xml.set("width",Std.string(this.get_width()));
		this.xml.set("height",Std.string(this.get_height()));
		if(this.get_radius() != null) {
			this.xml.set("rx",Std.string(this.get_radius()));
			this.xml.set("ry",Std.string(this.get_radius()));
		}
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,useCanvasShadow: function(ctx) {
		if(this.get_shadowColor() != null) {
			ctx.shadowColor = this.get_shadowColor();
			ctx.shadowBlur = this.get_shadowBlur();
			ctx.shadowOffsetX = this.get_shadowOffsetX();
			ctx.shadowOffsetY = this.get_shadowOffsetY();
		}
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		if(this.get_lineCap() != null) {
			ctx.lineCap = this.get_lineCap();
		}
		ctx.lineWidth = this.get_lineWeight();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr1 = value.split(",");
			_r = arr1[0];
			_g = arr1[1];
			_b = arr1[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.fillStyle = sketcher_util_ColorUtil.getColourObj(_fillColor,this.get_fillOpacity());
		var value1 = this.get_strokeColor();
		var _r1 = 0;
		var _g1 = 0;
		var _b1 = 0;
		var _a1 = 1;
		value1 = StringTools.replace(value1," ","");
		if(value1.indexOf("rgba") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgba(",""),")","");
			var arr2 = value1.split(",");
			_r1 = arr2[0];
			_g1 = arr2[1];
			_b1 = arr2[2];
			_a1 = arr2[3];
		} else if(value1.indexOf("rgb") != -1) {
			value1 = StringTools.replace(StringTools.replace(value1,"rgb(",""),")","");
			var arr11 = value1.split(",");
			_r1 = arr11[0];
			_g1 = arr11[1];
			_b1 = arr11[2];
		} else if(value1.indexOf("#") != -1) {
			var int1 = Std.parseInt(StringTools.replace(value1,"#","0x"));
			var rgb_r1 = int1 >> 16 & 255;
			var rgb_g1 = int1 >> 8 & 255;
			var rgb_b1 = int1 & 255;
			_r1 = rgb_r1;
			_g1 = rgb_g1;
			_b1 = rgb_b1;
		}
		var _strokeColor = { r : _r1, g : _g1, b : _b1, a : _a1};
		ctx.strokeStyle = sketcher_util_ColorUtil.getColourObj(_strokeColor,this.get_strokeOpacity());
		if(this.get_dash() != null) {
			ctx.setLineDash(this.get_dash());
		}
		ctx.beginPath();
		if(this.get_rotate() != null && this.get_move() == null) {
			ctx.save();
			ctx.translate(this.get_x(),this.get_y());
			ctx.rotate(sketcher_util_MathUtil.radians(this.get_rotate()));
			ctx.arc(0,0,10,0,2 * Math.PI);
			ctx.rect(-(this.get_width() / 2),-(this.get_height() / 2),this.get_width(),this.get_height());
			ctx.restore();
		}
		if(this.get_move() != null && this.get_rotate() == null) {
			ctx.save();
			ctx.translate(this.cx,this.cy);
			ctx.translate(this.get_move().x,this.get_move().y);
			ctx.rect(0,0,this.get_width(),this.get_height());
			ctx.restore();
		}
		if(this.get_rotate() == null && this.get_move() == null) {
			this.buildCanvasShape(ctx);
		}
		if(this.get_fill() != null) {
			ctx.fill();
		}
		if(this.get_stroke() != null && this.get_lineWeight() != 0) {
			ctx.stroke();
		}
	}
	,buildCanvasShape: function(ctx) {
		if(this.get_radius() == null) {
			ctx.rect(this.cx,this.cy,this.get_width(),this.get_height());
		} else {
			var radius_tl = this.get_radius();
			var radius_tr = this.get_radius();
			var radius_br = this.get_radius();
			var radius_bl = this.get_radius();
			ctx.moveTo(this.cx + radius_tl,this.cy);
			ctx.lineTo(this.cx + this.get_width() - radius_tr,this.cy);
			ctx.quadraticCurveTo(this.cx + this.get_width(),this.cy,this.cx + this.get_width(),this.cy + radius_tr);
			ctx.lineTo(this.cx + this.get_width(),this.cy + this.get_height() - radius_br);
			ctx.quadraticCurveTo(this.cx + this.get_width(),this.cy + this.get_height(),this.cx + this.get_width() - radius_br,this.cy + this.get_height());
			ctx.lineTo(this.cx + radius_bl,this.cy + this.get_height());
			ctx.quadraticCurveTo(this.cx,this.cy + this.get_height(),this.cx,this.cy + this.get_height() - radius_bl);
			ctx.lineTo(this.cx,this.cy + radius_tl);
			ctx.quadraticCurveTo(this.cx,this.cy,this.cx + radius_tl,this.cy);
			ctx.closePath();
		}
	}
	,gl: function(gl) {
		if(!sketcher_draw_Rectangle.ISWARN) {
			window.console.warn("webgl is not implemented yet");
			sketcher_draw_Rectangle.ISWARN = true;
		}
		var c = "#ff3333";
		var value = c;
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr1 = value.split(",");
			_r = arr1[0];
			_g = arr1[1];
			_b = arr1[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var rgba_r = _r;
		var rgba_g = _g;
		var rgba_b = _b;
		var rgba_a = _a;
		gl.viewport(0,0,gl.drawingBufferWidth,gl.drawingBufferHeight);
		gl.clearColor(rgba_r / 255,rgba_g / 255,rgba_b / 255,rgba_a);
		gl.clear(16384);
	}
	,get_radius: function() {
		return this.radius;
	}
	,set_radius: function(value) {
		return this.radius = value;
	}
	,get_width: function() {
		return this.width;
	}
	,set_width: function(value) {
		return this.width = value;
	}
	,get_height: function() {
		return this.height;
	}
	,set_height: function(value) {
		return this.height = value;
	}
	,__class__: sketcher_draw_Rectangle
});
var sketcher_draw_Text = function(str,x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.width = -1;
	this.lineHeight = 0;
	this.fitWidth = 0;
	this.type = "Text";
	this.set_str(str);
	this.set_x(x);
	this.set_y(y);
	sketcher_draw_Base.call(this,"text");
};
$hxClasses["sketcher.draw.Text"] = sketcher_draw_Text;
sketcher_draw_Text.__name__ = "sketcher.draw.Text";
sketcher_draw_Text.__interfaces__ = [sketcher_draw_IBase];
sketcher_draw_Text.__super__ = sketcher_draw_Base;
sketcher_draw_Text.prototype = $extend(sketcher_draw_Base.prototype,{
	align: function(value) {
		this.set_textAlign(value);
	}
	,baseline: function(value) {
		this.set_textBaseline(value);
	}
	,getWidth: function() {
		if(!sketcher_draw_Text.ISWARN) {
			window.console.warn("Get Width of text doens't work for svg currenlty");
			sketcher_draw_Text.ISWARN = true;
		}
		var ctx = Sketcher.ctx;
		var _css = "";
		var _font = StringTools.ltrim("" + _css + " " + this.get_fontSizePx() + "px " + this.get_fontFamily());
		ctx.font = _font;
		return ctx.measureText(this.get_str()).width;
	}
	,svg: function(settings) {
		var comment = Xml.createComment("" + this.get_str());
		var content = Xml.parse(this.get_str());
		this.xml.addChild(comment);
		this.xml.addChild(content);
		this.xml.set("x",Std.string(this.get_x()));
		this.xml.set("y",Std.string(this.get_y()));
		if(this.get_textAlign() != null) {
			this.xml.set("text-anchor",this.convertTextAlign("svg"));
		}
		if(this.get_textBaseline() != null) {
			this.xml.set("dominant-baseline",this.convertTextBaseline("svg"));
		}
		if(this.get_style() != null) {
			var className = StringTools.replace(StringTools.replace(this.get_str()," ",""),"\n","").toLowerCase();
			this.xml.set("class","fontstyle_" + className);
			var style = window.document.createElement("style");
			style.innerHTML = ".fontstyle_" + className + " {" + this.get_style() + "}";
			window.document.body.appendChild(style);
		}
		if(this.getTransform() != "") {
			this.xml.set("transform",this.getTransform());
		}
		return haxe_xml_Printer.print(this.xml);
	}
	,ctx: function(ctx) {
		this.useDefaultsCanvas();
		ctx.save();
		var value = this.get_fillColor();
		var _r = 0;
		var _g = 0;
		var _b = 0;
		var _a = 1;
		value = StringTools.replace(value," ","");
		if(value.indexOf("rgba") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
			var arr = value.split(",");
			_r = arr[0];
			_g = arr[1];
			_b = arr[2];
			_a = arr[3];
		} else if(value.indexOf("rgb") != -1) {
			value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
			var arr1 = value.split(",");
			_r = arr1[0];
			_g = arr1[1];
			_b = arr1[2];
		} else if(value.indexOf("#") != -1) {
			var int = Std.parseInt(StringTools.replace(value,"#","0x"));
			var rgb_r = int >> 16 & 255;
			var rgb_g = int >> 8 & 255;
			var rgb_b = int & 255;
			_r = rgb_r;
			_g = rgb_g;
			_b = rgb_b;
		}
		var _fillColor = { r : _r, g : _g, b : _b, a : _a};
		ctx.fillStyle = sketcher_util_ColorUtil.getColourObj(_fillColor,this.get_fillOpacity());
		if(this.get_fontFamily() == null) {
			this.set_fontFamily("Arial");
		}
		if(this.get_fontSize() == null) {
			this.set_fontSize("16px");
		}
		if(this.get_fontSizePx() != null) {
			this.set_fontSize("" + this.get_fontSizePx());
		}
		var _css = "";
		var _font = StringTools.ltrim("" + _css + " " + Std.parseInt(this.get_fontSize()) + "px " + this.get_fontFamily());
		ctx.font = _font;
		if(this.get_textAlign() != null) {
			ctx.textAlign = this.convertTextAlign("canvas");
		}
		if(this.get_textBaseline() != null) {
			ctx.textBaseline = this.convertTextBaseline("canvas");
		}
		var lines = [];
		var lineheight = this.get_lineHeight() != 0 ? this.get_lineHeight() : ctx.measureText("M").width * 1.7;
		if(this.get_fitWidth() != 0) {
			var words = this.get_str().split(" ");
			window.console.log("doesnt work yet");
			var count = 0;
			var sentance = "";
			while(ctx.measureText(sentance).width <= this.get_fitWidth()) {
				sentance += words[count] + " ";
				++count;
			}
			lines.push(sentance);
			console.log("src/sketcher/draw/Text.hx:228:",sentance);
		} else {
			lines = this.get_str().split("\n");
		}
		var _g1 = 0;
		var _g11 = lines.length;
		while(_g1 < _g11) {
			var i = _g1++;
			var line = lines[i];
			ctx.fillText(line,this.get_x(),this.get_y() + i * lineheight);
		}
		ctx.restore();
	}
	,gl: function(gl) {
	}
	,convertTextAlign: function(type) {
		var svg = "";
		var canvas = "";
		if(this.get_textAlign() == null) {
			this.set_textAlign(sketcher_draw_TextAlignType.Default);
		}
		switch(this.get_textAlign()._hx_index) {
		case 0:
			canvas = "center";
			svg = "middle";
			break;
		case 1:
			canvas = "left";
			svg = "start";
			break;
		case 2:
			canvas = "right";
			svg = "end";
			break;
		case 3:
			canvas = "start";
			svg = "start";
			break;
		}
		if(type == "svg") {
			return svg;
		} else {
			return canvas;
		}
	}
	,convertTextBaseline: function(type) {
		var str = "";
		var svg = "";
		var canvas = "";
		if(this.get_textBaseline() == null) {
			this.set_textBaseline(sketcher_draw_TextBaselineType.Default);
		}
		switch(this.get_textBaseline()._hx_index) {
		case 0:
			canvas = "hanging";
			svg = "hanging";
			break;
		case 1:
			canvas = "bottom";
			svg = "ideographic";
			break;
		case 2:
			canvas = "middle";
			svg = "middle";
			break;
		case 3:
			canvas = "alphabetic";
			svg = "auto";
			break;
		}
		if(type == "svg") {
			return svg;
		} else {
			return canvas;
		}
	}
	,get_fontSize: function() {
		return this.fontSize;
	}
	,set_fontSize: function(value) {
		this.xml.set("font-size",value);
		return this.fontSize = value;
	}
	,get_fontSizePx: function() {
		return this.fontSizePx;
	}
	,set_fontSizePx: function(value) {
		this.xml.set("font-size","" + value + "px");
		return this.fontSizePx = value;
	}
	,get_fontFamily: function() {
		return this.fontFamily;
	}
	,set_fontFamily: function(value) {
		if(value.indexOf("+") != -1) {
			value = StringTools.replace(value,"+"," ");
		}
		if(value.indexOf(":") != -1) {
			value = value.split(":")[0];
		}
		this.xml.set("font-family",value);
		return this.fontFamily = value;
	}
	,get_fontWeight: function() {
		return this.fontWeight;
	}
	,set_fontWeight: function(value) {
		this.xml.set("font-weight",value);
		return this.fontWeight = value;
	}
	,get_textAlign: function() {
		return this.textAlign;
	}
	,set_textAlign: function(value) {
		return this.textAlign = value;
	}
	,get_textBaseline: function() {
		return this.textBaseline;
	}
	,set_textBaseline: function(value) {
		return this.textBaseline = value;
	}
	,get_str: function() {
		return this.str;
	}
	,set_str: function(value) {
		return this.str = value;
	}
	,get_fitWidth: function() {
		return this.fitWidth;
	}
	,set_fitWidth: function(value) {
		return this.fitWidth = value;
	}
	,get_lineHeight: function() {
		return this.lineHeight;
	}
	,set_lineHeight: function(value) {
		return this.lineHeight = value;
	}
	,get_style: function() {
		return this.style;
	}
	,set_style: function(value) {
		return this.style = value;
	}
	,get_width: function() {
		this.getWidth();
		return this.width;
	}
	,__class__: sketcher_draw_Text
});
var sketcher_draw_TextAlignType = $hxEnums["sketcher.draw.TextAlignType"] = { __ename__ : true, __constructs__ : ["Center","Left","Right","Default"]
	,Center: {_hx_index:0,__enum__:"sketcher.draw.TextAlignType",toString:$estr}
	,Left: {_hx_index:1,__enum__:"sketcher.draw.TextAlignType",toString:$estr}
	,Right: {_hx_index:2,__enum__:"sketcher.draw.TextAlignType",toString:$estr}
	,Default: {_hx_index:3,__enum__:"sketcher.draw.TextAlignType",toString:$estr}
};
var sketcher_draw_TextBaselineType = $hxEnums["sketcher.draw.TextBaselineType"] = { __ename__ : true, __constructs__ : ["Top","Bottom","Middle","Default"]
	,Top: {_hx_index:0,__enum__:"sketcher.draw.TextBaselineType",toString:$estr}
	,Bottom: {_hx_index:1,__enum__:"sketcher.draw.TextBaselineType",toString:$estr}
	,Middle: {_hx_index:2,__enum__:"sketcher.draw.TextBaselineType",toString:$estr}
	,Default: {_hx_index:3,__enum__:"sketcher.draw.TextBaselineType",toString:$estr}
};
var sketcher_util_ColorUtil = function() {
};
$hxClasses["sketcher.util.ColorUtil"] = sketcher_util_ColorUtil;
sketcher_util_ColorUtil.__name__ = "sketcher.util.ColorUtil";
sketcher_util_ColorUtil.getColour = function(r,g,b,a) {
	var c;
	if(g == null) {
		c = sketcher_util_ColorUtil.rgb(r,r,r);
	} else if(b == null && a == null) {
		c = sketcher_util_ColorUtil.rgba(r,r,r,g);
	} else if(a == null) {
		c = sketcher_util_ColorUtil.rgb(r,g,b);
	} else {
		c = sketcher_util_ColorUtil.rgba(r,g,b,a);
	}
	return c;
};
sketcher_util_ColorUtil.getColourObj = function(rgb,a) {
	return sketcher_util_ColorUtil.getColour(rgb.r,rgb.g,rgb.b,a);
};
sketcher_util_ColorUtil.rgb = function(r,g,b) {
	if(g == null) {
		g = r;
	}
	if(b == null) {
		b = r;
	}
	return "rgb(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(g),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(b),0,255) + ")";
};
sketcher_util_ColorUtil.rgba = function(r,g,b,a) {
	if(g == null) {
		return "rgb(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ")";
	} else if(b == null) {
		return "rgba(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(g,0,1) + ")";
	} else if(a == null) {
		return "rgba(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(g),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(b),0,255) + ", 1)";
	} else {
		return "rgba(" + sketcher_util_MathUtil.clamp(Math.round(r),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(g),0,255) + ", " + sketcher_util_MathUtil.clamp(Math.round(b),0,255) + ", " + sketcher_util_MathUtil.clamp(a,0,1) + ")";
	}
};
sketcher_util_ColorUtil.rgbToHex = function(r,g,b) {
	return StringTools.hex(r,2) + StringTools.hex(g,2) + StringTools.hex(b,2);
};
sketcher_util_ColorUtil.rgb2hex = function(r,g,b,a) {
	if(a == null) {
		a = 255;
	}
	return a << 24 | r << 16 | g << 8 | b;
};
sketcher_util_ColorUtil.randomColour = function() {
	var r = sketcher_util_MathUtil.randomInt(255);
	var g = sketcher_util_MathUtil.randomInt(255);
	var b = sketcher_util_MathUtil.randomInt(255);
	return sketcher_util_ColorUtil.rgb(r,g,b);
};
sketcher_util_ColorUtil.randomColourObject = function() {
	var r = sketcher_util_MathUtil.randomInt(255);
	var g = sketcher_util_MathUtil.randomInt(255);
	var b = sketcher_util_MathUtil.randomInt(255);
	return { r : r, g : g, b : b};
};
sketcher_util_ColorUtil.toRGB = function(int) {
	return { r : Math.round(int >> 16 & 255), g : Math.round(int >> 8 & 255), b : Math.round(int & 255)};
};
sketcher_util_ColorUtil.ttoRGB = function(int) {
	return { r : int >> 16 & 255, g : int >> 8 & 255, b : int & 255};
};
sketcher_util_ColorUtil.assumption = function(value) {
	var _r = 0;
	var _g = 0;
	var _b = 0;
	var _a = 1;
	value = StringTools.replace(value," ","");
	if(value.indexOf("rgba") != -1) {
		value = StringTools.replace(StringTools.replace(value,"rgba(",""),")","");
		var arr = value.split(",");
		_r = arr[0];
		_g = arr[1];
		_b = arr[2];
		_a = arr[3];
	} else if(value.indexOf("rgb") != -1) {
		value = StringTools.replace(StringTools.replace(value,"rgb(",""),")","");
		var arr1 = value.split(",");
		_r = arr1[0];
		_g = arr1[1];
		_b = arr1[2];
	} else if(value.indexOf("#") != -1) {
		var int = Std.parseInt(StringTools.replace(value,"#","0x"));
		var rgb_r = int >> 16 & 255;
		var rgb_g = int >> 8 & 255;
		var rgb_b = int & 255;
		_r = rgb_r;
		_g = rgb_g;
		_b = rgb_b;
	}
	return { r : _r, g : _g, b : _b, a : _a};
};
sketcher_util_ColorUtil.hex2RGB = function(hex) {
	var int = Std.parseInt(StringTools.replace(hex,"#","0x"));
	return { r : int >> 16 & 255, g : int >> 8 & 255, b : int & 255};
};
sketcher_util_ColorUtil.prototype = {
	__class__: sketcher_util_ColorUtil
};
var sketcher_util_EmbedUtil = function() {
};
$hxClasses["sketcher.util.EmbedUtil"] = sketcher_util_EmbedUtil;
sketcher_util_EmbedUtil.__name__ = "sketcher.util.EmbedUtil";
sketcher_util_EmbedUtil.check = function(id) {
	if(window.document.getElementById(id) != null) {
		return true;
	} else {
		return false;
	}
};
sketcher_util_EmbedUtil.stats = function() {
	var script = document.createElement('script');script.id='mrdoob-stats';script.onload = function() {var stats = new Stats();document.body.appendChild(stats.dom);requestAnimationFrame(function loop() {stats.update();requestAnimationFrame(loop)});};script.src = '//mrdoob.github.io/stats.js/build/stats.min.js';document.head.appendChild(script);
};
sketcher_util_EmbedUtil.removeStats = function() {
	var scriptEl = window.document.getElementById("mrdoob-stats");
	scriptEl.parentElement.removeChild(scriptEl);
	var divArr = window.document.getElementsByTagName("div");
	var _g = 0;
	var _g1 = divArr.length;
	while(_g < _g1) {
		var i = _g++;
		var div = divArr[i];
		var style = div.getAttribute("style");
		if(style == "position: fixed; top: 0px; left: 0px; cursor: pointer; opacity: 0.9; z-index: 10000;") {
			div.parentElement.removeChild(div);
		}
	}
};
sketcher_util_EmbedUtil.script = function(id,src,callback,callbackArray) {
	if(window.document.getElementById(id) != null) {
		return;
	}
	var el = window.document.createElement("script");
	el.id = id;
	el.src = src;
	el.crossOrigin = "anonymous";
	el.onload = function() {
		if(callback != null) {
			if(callbackArray == null) {
				callback.apply(callback,[id]);
			} else {
				callback.apply(callback,callbackArray);
			}
		}
	};
	window.document.body.appendChild(el);
};
sketcher_util_EmbedUtil.stylesheet = function(id,src,callback,callbackArray) {
	if(window.document.getElementById(id) != null) {
		return;
	}
	var el = window.document.createElement("link");
	el.id = id;
	el.rel = "stylesheet";
	el.href = src;
	el.onload = function() {
		if(callback != null) {
			if(callbackArray == null) {
				callback.apply(callback,["id"]);
			} else {
				callback.apply(callback,callbackArray);
			}
		}
	};
	window.document.head.appendChild(el);
};
sketcher_util_EmbedUtil.bootstrapStylesheet = function(id,src,integrity,callback,callbackArray) {
	if(window.document.getElementById(id) != null) {
		return;
	}
	var el = window.document.createElement("link");
	el.id = id;
	el.rel = "stylesheet";
	el.href = src;
	el.integrity = integrity;
	el.crossOrigin = "anonymous";
	el.onload = function() {
		if(callback != null) {
			if(callbackArray == null) {
				callback.apply(callback,[id]);
			} else {
				callback.apply(callback,callbackArray);
			}
		}
	};
	window.document.head.appendChild(el);
};
sketcher_util_EmbedUtil.bootstrapScript = function(id,src,integrity,callback,callbackArray) {
	if(window.document.getElementById(id) != null) {
		return;
	}
	var el = window.document.createElement("script");
	el.id = id;
	el.src = src;
	el.integrity = integrity;
	el.crossOrigin = "anonymous";
	el.onload = function() {
		if(callback != null) {
			if(callbackArray == null) {
				callback.apply(callback,[id]);
			} else {
				callback.apply(callback,callbackArray);
			}
		}
	};
	window.document.body.appendChild(el);
};
sketcher_util_EmbedUtil.quicksettings = function(callback,callbackArray) {
	sketcher_util_EmbedUtil.script("quicksettings","https://cdn.jsdelivr.net/quicksettings/3.0.2/quicksettings.min.js",callback,callbackArray);
};
sketcher_util_EmbedUtil.gsap = function(callback,callbackArray) {
	sketcher_util_EmbedUtil.script("gsap","https://cdnjs.cloudflare.com/ajax/libs/gsap/3.2.0/gsap.min.js",callback,callbackArray);
};
sketcher_util_EmbedUtil.ccnav = function(callback,callbackArray) {
	sketcher_util_EmbedUtil.script("ccnav","https://matthijskamstra.github.io/drop-in-off-canvas-menu/cc_nav.min.js",callback,callbackArray);
};
sketcher_util_EmbedUtil.datgui = function(callback,callbackArray) {
	sketcher_util_EmbedUtil.script("datgui","https://cdnjs.cloudflare.com/ajax/libs/dat-gui/0.7.6/dat.gui.min.js",callback,callbackArray);
	var style = window.document.createElement("style");
	style.innerHTML = ".dg .c input[type=\"text\"]{\n\t\t\tline-height : normal;\n\t\t}";
	window.document.head.appendChild(style);
};
sketcher_util_EmbedUtil.sanitize = function(callback,callbackArray) {
	sketcher_util_EmbedUtil.stylesheet("sanitize","https://cdnjs.cloudflare.com/ajax/libs/10up-sanitize.css/8.0.0/sanitize.css",callback,callbackArray);
};
sketcher_util_EmbedUtil.ficons = function(callback,callbackArray) {
	sketcher_util_EmbedUtil.stylesheet("ficons","https://cdn.jsdelivr.net/npm/ficons@1.1.52/dist/ficons/font.css",callback,callbackArray);
};
sketcher_util_EmbedUtil.bootstrap = function(callback,callbackArray) {
	sketcher_util_EmbedUtil.bootstrapStylesheet("bootstrap-stylesheet","https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css","sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh");
	sketcher_util_EmbedUtil.bootstrapScript("bootstrap-jquery","https://code.jquery.com/jquery-3.4.1.slim.min.js","sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n");
	sketcher_util_EmbedUtil.bootstrapScript("bootstrap-popper","https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js","sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo");
	sketcher_util_EmbedUtil.bootstrapScript("bootstrap-bootstrap","https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js","sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6");
};
sketcher_util_EmbedUtil.bootstrapStyle = function(callback,callbackArray) {
	sketcher_util_EmbedUtil.bootstrapStylesheet("bootstrap-stylesheet","https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css","sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh",callback,callbackArray);
};
sketcher_util_EmbedUtil.zip = function(callback,callbackArray) {
	if(!sketcher_util_EmbedUtil.check("jszip")) {
		sketcher_util_EmbedUtil.script("jszip","https://cdnjs.cloudflare.com/ajax/libs/jszip/3.2.0/jszip.min.js",callback,["jszip"]);
	}
	if(!sketcher_util_EmbedUtil.check("jsfilesaver")) {
		sketcher_util_EmbedUtil.script("jsfilesaver","https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.8/FileSaver.min.js",callback,["jsfilesaver"]);
	}
};
sketcher_util_EmbedUtil.embedGoogleFont = function(family,callback,callbackArray) {
	var _family = sketcher_util_EmbedUtil.cleanFontFamily(family);
	var _id = "embededGoogleFonts";
	var _url = "https://fonts.googleapis.com/css?family=";
	var _display = "&display=swap";
	var link = window.document.getElementById(_id);
	if(link != null) {
		var temp = StringTools.replace(StringTools.replace(link.href,_url,""),_display,"");
		family = temp + "|" + family;
	} else {
		link = window.document.createElement("link");
	}
	if(callbackArray == null) {
		callbackArray = [family];
	}
	link.href = "" + _url + family + _display;
	link.rel = "stylesheet";
	link.id = _id;
	link.onload = function() {
		if(callback != null) {
			haxe_Timer.delay(function() {
				callback.apply(callback,callbackArray);
				return;
			},1);
		}
	};
	window.document.head.appendChild(link);
	return _family;
};
sketcher_util_EmbedUtil.cleanFontFamily = function(family) {
	if(family.indexOf(":") != -1) {
		family = family.split(":")[0];
	}
	return StringTools.replace(family,"+"," ");
};
sketcher_util_EmbedUtil.fontSansSerif = function(callback,callbackArray) {
	var fontFamily = "Roboto";
	return sketcher_util_EmbedUtil.embedGoogleFont(fontFamily,callback,callbackArray);
};
sketcher_util_EmbedUtil.fontMono = function(callback,callbackArray) {
	var fontFamily = "Source+Code+Pro";
	return sketcher_util_EmbedUtil.embedGoogleFont(fontFamily,callback,callbackArray);
};
sketcher_util_EmbedUtil.fontHandwritten = function(callback,callbackArray) {
	var fontFamily = "Pacifico";
	return sketcher_util_EmbedUtil.embedGoogleFont(fontFamily,callback,callbackArray);
};
sketcher_util_EmbedUtil.fontDisplay = function(callback,callbackArray) {
	var fontFamily = "Bebas+Neue";
	return sketcher_util_EmbedUtil.embedGoogleFont(fontFamily,callback,callbackArray);
};
sketcher_util_EmbedUtil.prototype = {
	__class__: sketcher_util_EmbedUtil
};
var sketcher_util_GridUtil = function(w,h) {
	this._isDebug = false;
	this._isPosition = false;
	this._isDimension = false;
	this._isNumbered = false;
	this._isCellSize = false;
	this.totalColumn = null;
	this.numVer = null;
	this.totalRow = null;
	this.numHor = null;
	this.cellHeight = null;
	this.cellWidth = null;
	this.isFullscreen = false;
	this.isCentered = false;
	this.gridY = 0;
	this.gridX = 0;
	this.height = null;
	this.width = null;
	this.y = null;
	this.x = null;
	this.total = null;
	this.array = [];
	this._w = w;
	this._h = h;
};
$hxClasses["sketcher.util.GridUtil"] = sketcher_util_GridUtil;
sketcher_util_GridUtil.__name__ = "sketcher.util.GridUtil";
sketcher_util_GridUtil.create = function(w,h) {
	var GridUtil = new sketcher_util_GridUtil(w,h);
	return GridUtil;
};
sketcher_util_GridUtil.createGrid = function(x,y,width,height,numHor,numVer) {
	if(numVer == null) {
		numVer = 1;
	}
	if(numHor == null) {
		numHor = 1;
	}
	var gridW = width / (numHor - 1);
	var gridH = height / (numVer - 1);
	var total = numHor * numVer;
	var xpos = 0;
	var ypos = 0;
	var arr = [];
	var _g = 0;
	var _g1 = total;
	while(_g < _g1) {
		var i = _g++;
		var point = { x : x + xpos * gridW, y : y + ypos * gridH};
		arr.push(point);
		++xpos;
		if(xpos >= numHor) {
			xpos = 0;
			++ypos;
		}
	}
	return arr;
};
sketcher_util_GridUtil.prototype = {
	xpos: function(x) {
		this._x = x;
		return this;
	}
	,ypos: function(y) {
		this._y = y;
		return this;
	}
	,pos: function(x,y) {
		this._x = x;
		this._y = y;
		return this;
	}
	,dimension: function(w,h) {
		this._w = w;
		this._h = h;
		return this;
	}
	,grid: function(hor,ver) {
		this._hor = hor;
		this._ver = ver;
		return this;
	}
	,size: function(w,h) {
		this._cellw = w;
		this._cellh = h;
		return this;
	}
	,centered: function() {
		this._center = true;
		return this;
	}
	,debug: function() {
		this._debug = true;
		return this;
	}
	,fullscreen: function() {
		this._fullscreen = true;
		return this;
	}
	,color: function(value) {
		this._color = value;
		return this;
	}
	,calc: function() {
		console.log("src/sketcher/util/GridUtil.hx:262:","WIP");
		return this;
	}
	,setPosition: function(x,y) {
		if(this._isDebug) {
			window.console.log("" + this.toString() + " setPostion");
		}
		this.x = x;
		this.y = y;
		this._isPosition = true;
		this.calculate();
	}
	,setIsCenterPoint: function(isCentered) {
		if(isCentered == null) {
			isCentered = true;
		}
		if(this._isDebug) {
			window.console.log("" + this.toString() + " setCenterPoint");
		}
		this.isCentered = isCentered;
		this.calculate();
	}
	,setDebug: function(isDebug) {
		if(isDebug == null) {
			isDebug = true;
		}
		this._isDebug = isDebug;
		if(this._isDebug) {
			window.console.log("" + this.toString() + " setDebug");
		}
	}
	,setIsFullscreen: function(isFullscreen) {
		if(isFullscreen == null) {
			isFullscreen = true;
		}
		if(this._isDebug) {
			window.console.log("" + this.toString() + " setIsFullscreen");
		}
		this.isFullscreen = isFullscreen;
		this.calculate();
	}
	,setDimension: function(width,height) {
		if(this._isDebug) {
			window.console.log("" + this.toString() + " setDimension (width: " + width + ", height: " + height + ")");
		}
		this.width = width;
		this.height = height;
		this._isDimension = true;
		this.calculate();
	}
	,setNumbered: function(numHor,numVer) {
		if(this._isDebug) {
			window.console.log("" + this.toString() + " setNumbers (numHor: " + numHor + ", numVer: " + numVer + ")");
		}
		this.numHor = numHor;
		this.numVer = numVer;
		this._isNumbered = true;
		this.calculate();
	}
	,setCellSize: function(cellWidth,cellHeight) {
		if(cellHeight == null) {
			cellHeight = cellWidth;
		}
		if(this._isDebug) {
			window.console.log("" + this.toString() + " setCellSize (cellWidth: " + cellWidth + ", cellHeight: " + cellHeight + ")");
		}
		this.cellWidth = cellWidth;
		this.cellHeight = cellHeight;
		this._isCellSize = true;
		this.calculate();
	}
	,row: function(sh) {
		return this.getTablePosition(sh).row;
	}
	,column: function(sh) {
		return this.getTablePosition(sh).column;
	}
	,getTablePosition: function(sh) {
		var index = this.array.indexOf(sh);
		var _row = Math.floor(index / this.numHor);
		var _column = index - _row * this.numHor;
		return { "row" : _row, "column" : _column};
	}
	,getIndex: function(point) {
		var index = this.array.indexOf(point);
		if(index == -1) {
			window.console.warn("Looks like this point (" + point.x + ", " + point.y + ") is not in array");
		}
		return index;
	}
	,getTablePoint: function(row,column) {
		if(row >= this.totalRow) {
			window.console.warn("looks like the row is outside the grid (" + row + " >= " + this.totalRow + ")");
			return null;
		}
		if(column >= this.totalColumn) {
			window.console.warn("looks like the column is outside the grid (" + column + " >= " + this.totalColumn + ")");
			return null;
		}
		if(row < 0) {
			window.console.warn("looks like the row is outside the grid (" + row + " < 0)");
			return null;
		}
		if(column < 0) {
			window.console.warn("looks like the column is outside the grid (" + column + " < 0)");
			return null;
		}
		return this.array[Math.round(row * this.numHor + column)];
	}
	,reset: function() {
		this.array = [];
	}
	,calculate: function() {
		if(this._isDebug) {
			window.console.log("" + this.toString() + " calculate()");
		}
		if(this._isCellSize && !this._isDimension) {
			if(this._isDebug) {
				window.console.info("" + this.toString() + " solution #1: cellSize is set");
			}
			this.numHor = Math.floor(this._w / this.cellWidth);
			this.numVer = Math.floor(this._h / this.cellHeight);
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
			this.x = (this._w - this.width) / 2;
			this.y = (this._h - this.height) / 2;
		}
		if(this._isNumbered && !this._isDimension) {
			if(this._isDebug) {
				window.console.info("" + this.toString() + " solution #2: numbered cells set");
			}
			var __w = this.width != null ? this.width : this._w;
			var __h = this.height != null ? this.height : this._h;
			this.cellWidth = __w / this.numHor;
			this.cellHeight = __h / this.numVer;
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
			this.x = (this._w - this.width) / 2;
			this.y = (this._h - this.height) / 2;
			window.console.groupCollapsed("GridUtil values (#2):");
			window.console.info("cellWidth: " + this.cellWidth + ", \ncellHeight: " + this.cellHeight + ", \nwidth: " + this.width + ", \nheight: " + this.height + ", \nx: " + this.x + ", \ny: " + this.y);
			window.console.groupEnd();
		}
		if(this._isDimension && !this._isNumbered && !this._isCellSize) {
			if(this._isDebug) {
				window.console.info("" + this.toString() + " solution #3: width/height set (" + this.width + ", " + this.height + ")");
			}
			var _cellWidth = this.cellWidth != null ? this.cellWidth : 50;
			var _cellHeight = this.cellHeight != null ? this.cellHeight : 50;
			this.numHor = Math.floor(this.width / _cellWidth);
			this.numVer = Math.floor(this.height / _cellHeight);
			this.width = this.numHor * _cellWidth;
			this.height = this.numVer * _cellHeight;
			this.cellWidth = this.width / this.numHor;
			this.cellHeight = this.height / this.numVer;
			this.x = (this._w - this.width) / 2;
			this.y = (this._h - this.height) / 2;
		}
		if(this._isDimension && !this._isCellSize) {
			if(this._isDebug) {
				window.console.info("" + this.toString() + " solution #3a: width/height set (" + this.width + ", " + this.height + ") AND number row/cols (" + this.numHor + ", " + this.numVer + ")");
			}
			this.cellWidth = Math.floor(this.width / this.numHor);
			this.cellHeight = Math.floor(this.height / this.numVer);
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
			if(!this._isPosition) {
				this.x = (this._w - this.width) / 2;
				this.y = (this._h - this.height) / 2;
			}
		}
		if(this._isDimension && this._isNumbered && !this._isCellSize) {
			if(this._isDebug) {
				window.console.info("" + this.toString() + " solution #3b: w/h set (" + this.width + ", " + this.height + ") AND number row/cols (" + this.numHor + ", " + this.numVer + ")");
				window.console.info("" + this.toString() + "  (" + this._w + ", " + this._h + ")");
			}
			this.cellWidth = Math.floor(this.width / this.numHor);
			this.cellHeight = Math.floor(this.height / this.numVer);
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
		}
		if(this._isCellSize && this._isDimension) {
			if(this._isDebug) {
				window.console.info("" + this.toString() + " solution #4: cellSize is set and width/height");
			}
			this.numHor = Math.floor(this.width / this.cellWidth);
			this.numVer = Math.floor(this.height / this.cellHeight);
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
			if(!this._isPosition) {
				this.x = (this._w - this.width) / 2;
				this.y = (this._h - this.height) / 2;
			}
		}
		if(this.isFullscreen && this._isCellSize) {
			if(this._isDebug) {
				window.console.info("" + this.toString() + " solution #5: fullscreen and cellSize is set");
			}
			this.width = this._w;
			this.height = this._h;
			this.numHor = Math.ceil(this.width / this.cellWidth);
			this.numVer = Math.ceil(this.height / this.cellHeight);
			this.width = this.numHor * this.cellWidth;
			this.height = this.numVer * this.cellHeight;
			this.x = (this._w - this.width) / 2;
			this.y = (this._h - this.height) / 2;
		}
		var cx = 0.0;
		var cy = 0.0;
		if(this.isCentered) {
			cx = this.cellWidth / 2;
			cy = this.cellHeight / 2;
		}
		this.array = [];
		var total = Math.round(this.numHor * this.numVer);
		var xpos = 0;
		var ypos = 0;
		var _g = 0;
		var _g1 = total;
		while(_g < _g1) {
			var i = _g++;
			var point = { x : Math.round(this.x + xpos * this.cellWidth + cx), y : Math.round(this.y + ypos * this.cellHeight + cy)};
			this.array.push(point);
			++xpos;
			if(xpos >= this.numHor) {
				xpos = 0;
				++ypos;
			}
		}
		total = this.array.length;
		if(this._isDebug) {
			window.console.groupCollapsed("" + this.toString() + " Sata");
			window.console.log("x: " + this.x + ", y: " + this.y + ", width: " + this.width + ", height: " + this.height + ", cellWidth: " + this.cellWidth + ", cellHeight: " + this.cellHeight + ", numHor: " + this.numHor + ", numVer: " + this.numVer + ", array: " + this.array.length);
			window.console.table(this.array);
			window.console.groupEnd();
		}
		this.totalRow = Math.round(this.numVer);
		this.totalColumn = Math.round(this.numHor);
	}
	,toString: function() {
		return "[GridUtil]";
	}
	,__class__: sketcher_util_GridUtil
};
var sketcher_util_MathUtil = function() { };
$hxClasses["sketcher.util.MathUtil"] = sketcher_util_MathUtil;
sketcher_util_MathUtil.__name__ = "sketcher.util.MathUtil";
sketcher_util_MathUtil.radians = function(deg) {
	return deg * Math.PI / 180;
};
sketcher_util_MathUtil.degrees = function(rad) {
	return rad * 180 / Math.PI;
};
sketcher_util_MathUtil.degreesToPoint = function(deg,diameter) {
	var rad = Math.PI * deg / 180;
	var r = diameter / 2;
	return { x : r * Math.cos(rad), y : r * Math.sin(rad)};
};
sketcher_util_MathUtil.distributeAngles = function(me,total) {
	return me / total * 360;
};
sketcher_util_MathUtil.distance = function(x1,y1,x2,y2) {
	return sketcher_util_MathUtil.dist(x1,y1,x2,y2);
};
sketcher_util_MathUtil.dist = function(x1,y1,x2,y2) {
	x2 -= x1;
	y2 -= y1;
	return Math.sqrt(x2 * x2 + y2 * y2);
};
sketcher_util_MathUtil.pythagoreanTheorem = function(a,b,c) {
	if(a == null && b == null && c == null) {
		console.log("src/sketcher/util/MathUtil.hx:106:","Really? Perhaps you should use some data");
		return 0;
	}
	var value = 0.0;
	if(c == null || c == 0) {
		value = Math.sqrt(a * a + b * b);
	}
	if(a == null || a == 0) {
		value = Math.sqrt(c * c - b * b);
	}
	if(b == null || b == 0) {
		value = Math.sqrt(c * c - a * a);
	}
	return value;
};
sketcher_util_MathUtil.circumferenceCircle = function(radius) {
	return Math.PI * radius * 2;
};
sketcher_util_MathUtil.circumference2RadiusCircle = function(circumference) {
	return circumference / (Math.PI * 2);
};
sketcher_util_MathUtil.areaCircle = function(radius) {
	return Math.PI * Math.sqrt(radius);
};
sketcher_util_MathUtil.randomInteger = function(min,max) {
	if(max == null) {
		max = min;
		min = 0;
	}
	return Math.floor(Math.random() * (max + 1 - min)) + min;
};
sketcher_util_MathUtil.randomInt = function(min,max) {
	return sketcher_util_MathUtil.randomInteger(min,max);
};
sketcher_util_MathUtil.random = function(min,max) {
	if(min == null) {
		min = 0;
		max = 1;
	} else if(max == null) {
		max = min;
		min = 0;
	}
	return Math.random() * (max - min) + min;
};
sketcher_util_MathUtil.randomP = function(min,max) {
	if(min == null) {
		min = 0.1;
		max = 1;
	} else if(max == null) {
		max = min;
		min = 0.1;
	}
	return Math.random() * (max - min) + min;
};
sketcher_util_MathUtil.chance = function(value) {
	if(value > 1) {
		value /= 100;
	}
	return Math.random() < value;
};
sketcher_util_MathUtil.chanceTrue = function(value) {
	if(value > 1) {
		value /= 100;
	}
	return Math.random() < value;
};
sketcher_util_MathUtil.chanceFalse = function(value) {
	if(value > 1) {
		value /= 100;
	}
	return Math.random() > value;
};
sketcher_util_MathUtil.posNeg = function() {
	return sketcher_util_MathUtil.randomInt(0,1) * 2 - 1;
};
sketcher_util_MathUtil.flip = function() {
	return Math.random() < 0.5;
};
sketcher_util_MathUtil.angle = function(cx,cy,ex,ey) {
	var dy = ey - cy;
	var dx = ex - cx;
	var theta = Math.atan2(dy,dx);
	theta *= 180 / Math.PI;
	if(theta < 0) {
		theta = 360 + theta;
	}
	if(theta == 360) {
		theta = 0;
	}
	return theta;
};
sketcher_util_MathUtil.map = function(value,min1,max1,min2,max2,clampResult) {
	var returnvalue = (value - min1) / (max1 - min1) * (max2 - min2) + min2;
	if(clampResult) {
		return sketcher_util_MathUtil.clamp(returnvalue,min2,max2);
	} else {
		return returnvalue;
	}
};
sketcher_util_MathUtil.orbit = function(xpos,ypos,angle,radius) {
	var _xpos = xpos + Math.cos(sketcher_util_MathUtil.radians(angle)) * radius;
	var _ypos = ypos + Math.sin(sketcher_util_MathUtil.radians(angle)) * radius;
	return { x : _xpos, y : _ypos};
};
sketcher_util_MathUtil.orbitX = function(origin,angle,radius) {
	return origin + Math.cos(sketcher_util_MathUtil.radians(angle)) * radius;
};
sketcher_util_MathUtil.orbitY = function(origin,angle,radius) {
	return origin + Math.sin(sketcher_util_MathUtil.radians(angle)) * radius;
};
sketcher_util_MathUtil.orbitZ = function(origin,angle,radius) {
	return origin + Math.cos(sketcher_util_MathUtil.radians(angle)) * radius;
};
sketcher_util_MathUtil.shuffle = function(array) {
	var currentIndex = array.length;
	var temporaryValue;
	var randomIndex;
	while(0 != currentIndex) {
		randomIndex = Math.floor(Math.random() * currentIndex);
		--currentIndex;
		temporaryValue = array[currentIndex];
		array[currentIndex] = array[randomIndex];
		array[randomIndex] = temporaryValue;
	}
	return array;
};
sketcher_util_MathUtil.clamp = function(value,min,max) {
	return Math.min(Math.max(value,Math.min(min,max)),Math.max(min,max));
};
sketcher_util_MathUtil.formatByteSizeString = function(bytes) {
	if(bytes < 1024) {
		return bytes + " bytes";
	} else if(bytes < 1048576) {
		return sketcher_util_MathUtil.toFixed(bytes / 1024,3) + " KiB";
	} else if(bytes < 1073741824) {
		return sketcher_util_MathUtil.toFixed(bytes / 1048576,3) + " MiB";
	} else {
		return sketcher_util_MathUtil.toFixed(bytes / 1073741824,3) + " GiB";
	}
};
sketcher_util_MathUtil.formatByteSize = function(bytes) {
	if(bytes < 1024) {
		return bytes;
	} else if(bytes < 1048576) {
		return sketcher_util_MathUtil.toFixed(bytes / 1024,3);
	} else if(bytes < 1073741824) {
		return sketcher_util_MathUtil.toFixed(bytes / 1048576,3);
	} else {
		return sketcher_util_MathUtil.toFixed(bytes / 1073741824,3);
	}
};
sketcher_util_MathUtil.toFixed = function(number,precision) {
	if(precision == null) {
		precision = 2;
	}
	number *= Math.pow(10,precision);
	return Math.round(number) / Math.pow(10,precision);
};
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
$hxClasses["Math"] = Math;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.prototype.__class__ = $hxClasses["String"] = String;
String.__name__ = "String";
$hxClasses["Array"] = Array;
Array.__name__ = "Array";
Date.prototype.__class__ = $hxClasses["Date"] = Date;
Date.__name__ = "Date";
var Int = { };
var Dynamic = { };
var Float = Number;
var Bool = Boolean;
var Class = { };
var Enum = { };
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
Globals.MOUSE_DOWN = "mousedown";
Globals.MOUSE_UP = "mouseup";
Globals.MOUSE_MOVE = "mousemove";
Globals.KEY_DOWN = "keydown";
Globals.KEY_UP = "keyup";
Globals.RESIZE = "resize";
Globals.isMouseDown = false;
Globals.mousePressed = 0;
Globals.mouseReleased = 0;
Globals.isFullscreen = false;
Globals.TWO_PI = Math.PI * 2;
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved["lt"] != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved["gt"] != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved["amp"] != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved["quot"] != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved["apos"] != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
helper_html_Container._count = 0;
sketcher_App.NAME = "[cc-sketcher]";
sketcher_draw_Base.COUNT = 0;
sketcher_util_ColorUtil.NAVY = { r : Math.round(0), g : Math.round(31), b : Math.round(63)};
sketcher_util_ColorUtil.BLUE = { r : Math.round(0), g : Math.round(116), b : Math.round(217)};
sketcher_util_ColorUtil.AQUA = { r : Math.round(127), g : Math.round(219), b : Math.round(255)};
sketcher_util_ColorUtil.TEAL = { r : Math.round(57), g : Math.round(204), b : Math.round(204)};
sketcher_util_ColorUtil.OLIVE = { r : Math.round(61), g : Math.round(153), b : Math.round(112)};
sketcher_util_ColorUtil.GREEN = { r : Math.round(46), g : Math.round(204), b : Math.round(64)};
sketcher_util_ColorUtil.LIME = { r : Math.round(1), g : Math.round(255), b : Math.round(112)};
sketcher_util_ColorUtil.YELLOW = { r : Math.round(255), g : Math.round(220), b : Math.round(0)};
sketcher_util_ColorUtil.ORANGE = { r : Math.round(255), g : Math.round(133), b : Math.round(27)};
sketcher_util_ColorUtil.RED = { r : Math.round(255), g : Math.round(65), b : Math.round(54)};
sketcher_util_ColorUtil.MAROON = { r : Math.round(133), g : Math.round(20), b : Math.round(75)};
sketcher_util_ColorUtil.FUCHSIA = { r : Math.round(240), g : Math.round(18), b : Math.round(190)};
sketcher_util_ColorUtil.PURPLE = { r : Math.round(177), g : Math.round(13), b : Math.round(201)};
sketcher_util_ColorUtil.BLACK = { r : Math.round(17), g : Math.round(17), b : Math.round(17)};
sketcher_util_ColorUtil.GRAY = { r : Math.round(170), g : Math.round(170), b : Math.round(170)};
sketcher_util_ColorUtil.SILVER = { r : Math.round(221), g : Math.round(221), b : Math.round(221)};
sketcher_util_ColorUtil.WHITE = { r : Math.round(255), g : Math.round(255), b : Math.round(255)};
sketcher_util_ColorUtil.PINK = { r : Math.round(255), g : Math.round(20), b : Math.round(147)};
sketcher_util_ColorUtil.PINK_DEEP = { r : Math.round(255), g : Math.round(20), b : Math.round(147)};
sketcher_util_ColorUtil.PINK_HOT = { r : Math.round(255), g : Math.round(105), b : Math.round(180)};
sketcher_util_ColorUtil.niceColor100 = [["#69d2e7","#a7dbd8","#e0e4cc","#f38630","#fa6900"],["#fe4365","#fc9d9a","#f9cdad","#c8c8a9","#83af9b"],["#ecd078","#d95b43","#c02942","#542437","#53777a"],["#556270","#4ecdc4","#c7f464","#ff6b6b","#c44d58"],["#774f38","#e08e79","#f1d4af","#ece5ce","#c5e0dc"],["#e8ddcb","#cdb380","#036564","#033649","#031634"],["#490a3d","#bd1550","#e97f02","#f8ca00","#8a9b0f"],["#594f4f","#547980","#45ada8","#9de0ad","#e5fcc2"],["#00a0b0","#6a4a3c","#cc333f","#eb6841","#edc951"],["#e94e77","#d68189","#c6a49a","#c6e5d9","#f4ead5"],["#3fb8af","#7fc7af","#dad8a7","#ff9e9d","#ff3d7f"],["#d9ceb2","#948c75","#d5ded9","#7a6a53","#99b2b7"],["#ffffff","#cbe86b","#f2e9e1","#1c140d","#cbe86b"],["#efffcd","#dce9be","#555152","#2e2633","#99173c"],["#343838","#005f6b","#008c9e","#00b4cc","#00dffc"],["#413e4a","#73626e","#b38184","#f0b49e","#f7e4be"],["#ff4e50","#fc913a","#f9d423","#ede574","#e1f5c4"],["#99b898","#fecea8","#ff847c","#e84a5f","#2a363b"],["#655643","#80bca3","#f6f7bd","#e6ac27","#bf4d28"],["#00a8c6","#40c0cb","#f9f2e7","#aee239","#8fbe00"],["#351330","#424254","#64908a","#e8caa4","#cc2a41"],["#554236","#f77825","#d3ce3d","#f1efa5","#60b99a"],["#ff9900","#424242","#e9e9e9","#bcbcbc","#3299bb"],["#5d4157","#838689","#a8caba","#cad7b2","#ebe3aa"],["#8c2318","#5e8c6a","#88a65e","#bfb35a","#f2c45a"],["#fad089","#ff9c5b","#f5634a","#ed303c","#3b8183"],["#ff4242","#f4fad2","#d4ee5e","#e1edb9","#f0f2eb"],["#d1e751","#ffffff","#000000","#4dbce9","#26ade4"],["#f8b195","#f67280","#c06c84","#6c5b7b","#355c7d"],["#1b676b","#519548","#88c425","#bef202","#eafde6"],["#bcbdac","#cfbe27","#f27435","#f02475","#3b2d38"],["#5e412f","#fcebb6","#78c0a8","#f07818","#f0a830"],["#452632","#91204d","#e4844a","#e8bf56","#e2f7ce"],["#eee6ab","#c5bc8e","#696758","#45484b","#36393b"],["#f0d8a8","#3d1c00","#86b8b1","#f2d694","#fa2a00"],["#f04155","#ff823a","#f2f26f","#fff7bd","#95cfb7"],["#2a044a","#0b2e59","#0d6759","#7ab317","#a0c55f"],["#bbbb88","#ccc68d","#eedd99","#eec290","#eeaa88"],["#b9d7d9","#668284","#2a2829","#493736","#7b3b3b"],["#b3cc57","#ecf081","#ffbe40","#ef746f","#ab3e5b"],["#a3a948","#edb92e","#f85931","#ce1836","#009989"],["#67917a","#170409","#b8af03","#ccbf82","#e33258"],["#e8d5b7","#0e2430","#fc3a51","#f5b349","#e8d5b9"],["#aab3ab","#c4cbb7","#ebefc9","#eee0b7","#e8caaf"],["#300030","#480048","#601848","#c04848","#f07241"],["#ab526b","#bca297","#c5ceae","#f0e2a4","#f4ebc3"],["#607848","#789048","#c0d860","#f0f0d8","#604848"],["#a8e6ce","#dcedc2","#ffd3b5","#ffaaa6","#ff8c94"],["#3e4147","#fffedf","#dfba69","#5a2e2e","#2a2c31"],["#b6d8c0","#c8d9bf","#dadabd","#ecdbbc","#fedcba"],["#fc354c","#29221f","#13747d","#0abfbc","#fcf7c5"],["#1c2130","#028f76","#b3e099","#ffeaad","#d14334"],["#edebe6","#d6e1c7","#94c7b6","#403b33","#d3643b"],["#cc0c39","#e6781e","#c8cf02","#f8fcc1","#1693a7"],["#dad6ca","#1bb0ce","#4f8699","#6a5e72","#563444"],["#a7c5bd","#e5ddcb","#eb7b59","#cf4647","#524656"],["#fdf1cc","#c6d6b8","#987f69","#e3ad40","#fcd036"],["#5c323e","#a82743","#e15e32","#c0d23e","#e5f04c"],["#230f2b","#f21d41","#ebebbc","#bce3c5","#82b3ae"],["#b9d3b0","#81bda4","#b28774","#f88f79","#f6aa93"],["#3a111c","#574951","#83988e","#bcdea5","#e6f9bc"],["#5e3929","#cd8c52","#b7d1a3","#dee8be","#fcf7d3"],["#1c0113","#6b0103","#a30006","#c21a01","#f03c02"],["#382f32","#ffeaf2","#fcd9e5","#fbc5d8","#f1396d"],["#e3dfba","#c8d6bf","#93ccc6","#6cbdb5","#1a1f1e"],["#000000","#9f111b","#b11623","#292c37","#cccccc"],["#c1b398","#605951","#fbeec2","#61a6ab","#accec0"],["#8dccad","#988864","#fea6a2","#f9d6ac","#ffe9af"],["#f6f6f6","#e8e8e8","#333333","#990100","#b90504"],["#1b325f","#9cc4e4","#e9f2f9","#3a89c9","#f26c4f"],["#5e9fa3","#dcd1b4","#fab87f","#f87e7b","#b05574"],["#951f2b","#f5f4d7","#e0dfb1","#a5a36c","#535233"],["#413d3d","#040004","#c8ff00","#fa023c","#4b000f"],["#eff3cd","#b2d5ba","#61ada0","#248f8d","#605063"],["#2d2d29","#215a6d","#3ca2a2","#92c7a3","#dfece6"],["#cfffdd","#b4dec1","#5c5863","#a85163","#ff1f4c"],["#4e395d","#827085","#8ebe94","#ccfc8e","#dc5b3e"],["#9dc9ac","#fffec7","#f56218","#ff9d2e","#919167"],["#a1dbb2","#fee5ad","#faca66","#f7a541","#f45d4c"],["#ffefd3","#fffee4","#d0ecea","#9fd6d2","#8b7a5e"],["#a8a7a7","#cc527a","#e8175d","#474747","#363636"],["#ffedbf","#f7803c","#f54828","#2e0d23","#f8e4c1"],["#f8edd1","#d88a8a","#474843","#9d9d93","#c5cfc6"],["#f38a8a","#55443d","#a0cab5","#cde9ca","#f1edd0"],["#4e4d4a","#353432","#94ba65","#2790b0","#2b4e72"],["#0ca5b0","#4e3f30","#fefeeb","#f8f4e4","#a5b3aa"],["#a70267","#f10c49","#fb6b41","#f6d86b","#339194"],["#9d7e79","#ccac95","#9a947c","#748b83","#5b756c"],["#edf6ee","#d1c089","#b3204d","#412e28","#151101"],["#046d8b","#309292","#2fb8ac","#93a42a","#ecbe13"],["#4d3b3b","#de6262","#ffb88c","#ffd0b3","#f5e0d3"],["#fffbb7","#a6f6af","#66b6ab","#5b7c8d","#4f2958"],["#ff003c","#ff8a00","#fabe28","#88c100","#00c176"],["#fcfef5","#e9ffe1","#cdcfb7","#d6e6c3","#fafbe3"],["#9cddc8","#bfd8ad","#ddd9ab","#f7af63","#633d2e"],["#30261c","#403831","#36544f","#1f5f61","#0b8185"],["#d1313d","#e5625c","#f9bf76","#8eb2c5","#615375"],["#ffe181","#eee9e5","#fad3b2","#ffba7f","#ff9c97"],["#aaff00","#ffaa00","#ff00aa","#aa00ff","#00aaff"],["#c2412d","#d1aa34","#a7a844","#a46583","#5a1e4a"]];
sketcher_util_ColorUtil.niceColor100SortedString = [["#E0E4CC","#A7DBD8","#69D2E7","#F38630","#FA6900"],["#F9CDAD","#C8C8A9","#FC9D9A","#83AF9B","#FE4365"],["#ECD078","#D95B43","#53777A","#C02942","#542437"],["#C7F464","#4ECDC4","#FF6B6B","#C44D58","#556270"],["#ECE5CE","#F1D4AF","#C5E0DC","#E08E79","#774F38"],["#E8DDCB","#CDB380","#036564","#033649","#031634"],["#F8CA00","#E97F02","#8A9B0F","#BD1550","#490A3D"],["#E5FCC2","#9DE0AD","#45ADA8","#547980","#594F4F"],["#EDC951","#EB6841","#00A0B0","#CC333F","#6A4A3C"],["#F4EAD5","#C6E5D9","#C6A49A","#D68189","#E94E77"],["#DAD8A7","#FF9E9D","#7FC7AF","#3FB8AF","#FF3D7F"],["#D5DED9","#D9CEB2","#99B2B7","#948C75","#7A6A53"],["#FFFFFF","#F2E9E1","#CBE86B","#CBE86B","#1C140D"],["#EFFFCD","#DCE9BE","#555152","#99173C","#2E2633"],["#00DFFC","#00B4CC","#008C9E","#005F6B","#343838"],["#F7E4BE","#F0B49E","#B38184","#73626E","#413E4A"],["#E1F5C4","#EDE574","#F9D423","#FC913A","#FF4E50"],["#FECEA8","#99B898","#FF847C","#E84A5F","#2A363B"],["#F6F7BD","#E6AC27","#80BCA3","#BF4D28","#655643"],["#F9F2E7","#AEE239","#40C0CB","#8FBE00","#00A8C6"],["#E8CAA4","#64908A","#CC2A41","#424254","#351330"],["#F1EFA5","#D3CE3D","#60B99A","#F77825","#554236"],["#E9E9E9","#BCBCBC","#FF9900","#3299BB","#424242"],["#EBE3AA","#CAD7B2","#A8CABA","#838689","#5D4157"],["#F2C45A","#BFB35A","#88A65E","#5E8C6A","#8C2318"],["#FAD089","#FF9C5B","#F5634A","#3B8183","#ED303C"],["#F4FAD2","#F0F2EB","#E1EDB9","#D4EE5E","#FF4242"],["#FFFFFF","#D1E751","#4DBCE9","#26ADE4","#000000"],["#F8B195","#F67280","#C06C84","#6C5B7B","#355C7D"],["#EAFDE6","#BEF202","#88C425","#519548","#1B676B"],["#BCBDAC","#CFBE27","#F27435","#F02475","#3B2D38"],["#FCEBB6","#F0A830","#78C0A8","#F07818","#5E412F"],["#E2F7CE","#E8BF56","#E4844A","#91204D","#452632"],["#EEE6AB","#C5BC8E","#696758","#45484B","#36393B"],["#F0D8A8","#F2D694","#86B8B1","#FA2A00","#3D1C00"],["#FFF7BD","#F2F26F","#95CFB7","#FF823A","#F04155"],["#A0C55F","#7AB317","#0D6759","#0B2E59","#2A044A"],["#EEDD99","#EEC290","#CCC68D","#EEAA88","#BBBB88"],["#B9D7D9","#668284","#7B3B3B","#493736","#2A2829"],["#ECF081","#FFBE40","#B3CC57","#EF746F","#AB3E5B"],["#EDB92E","#A3A948","#F85931","#009989","#CE1836"],["#CCBF82","#B8AF03","#67917A","#E33258","#170409"],["#E8D5B9","#E8D5B7","#F5B349","#FC3A51","#0E2430"],["#EBEFC9","#EEE0B7","#E8CAAF","#C4CBB7","#AAB3AB"],["#F07241","#C04848","#601848","#480048","#300030"],["#F4EBC3","#F0E2A4","#C5CEAE","#BCA297","#AB526B"],["#F0F0D8","#C0D860","#789048","#607848","#604848"],["#DCEDC2","#FFD3B5","#A8E6CE","#FFAAA6","#FF8C94"],["#FFFEDF","#DFBA69","#3E4147","#5A2E2E","#2A2C31"],["#FEDCBA","#ECDBBC","#DADABD","#C8D9BF","#B6D8C0"],["#FCF7C5","#0ABFBC","#FC354C","#13747D","#29221F"],["#FFEAAD","#B3E099","#D14334","#028F76","#1C2130"],["#EDEBE6","#D6E1C7","#94C7B6","#D3643B","#403B33"],["#F8FCC1","#C8CF02","#E6781E","#1693A7","#CC0C39"],["#DAD6CA","#1BB0CE","#4F8699","#6A5E72","#563444"],["#E5DDCB","#A7C5BD","#EB7B59","#CF4647","#524656"],["#FDF1CC","#C6D6B8","#FCD036","#E3AD40","#987F69"],["#E5F04C","#C0D23E","#E15E32","#A82743","#5C323E"],["#EBEBBC","#BCE3C5","#82B3AE","#F21D41","#230F2B"],["#B9D3B0","#F6AA93","#F88F79","#81BDA4","#B28774"],["#E6F9BC","#BCDEA5","#83988E","#574951","#3A111C"],["#FCF7D3","#DEE8BE","#B7D1A3","#CD8C52","#5E3929"],["#F03C02","#C21A01","#A30006","#6B0103","#1C0113"],["#FFEAF2","#FCD9E5","#FBC5D8","#F1396D","#382F32"],["#E3DFBA","#C8D6BF","#93CCC6","#6CBDB5","#1A1F1E"],["#CCCCCC","#B11623","#9F111B","#292C37","#000000"],["#FBEEC2","#ACCEC0","#C1B398","#61A6AB","#605951"],["#FFE9AF","#F9D6AC","#FEA6A2","#8DCCAD","#988864"],["#F6F6F6","#E8E8E8","#B90504","#333333","#990100"],["#E9F2F9","#9CC4E4","#F26C4F","#3A89C9","#1B325F"],["#DCD1B4","#FAB87F","#F87E7B","#5E9FA3","#B05574"],["#F5F4D7","#E0DFB1","#A5A36C","#535233","#951F2B"],["#C8FF00","#FA023C","#413D3D","#4B000F","#040004"],["#EFF3CD","#B2D5BA","#61ADA0","#248F8D","#605063"],["#DFECE6","#92C7A3","#3CA2A2","#215A6D","#2D2D29"],["#CFFFDD","#B4DEC1","#A85163","#FF1F4C","#5C5863"],["#CCFC8E","#8EBE94","#DC5B3E","#827085","#4E395D"],["#FFFEC7","#9DC9AC","#FF9D2E","#919167","#F56218"],["#FEE5AD","#FACA66","#A1DBB2","#F7A541","#F45D4C"],["#FFFEE4","#FFEFD3","#D0ECEA","#9FD6D2","#8B7A5E"],["#A8A7A7","#CC527A","#E8175D","#474747","#363636"],["#FFEDBF","#F8E4C1","#F7803C","#F54828","#2E0D23"],["#F8EDD1","#C5CFC6","#D88A8A","#9D9D93","#474843"],["#F1EDD0","#CDE9CA","#A0CAB5","#F38A8A","#55443D"],["#94BA65","#2790B0","#4E4D4A","#2B4E72","#353432"],["#FEFEEB","#F8F4E4","#A5B3AA","#0CA5B0","#4E3F30"],["#F6D86B","#FB6B41","#339194","#F10C49","#A70267"],["#CCAC95","#9A947C","#9D7E79","#748B83","#5B756C"],["#EDF6EE","#D1C089","#B3204D","#412E28","#151101"],["#ECBE13","#93A42A","#2FB8AC","#309292","#046D8B"],["#F5E0D3","#FFD0B3","#FFB88C","#DE6262","#4D3B3B"],["#FFFBB7","#A6F6AF","#66B6AB","#5B7C8D","#4F2958"],["#FABE28","#FF8A00","#88C100","#00C176","#FF003C"],["#FCFEF5","#FAFBE3","#E9FFE1","#D6E6C3","#CDCFB7"],["#DDD9AB","#BFD8AD","#9CDDC8","#F7AF63","#633D2E"],["#0B8185","#1F5F61","#36544F","#403831","#30261C"],["#F9BF76","#8EB2C5","#E5625C","#D1313D","#615375"],["#EEE9E5","#FFE181","#FAD3B2","#FFBA7F","#FF9C97"],["#AAFF00","#FFAA00","#00AAFF","#FF00AA","#AA00FF"],["#D1AA34","#A7A844","#A46583","#C2412D","#5A1E4A"],["#F8F3BF","#DCE4F7","#BFCFF7","#75616B","#D34017"]];
sketcher_util_ColorUtil.niceColor100SortedInt = [[14738636,11000792,6935271,15959600,16410880],[16371117,13158569,16555418,8630171,16663397],[15519864,14244675,5470074,12593474,5514295],[13104228,5164484,16739179,12864856,5595760],[15525326,15848623,12968156,14716537,7819064],[15261131,13480832,222564,210505,202292],[16304640,15302402,9083663,12391760,4786749],[15072450,10346669,4566440,5536128,5853007],[15583569,15427649,41136,13382463,6965820],[16050901,13034969,13018266,14057865,15289975],[14342311,16752285,8374191,4176047,16727423],[14016217,14274226,10072759,9735285,8022611],[16777215,15919585,13363307,13363307,1840141],[15728589,14477758,5591378,10032956,3024435],[57340,46284,35998,24427,3422264],[16245950,15774878,11764100,7561838,4275786],[14808516,15590772,16372771,16552250,16731728],[16699048,10074264,16745596,15223391,2766395],[16185277,15117351,8436899,12537128,6641219],[16380647,11461177,4243659,9420288,43206],[15256228,6590602,13380161,4342356,3478320],[15855525,13880893,6338970,16218149,5587510],[15329769,12369084,16750848,3316155,4342338],[15459242,13293490,11061946,8619657,6111575],[15909978,12563290,8955486,6196330,9184024],[16437385,16751707,16081738,3899779,15544380],[16054994,15790827,14806457,13954654,16728642],[16777215,13756241,5094633,2534884,0],[16298389,16151168,12610692,7101307,3497085],[15400422,12513794,8963109,5346632,1795947],[12369324,13614631,15889461,15737973,3878200],[16575414,15771696,7913640,15759384,6177071],[14874574,15253334,14976074,9510989,4531762],[15656619,12958862,6907736,4540491,3553595],[15784104,15914644,8829105,16394752,4004864],[16775101,15921775,9818039,16745018,15745365],[10536287,8041239,878425,732761,2753610],[15654297,15647376,13420173,15641224,12303240],[12179417,6718084,8076091,4798262,2762793],[15528065,16760384,11783255,15692911,11222619],[15579438,10725704,16275761,39305,13506614],[13418370,12103427,6787450,14889560,1508361],[15259065,15259063,16102217,16530001,926768],[15462345,15655095,15256239,12897207,11187115],[15757889,12601416,6297672,4718664,3145776],[16051139,15786660,12963502,12362391,11227755],[15790296,12638304,7901256,6322248,6309960],[14478786,16765877,11069134,16755366,16747668],[16776927,14662249,4079943,5910062,2763825],[16702650,15522748,14342845,13162943,11983040],[16578501,704444,16528716,1275005,2695711],[16771757,11788441,13714228,167798,1843504],[15592422,14082503,9750454,13853755,4209459],[16317633,13160194,15104030,1479591,13372473],[14341834,1814734,5211801,6970994,5649476],[15064523,10995133,15432537,13583943,5391958],[16642508,13031096,16568374,14921024,9994089],[15069260,12636734,14769714,11020099,6042174],[15461308,12379077,8565678,15867201,2297643],[12178352,16165523,16289657,8502692,11700084],[15137212,12377765,8624270,5720401,3805468],[16578515,14608574,12046755,13470802,6175017],[15744002,12720641,10682374,7012611,1835283],[16771826,16570853,16500184,15808877,3682098],[14933946,13162175,9686214,7126453,1711902],[13421772,11605539,10424603,2698295,0],[16510658,11325120,12694424,6399659,6314321],[16771503,16373420,16688802,9292973,9996388],[16185078,15263976,12125444,3355443,10027264],[15332089,10274020,15887439,3836361,1782367],[14471604,16431231,16285307,6201251,11556212],[16118999,14737329,10855276,5460531,9772843],[13172480,16384572,4275517,4915215,262148],[15725517,11720122,6401440,2396045,6312035],[14675174,9619363,3973794,2185837,2960681],[13631453,11853505,11030883,16719692,6051939],[13433998,9354900,14441278,8548485,5126493],[16776903,10340780,16751918,9539943,16081432],[16704941,16435814,10607538,16229697,16014668],[16776932,16773075,13692138,10475218,9140830],[11052967,13390458,15210333,4671303,3552822],[16772543,16311489,16220220,16074792,3018019],[16313809,12963782,14191242,10329491,4671555],[15855056,13494730,10537653,15960714,5588029],[9747045,2592944,5131594,2838130,3486770],[16711403,16315620,10859434,828848,5127984],[16177259,16476993,3379604,15797321,10945127],[13413525,10130556,10321529,7637891,5993836],[15595246,13746313,11739213,4271656,1380609],[15515155,9675818,3127468,3183250,290187],[16113875,16765107,16758924,14574178,5061435],[16776119,10942127,6731435,5995661,5187928],[16432680,16747008,8962304,49526,16711740],[16580341,16448483,15335393,14083779,13488055],[14539179,12572845,10280392,16232291,6503726],[754053,2056033,3560527,4208689,3155484],[16367478,9351877,15032924,13709629,6378357],[15657445,16769409,16438194,16759423,16751767],[11206400,16755200,43775,16711850,11141375],[13740596,10987588,10773891,12730669,5905994],[16315327,14476535,12570615,7692651,13844503]];
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=cc_example.js.map